<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>Qemu on root@v</title>
      <link>https://vorblock.cc/tags/qemu/</link>
      <description>Recent content in Qemu on root@v</description>
      <generator>Hugo -- gohugo.io</generator>
      <language>zh-CN</language>
      <lastBuildDate>Wed, 28 Aug 2019 23:24:18 +0800</lastBuildDate>
      
          <atom:link href="https://vorblock.cc/tags/qemu/index.xml" rel="self" type="application/rss+xml" />
      
      
      <item>
        <title>Qemu&#43;gdb调试Linux内核</title>
        <link>https://vorblock.cc/post/qemu&#43;gdb%E8%B0%83%E8%AF%95linux%E5%86%85%E6%A0%B8/</link>
        <pubDate>Wed, 28 Aug 2019 23:24:18 +0800</pubDate>
        
        <guid>https://vorblock.cc/post/qemu&#43;gdb%E8%B0%83%E8%AF%95linux%E5%86%85%E6%A0%B8/</guid>
        <description>

&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;调试Linux内核可以使用VM双机调试，不过使用qemu来调试会更加方便。&lt;/p&gt;

&lt;h3 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h3&gt;

&lt;h4 id=&#34;编译源码&#34;&gt;编译源码&lt;/h4&gt;

&lt;p&gt;首先到Linux &lt;a href=&#34;https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/&#34; target=&#34;_blank&#34;&gt;FTP仓库&lt;/a&gt;或者&lt;a href=&#34;https://www.kernel.org/&#34; target=&#34;_blank&#34;&gt;官网&lt;/a&gt;下载对应版本的源码。&lt;/p&gt;

&lt;p&gt;这里下载的是&lt;code&gt;linux-4.10.10&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;解压&lt;code&gt;tar -xvJf linux-4.10.10.tar.xz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    sudo apt install build-essential ncurses-dev xz-utils libssl-dev bc fakeroot aptitude libncurses5-dev

​    sudo apt install qemu&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;编译内核&#34;&gt;编译内核&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    make menuconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828152106.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;进行配置：&lt;code&gt;KernelHacking&lt;/code&gt; —&amp;gt;  &lt;code&gt;Compile-time checks and compiler options&lt;/code&gt;选中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Compile the kernel with debug info
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Compile the kernel with frame pointers
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Provide GDB scripts for kernel debugging
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Processor type and features→去掉Paravirtualized guest support
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存退出。&lt;/p&gt;

&lt;p&gt;命令&lt;code&gt;make -jN&lt;/code&gt; 进行编译&lt;/p&gt;

&lt;p&gt;之后&lt;code&gt;make all&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译完成之后，&lt;code&gt;vmlinux&lt;/code&gt;在源码根目录、&lt;code&gt;bzImage&lt;/code&gt;在&lt;code&gt;./arch/x86/boot/&lt;/code&gt;下&lt;/p&gt;

&lt;h4 id=&#34;构建initramfs根文件系统&#34;&gt;构建initramfs根文件系统&lt;/h4&gt;

&lt;p&gt;借助BusyBox构建极简initramfs，busybox最新版&lt;a href=&#34;https://busybox.net/downloads/&#34; target=&#34;_blank&#34;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编译静态版Busybox&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make menuconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828160608.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;设置以下选项：&lt;/p&gt;

&lt;p&gt;Settings -&amp;gt; Build Options -&amp;gt; Build static binary (no shared libs) 编译成静态文件&lt;/p&gt;

&lt;p&gt;开始编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make -jN
make install &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等待编译完成源码目录下出现&lt;code&gt;_install&lt;/code&gt;目录，进行配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; _install

​    mkdir proc sys dev etc etc/init.d

​    vim etc/init.d/rcS

​    &lt;span class=&#34;se&#34;&gt;\#&lt;/span&gt; 文件中的内容如下

​    &lt;span class=&#34;se&#34;&gt;\#&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#!/bin/sh&lt;/span&gt;

​    &lt;span class=&#34;se&#34;&gt;\#&lt;/span&gt; mount -t proc none /proc

​    &lt;span class=&#34;se&#34;&gt;\#&lt;/span&gt; mount -t sysfs none /sys

​    &lt;span class=&#34;se&#34;&gt;\#&lt;/span&gt; /sbin/mdev -s

​    chmod +x etc/init.d/rcS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建文件系统&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find . &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cpio -o --format&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;newc &amp;gt; ../rootfs.img&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;运行内核&#34;&gt;运行内核&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    qemu-system-x86_64 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
​    -kernel ~/linux-4.10.10/arch/x86_64/boot/bzImage &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
​    -initrd ~/busybox-1.31.0/rootfs.img &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
​    -append &lt;span class=&#34;s2&#34;&gt;&amp;#34;console=ttyS0 root=/dev/ram rdinit=/sbin/init&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
​    -cpu kvm64,+smep,+smap &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
​    -nographic &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
​    -gdb tcp::1234&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;**&lt;code&gt;-**cpu kvm64,**+**smep,**+**smap&lt;/code&gt; 设置CPU的安全选项，这里开启了smap和smep&lt;/p&gt;

&lt;p&gt;**&lt;code&gt;-**kernel&lt;/code&gt; 设置内核bzImage文件的路径&lt;/p&gt;

&lt;p&gt;**&lt;code&gt;-**initrd&lt;/code&gt; 设置刚才利用busybox创建的rootfs.img，作为内核启动的文件系统&lt;/p&gt;

&lt;p&gt;**&lt;code&gt;-**gdb tcp::1234&lt;/code&gt; 设置gdb的调试端口为1234 在GDB中通过 target remote localhist:1234进行连接&lt;/p&gt;

&lt;h4 id=&#34;驱动&#34;&gt;驱动&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;insmod&lt;/code&gt; 加载驱动&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rmmod&lt;/code&gt; 卸载驱动&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lsmod&lt;/code&gt; 查看加载了的驱动&lt;/p&gt;

&lt;h3 id=&#34;调试测试&#34;&gt;调试测试&lt;/h3&gt;

&lt;p&gt;qemu启动，启动后的界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828162012.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;启动GDB&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828164008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://my-md.oss-cn-shenzhen.aliyuncs.com/20190828164103.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;使用内核提供的GDB辅助调试功能：(gdb)apropos lx&lt;/p&gt;

&lt;p&gt;调试内核模块：add-symbol-file 添加模块文件&lt;/p&gt;

&lt;p&gt;断点测试 &lt;code&gt;b cmdline_proc_show&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat /proc/cmdline&lt;/code&gt; 触发断点&lt;/p&gt;

&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
</description>
        
      </item>
      
    </channel>
</rss>