<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fuzzing on Kuekiko` blog</title>
    <link>https://kuekiko.top/tags/fuzzing/</link>
    <description>Recent content in Fuzzing on Kuekiko` blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 15 Sep 2020 11:06:01 +0800</lastBuildDate>
    
	<atom:link href="https://kuekiko.top/tags/fuzzing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Syzkaller-Android</title>
      <link>https://kuekiko.top/posts/2020/09/syzkaller-android/</link>
      <pubDate>Tue, 15 Sep 2020 11:06:01 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/09/syzkaller-android/</guid>
      <description>0x00 前言 介绍使用syzkaller fuzz Android的配置教程。
0x01 环境 按要安装好环境
 go syzkaller 交叉编译aarch64-linux-android、g++-aarch64-linux-gnu、gcc-arm-linux-gnueabihf、g++-arm-linux-gnueabihf  0x02 配置 创建配置文件android.cfg
{ &amp;#34;target&amp;#34;: &amp;#34;linux/arm64&amp;#34;, // arm &amp;#34;http&amp;#34;: &amp;#34;127.0.0.1:56741&amp;#34;, &amp;#34;workdir&amp;#34;: &amp;#34;$GOPATH/src/github.com/google/syzkaller/workdir&amp;#34;, &amp;#34;kernel_obj&amp;#34;: &amp;#34;$KERNEL&amp;#34;, // 内核路径 &amp;#34;syzkaller&amp;#34;: &amp;#34;$GOPATH/src/github.com/google/syzkaller&amp;#34;, &amp;#34;sandbox&amp;#34;: none, &amp;#34;procs&amp;#34;: 8, &amp;#34;type&amp;#34;: &amp;#34;adb&amp;#34;, &amp;#34;cover&amp;#34;: true, &amp;#34;vm&amp;#34;: { &amp;#34;devices&amp;#34;: [$DEVICES], &amp;#34;battery_check&amp;#34;: true } }   KASAN+KCOV编译内核
  首先编译要fuzz的Android版本输入手机。（过程省略）[1]
  下载编译基准内核。[2] ，使用手动编译会报错，使用给KASCAN文档[3]的方法也可能报错。
## 创建文件夹 mkdir android-kernel &amp;amp;&amp;amp; cd android-kernel ## 切换分支 repo init -u https://android.googlesource.com/kernel/manifest -b BRANCH repo sync ## 修改内核build文件 内核路径下的build.</description>
    </item>
    
    <item>
      <title>Unicorn简单学习使用记录</title>
      <link>https://kuekiko.top/posts/2020/04/unicorn%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 17 Apr 2020 19:01:19 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/04/unicorn%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>0x00 介绍 Unicorn是一个轻量级, 多平台, 多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，常用于恶意代码分析，Fuzz等。
0x01 安装   官网有编译好不同平台的二进制包，直接安装就行。但是看了一下时间2017年的，qemu已经升级好几个版本了。api也比较老旧。
  去github看了一下是否有在更新，发现一直有在更新，不过好像也没更新啥，只是修复一些bug，下载git源码，自己编译。目前最新1.0.2rc
git clone https://github.com/unicorn-engine/unicorn.git cd unicorn # UNICORN_ARCHS=&amp;#34;arm aarch64 x86&amp;#34; ./make.sh # 设置要编译的架构 可选 默认6种全编译 (Arm, Arm64, M68K, Mips, Sparc, &amp;amp; X86) ./make.sh sudo ./make.sh install # python 绑定 cd bindings/python sudo python3 setup.py install 还有更多交叉编译选项参考 文档
  0x02 简单使用 C :
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unicorn/unicorn.h&amp;gt; // 要模拟的指令 #define X86_CODE32 &amp;#34;\x41\x4a&amp;#34; // INC ecx; DEC edx  // 起始地址 #define ADDRESS 0x1000000  int main(int argc, char const *argv[]){ // 设置engine  uc_engine *uc; uc_err err; //设置寄存器  int r_ecx = 0x1234; int r_edx = 0x5678; printf(&amp;#34;Emulate i386 code\n&amp;#34;); // x86 32bit 初始化  err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;amp;uc); if (err !</description>
    </item>
    
    <item>
      <title>Syzkaller fuzzing 入门</title>
      <link>https://kuekiko.top/posts/2020/04/syzkaller-fuzzing-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 10 Apr 2020 18:59:00 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/04/syzkaller-fuzzing-%E5%85%A5%E9%97%A8/</guid>
      <description>0x00 介绍 syzkaller是google的安全研究人员开发并维护的内核fuzz工具。它主要是用go写的，也有少部分C代码，支持akaros/fuchsia/linux/android/freebsd/netbsd/openbsd/windows等系统，发现的漏洞多达上千。
0x01 环境配置 环境要求：
  C/C++ 编译器
 GCC 6.1.0+    linux kernel
 编译 v4.6以后编译时确保CONFIG_KCOV=y 之前版本：这样添加支持 一些额外选项    VM 一般QEMU
 支持QEMU、kvmtool和GCE虚拟机、Android设备和Odroid C2开发板 需要进行通信：vm要提供网络支持 vm配置需要ssh服务器 要能执行ssh -i $SSHID -p $PORT root@localhost 需要将debugfs 挂在到 /sys/kernel/debug    Golang 安装
wget https://dl.google.com/go/go1.14.1.linux-amd64.tar.gz tar -C ~/goroot -xzf go1.14.1.linux-amd64.tar.gz vim /etc/profile mkdir /usr/local/gopath # 添加export export GOROOT=/home/kuekiko/goroot export GOPATH=/home/kuekiko/gopath export PATH=$GOROOT/bin:$PATH export PATH=$GOPATH/bin:$PATH source etc/profile   syzkaller</description>
    </item>
    
  </channel>
</rss>