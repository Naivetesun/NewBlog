<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwn on Vorblock&#39;Blog</title>
    <link>https://naivete.cc/tags/pwn/</link>
    <description>Recent content in Pwn on Vorblock&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Feb 2019 00:22:36 +0800</lastBuildDate>
    
	<atom:link href="https://naivete.cc/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ROP练习</title>
      <link>https://naivete.cc/2019/02/28/rop%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Thu, 28 Feb 2019 00:22:36 +0800</pubDate>
      
      <guid>https://naivete.cc/2019/02/28/rop%E7%BB%83%E4%B9%A0/</guid>
      <description> 题目列表： </description>
    </item>
    
    <item>
      <title>CTF PWN刷题记录 CTFWiki_1栈溢出</title>
      <link>https://naivete.cc/2019/02/20/ctf-pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-ctfwiki_1%E6%A0%88%E6%BA%A2%E5%87%BA/</link>
      <pubDate>Wed, 20 Feb 2019 00:17:21 +0800</pubDate>
      
      <guid>https://naivete.cc/2019/02/20/ctf-pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-ctfwiki_1%E6%A0%88%E6%BA%A2%E5%87%BA/</guid>
      <description>看CTFWiki来入门CTF-PWN (Linux和arm) 做个记录
 知识点：[PWN相关知识点总结]()
 Linux PWN
 ARM PWN
  题目全部来源于 CTFWiki 上所涉及题目
Linux PWN 大部分原理参考CTFWiki
栈溢出 基本栈溢出 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; void success() { puts(&amp;quot;You Hava already controlled it.&amp;quot;); } void vulnerable() { char s[12]; gets(s); puts(s); return; } int main(int argc, char **argv) { vulnerable(); return 0; }  # gcc -m32 -fno-stack-protector -no-pie stack1.c -o stack1 stack1.c: In function ‘vulnerable’: stack1.c:6:3: warning: implicit declaration of function ‘gets’; did you mean ‘fgets’?</description>
    </item>
    
    <item>
      <title>PWN 小tools的使用</title>
      <link>https://naivete.cc/2018/10/22/pwn-%E5%B0%8Ftools%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 22 Oct 2018 20:39:26 +0800</pubDate>
      
      <guid>https://naivete.cc/2018/10/22/pwn-%E5%B0%8Ftools%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>GCC 编译常用命令    不带选项  gcc test.c 将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。     -o 指定生成的输出文件； gcc test.c -o test 将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。   -E 仅执行编译预处理； gcc -E test.c -o test.i 将test.c预处理输出test.i文件。   -S 将C代码转换为汇编代码； gcc -S test.i 将预处理输出文件test.i汇编成test.s文件。   -c 仅执行编译操作，不进行连接操作。 gcc -c test.s 将汇编输出文件test.s编译输出test.o文件。   -wall 显示警告信息；    无选项链接  gcc test.o -o test 将编译输出文件test.o链接成最终可执行文件test。   -O 使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长 gcc -O1 test.c -o test    关掉DEP/NX（堆栈不可执行） gcc -z execstack -o level level.</description>
    </item>
    
  </channel>
</rss>