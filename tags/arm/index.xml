<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>ARM on vorblock</title>
      <link>https://vorblock.cc/tags/arm/</link>
      <description>Recent content in ARM on vorblock</description>
      <generator>Hugo -- gohugo.io</generator>
      <language>zh-CN</language>
      <lastBuildDate>Wed, 10 Oct 2018 16:40:20 +0800</lastBuildDate>
      
          <atom:link href="https://vorblock.cc/tags/arm/index.xml" rel="self" type="application/rss+xml" />
      
      
      <item>
        <title>Android-ARM进阶</title>
        <link>https://vorblock.cc/post/android-arm%E8%BF%9B%E9%98%B6/</link>
        <pubDate>Wed, 10 Oct 2018 16:40:20 +0800</pubDate>
        
        <guid>https://vorblock.cc/post/android-arm%E8%BF%9B%E9%98%B6/</guid>
        <description>

&lt;p&gt;学习一些关于ARM的汇编结构特点，以及分析。理解一些结构最好的方法就是多去尝试动手做。。&lt;/p&gt;

&lt;h3 id=&#34;ndk-build的使用&#34;&gt;NDK-Build的使用&lt;/h3&gt;

&lt;p&gt;可以参考&lt;a href=&#34;https://developer.android.com/ndk/guides/ndk-build?hl=zh-cn&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个Android项目&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd 项目目录&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;ndk&gt;/ndk-build   。也可以将NDK-build加入环境变量。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建jni文件夹，添加 Android.mk和 Application.mk两个文件。（参考官方文档）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mk&#34; data-lang=&#34;mk&#34;&gt;   //Android.mk
   LOCAL_PATH :&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;call my-dir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
   include &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CLEAR_VARS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
   
   &lt;span class=&#34;c1&#34;&gt;# 要生成的.so库名称&lt;/span&gt;
   LOCAL_MODULE :&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; hello
   &lt;span class=&#34;c1&#34;&gt;# c++文件&lt;/span&gt;
   LOCAL_SRC_FILES :&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; hello.cpp
   include &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;BUILD_SHARED_LIBRARY&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mk&#34; data-lang=&#34;mk&#34;&gt;   //Application.mk
   APP_PLATFORM :&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; android-17
   &lt;span class=&#34;c1&#34;&gt;# APP_ABI := all&lt;/span&gt;
   APP_ABI :&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;armeabi-v7a arm64-v8a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加hello.cpp：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;   &lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;cm&#34;&gt;/* code */&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello,world!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
           &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;num value is %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ndk-build&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180814152220.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;push 到Android设备运行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里ARM32位出现里非法引用（Illegal instruction）。。之后再试试&lt;/p&gt;

&lt;p&gt;改成ARM64之后又出现内存区段错误“Segmentation fault”  有毒呀。。可能是哪里设置有问题。。&lt;/p&gt;

&lt;h3 id=&#34;arm-linux-gcc交叉编译器编译&#34;&gt;arm-linux-gcc交叉编译器编译&lt;/h3&gt;

&lt;p&gt;arm-linux-gcc也能编译出ARM可执行文件。&lt;code&gt;sudo apt install g++-arm-linux-gnueabihf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者下载&lt;a href=&#34;https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads&#34; target=&#34;_blank&#34;&gt;二进制&lt;/a&gt;文件安装。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;arm-linux-gnueabihf-g++  -static  helloworld.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;push进Android之后运行成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180814164353.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;使用这个方法和用NDK-build编译的有差异。&lt;/p&gt;

&lt;h3 id=&#34;for循环&#34;&gt;for循环&lt;/h3&gt;

&lt;p&gt;待添加&lt;/p&gt;

&lt;h3 id=&#34;if-else&#34;&gt;if-else&lt;/h3&gt;

&lt;p&gt;待添加&lt;/p&gt;

&lt;h3 id=&#34;while&#34;&gt;while&lt;/h3&gt;

&lt;h3 id=&#34;switch&#34;&gt;switch&lt;/h3&gt;

&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;

&lt;p&gt;###C++&lt;/p&gt;

&lt;h3 id=&#34;jni-api分析&#34;&gt;JNI API分析&lt;/h3&gt;
</description>
        
      </item>
      
      <item>
        <title>ARM汇编基础</title>
        <link>https://vorblock.cc/post/arm%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Fri, 10 Aug 2018 19:34:10 +0800</pubDate>
        
        <guid>https://vorblock.cc/post/arm%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid>
        <description>

&lt;h2 id=&#34;arm汇编基础-简&#34;&gt;ARM汇编基础(简)&lt;/h2&gt;

&lt;p&gt;经常忘记，做个笔记，好作复习。。&lt;/p&gt;

&lt;p&gt;内容主要来源于《Android软件安全与逆向分析》和《逆向工程权威指南》以及 &lt;a href=&#34;https://www.anquanke.com/post/id/86383&#34; target=&#34;_blank&#34;&gt;ARM 汇编&lt;/a&gt; 和&lt;a href=&#34;https://azeria-labs.com/writing-arm-assembly-part-1/&#34; target=&#34;_blank&#34;&gt;Azeria-labs&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;arm架构&#34;&gt;ARM架构&lt;/h3&gt;

&lt;p&gt;ARM属于RISC CPU，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ARM模式   4个字节opcode  32位&lt;/li&gt;
&lt;li&gt;Thumb模式  2个字节opcode  16位&lt;/li&gt;
&lt;li&gt;Thumb-2模式  同上（只是有部分4个字节的opcode)&lt;/li&gt;
&lt;li&gt;64位ARM  4个字节opcode&lt;/li&gt;
&lt;li&gt;ARM机器码在版本3之前是小端。但是之后默认采用大端格式，但可以设置切换到小端。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810112415.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;

&lt;p&gt;数据类型在汇编语言中的扩展后缀为&lt;strong&gt;-h&lt;/strong&gt;或者&lt;strong&gt;-sh&lt;/strong&gt;对应着半字，&lt;strong&gt;-b&lt;/strong&gt;或者&lt;strong&gt;-sb&lt;/strong&gt;对应着字节，但是对于字并没有对应的扩展&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810113108.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;加载字，宽度四字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;ldrh&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;加载无符号的半字，宽度两字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;ldrsh&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;加载有符号的半字，宽度两字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;ldrb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;加载无符号的字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;ldrsb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;加载有符号的字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;存储字，宽度四字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;strh&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;存储无符号的半字，宽度两字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;strsh&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;存储有符号的半字，宽度两字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;strb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;存储无符号的字节&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;strsb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;存储有符号的字节&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;字节序&#34;&gt;字节序&lt;/h3&gt;

&lt;p&gt;在内存中有两种字节排布顺序，大端序(BE)或者小端序(LE)。两者的主要不同是对象中的每个字节在内存中的存储顺序存在差异。一般X86中是小端序，最低的字节存储在最低的地址上。在大端机中最高的字节存储在最低的地址上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://p0.ssl.qhimg.com/t01b6d7f41b02b0a58d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;数据访问时采取大端序还是小端序使用程序状态寄存器(CPSR)的第9比特位来决定的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810120701.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;寄存器&#34;&gt;寄存器&lt;/h3&gt;

&lt;p&gt;37个32位寄存器，其中31个为基础寄存器，6个为状态寄存器。&lt;/p&gt;

&lt;p&gt;用户模式下有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不分组寄存器（R0-R7） R7一般存放系统调用号&lt;/li&gt;
&lt;li&gt;分组寄存器（R8-R14）&lt;/li&gt;
&lt;li&gt;程序计数器（R15）&lt;/li&gt;
&lt;li&gt;单前程序状态寄存器（CPSR）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两种状态：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;ARM状态（32位对齐）&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Thumb状态(16位对齐)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;R0-R7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;R0-R7(相同)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CPSR&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CPSR（同）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;R11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FP（栈帧指针）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;R12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;IP（内部程序调用）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;R13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SP（栈指针）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;R14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LR（链接寄存器）一般存放函数返回地址&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;R15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PC（程序计数器）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;和x86对比：&lt;img src=&#34;https://p5.ssl.qhimg.com/t01a8e5d24fa91f9f0f.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;CSPR:&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810122226.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;32位的CPSR寄存器的比特位含义，左边是最大比特位，右边是最小比特位。每个单元代表一个比特。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810122258.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;条件码&lt;/th&gt;
&lt;th&gt;助记符后缀&lt;/th&gt;
&lt;th&gt;标志&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0000&lt;/td&gt;
&lt;td&gt;EQ&lt;/td&gt;
&lt;td&gt;Z置位&lt;/td&gt;
&lt;td&gt;相等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0001&lt;/td&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;Z清零&lt;/td&gt;
&lt;td&gt;不相等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0010&lt;/td&gt;
&lt;td&gt;CS&lt;/td&gt;
&lt;td&gt;C置位&lt;/td&gt;
&lt;td&gt;无符号数大于或等于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0011&lt;/td&gt;
&lt;td&gt;CC&lt;/td&gt;
&lt;td&gt;C清零&lt;/td&gt;
&lt;td&gt;无符号数小于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0100&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;N置位&lt;/td&gt;
&lt;td&gt;负数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0101&lt;/td&gt;
&lt;td&gt;PL&lt;/td&gt;
&lt;td&gt;N清零&lt;/td&gt;
&lt;td&gt;正数或零&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0110&lt;/td&gt;
&lt;td&gt;VS&lt;/td&gt;
&lt;td&gt;V置位&lt;/td&gt;
&lt;td&gt;溢出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0111&lt;/td&gt;
&lt;td&gt;VC&lt;/td&gt;
&lt;td&gt;V清零&lt;/td&gt;
&lt;td&gt;未溢出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;HI&lt;/td&gt;
&lt;td&gt;C置位Z清零&lt;/td&gt;
&lt;td&gt;无符号数大于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;LS&lt;/td&gt;
&lt;td&gt;C清零Z置位&lt;/td&gt;
&lt;td&gt;无符号数小于或等于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1010&lt;/td&gt;
&lt;td&gt;GE&lt;/td&gt;
&lt;td&gt;N等于V&lt;/td&gt;
&lt;td&gt;带符号数大于或等于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1011&lt;/td&gt;
&lt;td&gt;LT&lt;/td&gt;
&lt;td&gt;N不等于V&lt;/td&gt;
&lt;td&gt;带符号数小于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;GT&lt;/td&gt;
&lt;td&gt;Z清零且（N等于V）&lt;/td&gt;
&lt;td&gt;带符号数大于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1101&lt;/td&gt;
&lt;td&gt;LE&lt;/td&gt;
&lt;td&gt;Z置位或（N不等于V）&lt;/td&gt;
&lt;td&gt;带符号数小于或等于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1110&lt;/td&gt;
&lt;td&gt;AL&lt;/td&gt;
&lt;td&gt;忽略&lt;/td&gt;
&lt;td&gt;无条件执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;程序结构&#34;&gt;程序结构&lt;/h3&gt;

&lt;p&gt;Android平台采用的是GUN ARM汇编格式，汇编器为GAS&lt;/p&gt;

&lt;p&gt;参数传递：R0-R3这4个寄存器用来传递函数调用的第1到4个参数，超出的参数通过堆栈来传递。R0还用来存放函数调用的返回值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810112712.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;汇编器指令&#34;&gt;汇编器指令&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.file&lt;/code&gt;:源文件名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.align&lt;/code&gt;:代码对齐方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.ascii&lt;/code&gt;:声明字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.global&lt;/code&gt;:声明全局符号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.type&lt;/code&gt;：指定符号的类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.word&lt;/code&gt;：存放地址值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.size&lt;/code&gt;：设置指定符号的大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.ident&lt;/code&gt;：编译器标识&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;寻址方式&#34;&gt;寻址方式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;立即寻址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MOV R0, #1234&lt;/code&gt;     -&amp;gt;R0=1234&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;寄存器寻址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MOV R1 = R2&lt;/code&gt;   -&amp;gt;R0=R1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;寄存器移位寻址&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LSL ：逻辑左移，移位后寄存器空出的低位补0&lt;/li&gt;
&lt;li&gt;LSR：逻辑右移，移位后寄存器空出的高位补0&lt;/li&gt;
&lt;li&gt;ASR：算术右移，移位过程中符号位保持不变，若源操作数为正数，则移位后空出的高位补0，否则补1。&lt;/li&gt;
&lt;li&gt;ROR：循环右移，移位后移出的低位填入移位空出的高位。&lt;/li&gt;
&lt;li&gt;RRX：带扩展的循环右移，操作数右移一位，移出的空位用C标志的值填充。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MOV R0, R1, LSL #2&lt;/code&gt;  -&amp;gt;R1左移两位（R1&amp;lt;&amp;lt;2）赋值给R0,相当于R0 = R1*4&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;寄存器间接寻址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;LDR RO, [R1]&lt;/code&gt;  -&amp;gt;将R1寄存器的数值作为地址，取出此地址中的值赋给R0寄存器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基址寻址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多用于查表、数组访问操作。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LDR R0, [R1,#-4]&lt;/code&gt; -&amp;gt;将R1寄存器的数值减4作为地址，取出此地址的值赋给R0寄存器。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多寄存器寻址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一条指令最多完成16个通用寄存器值的传送。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LDMIA R0,{R1,R2,R3,R4}&lt;/code&gt; -&amp;gt;LDM为数据加载指令，指令的后缀IA表示每次执行完加载操作后R0寄存器的值自增1个字，ARM指令集中，子表示的是一个32位数值。这条指令作用为：R1 = [R0],R2 = [R0+#4],R3 = [R0+#8],R4 = [R0+#12]。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;堆栈寻址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特定的指令来完成：&lt;code&gt;LDMFA/STMFA&lt;/code&gt;、&lt;code&gt;LDMEA/STMEA&lt;/code&gt;、&lt;code&gt;LDMFD/STMFD&lt;/code&gt;、&lt;code&gt;LDMED/STMED&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;LDM和STM为指令前缀，表示多寄存器寻址，即一次传送多个寄存器的值。后面的后缀为指令后缀。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;STMFD SP!, {R1-R7,LR}&lt;/code&gt;  -&amp;gt;将R1~R7,LR入栈，多用于保存子程序的现场。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LDMFD SP!, {R1-R7,LR}&lt;/code&gt; -&amp;gt;出栈，恢复现场。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;块拷贝寻址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实现从连续地址数据从存储器的某一位置拷贝到另外一个位置，指令有：&lt;code&gt;LDMIA/STMIA&lt;/code&gt;、&lt;code&gt;LDMDA/STMDA&lt;/code&gt;、&lt;code&gt;LDMIB/STMIB&lt;/code&gt;、&lt;code&gt;LDMDB/STMDB&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LDMIA R0! {R0-R3}&lt;/code&gt;  从R0寄存器指向的存储单元中读取3个字到R1-R3寄存器&lt;/p&gt;

&lt;p&gt;&lt;code&gt;STMIA R0! {R0-R3}&lt;/code&gt; 存储从R1-R3寄存器的内容到R0寄存器指向的存储单元&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;相对寻址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以程序计数器PC的当前值为基地址，指令中的地址标号作为偏移量，将两者相加之后得到操作数的有效地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;BL&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NEXT&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;····&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;NEXT:&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;········&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;arm和thumb指令集&#34;&gt;ARM和Thumb指令集&lt;/h3&gt;

&lt;h5 id=&#34;基本指令简述&#34;&gt;基本指令简述&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;MNEMONIC{S}{condition} {Rd}, Operand1, Operand2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;助记符{是否使用CPSR}{是否条件执行以及条件} {目的寄存器}, 操作符1, 操作符2&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MNEMONIC     - 指令的助记符如ADD&lt;/p&gt;

&lt;p&gt;{S}                      - 可选的扩展位，如果指令后加了S，则需要依据计算结果更新CPSR寄存器中的条件跳转相关    的FLAG&lt;/p&gt;

&lt;p&gt;{condition}        - 如果机器码要被条件执行，那它需要满足的条件标示&lt;/p&gt;

&lt;p&gt;{Rd}                    - 存储结果的目的寄存器&lt;/p&gt;

&lt;p&gt;Operand1     - 第一个操作数，寄存器或者是一个立即数&lt;/p&gt;

&lt;p&gt;Operand2     - 第二个(可变的)操作数，可以是一个立即数或者寄存器或者有偏移量的寄存器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第二操作数还有如下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;c&#34;&gt;#123                    - 立即数
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Rx&lt;/span&gt;                      &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;寄存器比如&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;Rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ASR&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;n&lt;/span&gt;               &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对寄存器中的值进行算术右移&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;n位后的值&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;Rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;LSL&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;n&lt;/span&gt;               &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对寄存器中的值进行逻辑左移&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;n位后的值&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;Rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;LSR&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;n&lt;/span&gt;               &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对寄存器中的值进行逻辑右移&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;n位后的值&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;Rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ROR&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;n&lt;/span&gt;               &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对寄存器中的值进行循环右移&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;n位后的值&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;Rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;RRX&lt;/span&gt;                 &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对寄存器中的值进行带扩展的循环右移&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;位后的值&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ADD&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;R0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;R1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;R2&lt;/span&gt;         &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将第一操作数&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1的内容与第二操作数R2的内容相加&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，将结果存储到&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R0中&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;ADD&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;R0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;R1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#2         - 将第一操作数R1的内容与第二操作数一个立即数相加，将结果存到R0中
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MOVLE&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;R0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#5             - 当满足条件LE(Less and Equal,小于等于0)将第二操作数立即数5移动到R0中,注意这条指令与MOVLE R0, R0, #5相同
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MOV&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;R0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;R1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;LSL&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将第二操作数&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1寄存器中的值逻辑左移1位后存入R0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810144732.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;内存访问相关指令&#34;&gt;内存访问相关指令&lt;/h5&gt;

&lt;p&gt;通常，LDR被用来从内存中加载数据到寄存器，STR被用作将寄存器的值存放到内存中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810145231.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;na&#34;&gt;.data&lt;/span&gt;          &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;数据段是在内存中动态创建的，所以它的在内存中的地址不可预测&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;var1:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;内存中的第一个变量&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;var2:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;内存中的第二个变量&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;          &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;代码段开始&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt; 
&lt;span class=&#34;no&#34;&gt;.global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;adr_var1&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将存放&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;var1值的地址adr_var1加载到寄存器R0中&lt;/span&gt; 
    &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;adr_var2&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将存放&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;var2值的地址adr_var2加载到寄存器R1中&lt;/span&gt; 
    &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R0所指向地址中存放的0x3加载到寄存器R2中&lt;/span&gt;  
    &lt;span class=&#34;no&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R2中的值0x3存放到R1做指向的地址&lt;/span&gt; 
    &lt;span class=&#34;no&#34;&gt;bkpt&lt;/span&gt;             
&lt;span class=&#34;no&#34;&gt;adr_var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var1&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var1的地址助记符&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;adr_var2:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var2&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var2的地址助记符&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810145711.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810154906.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一种偏移形式：立即数作偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;STR&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;Ra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;imm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;LDR&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;Ra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;imm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  
  &lt;span class=&#34;na&#34;&gt;.data&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;var1:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;var2:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;.global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
      &lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;adr_var1&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将存放&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;var1值的地址adr_var1加载到寄存器R0中&lt;/span&gt; 
      &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;adr_var2&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将存放&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;var2值的地址adr_var2加载到寄存器R1中&lt;/span&gt; 
      &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R0所指向地址中存放的0x3加载到寄存器R2中&lt;/span&gt;  
      &lt;span class=&#34;no&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加2所指向地址处。
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;no&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#4]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加4所指向地址处，之后R1寄存器中存储的值加4,也就是R1=R1+4。
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#4  @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中存储的值加4,也就是R1=R1+4。
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;no&#34;&gt;bkpt&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;adr_var1:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var1&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;adr_var2:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810160844.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第二种偏移形式：寄存器作偏移&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;STR&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;Ra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;LDR&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;Ra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  &lt;span class=&#34;na&#34;&gt;.data&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;var1:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;var2:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;.global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
      &lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;adr_var1&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将存放&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;var1值的地址adr_var1加载到寄存器R0中&lt;/span&gt; 
      &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;adr_var2&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将存放&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;var2值的地址adr_var2加载到寄存器R1中&lt;/span&gt; 
      &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R0所指向地址中存放的0x3加载到寄存器R2中&lt;/span&gt;  
      &lt;span class=&#34;no&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;取址模式：基于偏移量。&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R2寄存器中的值0x3被存放到R1寄存器的值加R2寄存器的值所指向地址处&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1寄存器不会被修改&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt; 
      &lt;span class=&#34;no&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]!&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;取址模式：基于索引前置修改。&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R2寄存器中的值0x3被存放到R1寄存器的值加R2寄存器的值所指向地址处&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，之后&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1寄存器中的值被更新&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;也就是&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
      &lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;取址模式：基于索引后置修改。&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R3寄存器中的值是从R1寄存器的值所指向的地址中加载的&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，加载之后&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1寄存器中的值被更新也就是R1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
      &lt;span class=&#34;nf&#34;&gt;bx&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;lr&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;adr_var1:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var1&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;adr_var2:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810162217.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第三种偏移形式：寄存器缩放值作偏移&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;LDR&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;Ra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;shifter&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;STR&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;Ra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;shifter&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  &lt;span class=&#34;na&#34;&gt;.data&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;var1:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;var2:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;.global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
      &lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;adr_var1&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将存放&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;var1值的地址adr_var1加载到寄存器R0中&lt;/span&gt; 
      &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;adr_var2&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将存放&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;var2值的地址adr_var2加载到寄存器R1中&lt;/span&gt; 
      &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;             &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R0所指向地址中存放的0x3加载到寄存器R2中&lt;/span&gt;  
      &lt;span class=&#34;no&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;LSL&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处。R1寄存器不会被修改。
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;no&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;LSL&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#2]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处，之后R1寄存器中的值被更新,也就R1 = R1 + R2&amp;lt;&amp;lt;2。
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;LSL&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#2  @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中的值被更新也就是R1 = R1 + R2&amp;lt;&amp;lt;2。
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;no&#34;&gt;bkpt&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;adr_var1:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var1&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;adr_var2:&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;var2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180810162414.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如何区分取址模式：&lt;/p&gt;

&lt;p&gt;如果有一个叹号!，那就是索引前置取址模式，即使用计算后的地址，之后更新基址寄存器。&lt;/p&gt;

&lt;p&gt;如果在[]外有一个寄存器，那就是索引后置取址模式，即使用原有基址寄存器重的地址，之后再更新基址寄存器&lt;/p&gt;

&lt;p&gt;除此之外，就都是偏移取址模式了&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关于PC相对取址的LDR指令&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有时候LDR并不仅仅被用来从内存中加载数据。还有如下这操作:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  &lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;.global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
     &lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;jump&lt;/span&gt;        &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;加载&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;jump标签所在的内存位置到R0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
     &lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x68DB00AD&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;加载立即数&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x68DB00AD&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;到&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;jump:&lt;/span&gt;
     &lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;511&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;加载立即数&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;511&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;到&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt; 
     &lt;span class=&#34;no&#34;&gt;bkpt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些指令学术上被称作伪指令。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在ARM中使用立即数的规律&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在ARM中不能像X86那样直接将立即数加载到寄存器中。因为你使用的立即数是受限的。&lt;/p&gt;

&lt;p&gt;立即数的值：v = n ror 2*r 有效的立即数都可以通过循环右移来得到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;  &lt;span class=&#34;c&#34;&gt;#256        // 1 循环右移 24位 --&amp;gt; 256
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;#384        // 6 循环右移 26位 --&amp;gt; 384
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;#484        // 121 循环右移 30位 --&amp;gt; 484
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;#16384      // 1 循环右移 18位 --&amp;gt; 16384
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;#2030043136 // 121 循环右移 8位 --&amp;gt; 2030043136
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;#0x06000000 // 6 循环右移 8位 --&amp;gt; 100663296 (十六进制值0x06000000)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;Invalid&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;#370        // 185 循环右移 31位 --&amp;gt; 31不在范围内 (0 – 30)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;#511        // 1 1111 1111 --&amp;gt; 比特模型不符合
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;#0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;x06010000&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0001&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;比特模型不符合&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样并不能一次性加载所有的32位值。不过我们可以通过以下的两个选项来解决这个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用小部分去组成更大的值。    MOV r0, #511  将511分成两部分：MOV r0, #256, and ADD r0, #255&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;.global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
 &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#256   /* 1 ror 24 = 256, so it&amp;#39;s valid */
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#255   /* 255 ror 0 = 255, valid. r0 = 256 + 255 = 511 */
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ldr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;511&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;load&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;511&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;literal&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;LDR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
 &lt;span class=&#34;nf&#34;&gt;bkpt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;计算立即数的有效值脚本：&lt;a href=&#34;https://raw.githubusercontent.com/azeria-labs/rotator/master/rotator.py&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/azeria-labs/rotator/master/rotator.py&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;azeria@labs:~$ python rotator.py
Enter the value you want to check: &lt;span class=&#34;m&#34;&gt;511&lt;/span&gt;
Sorry, &lt;span class=&#34;m&#34;&gt;511&lt;/span&gt; cannot be used as an immediate number and has to be split.
azeria@labs:~$ python rotator.py
Enter the value you want to check: &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt;
The number &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; can be used as a valid immediate number.
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ror &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; --&amp;gt; &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的部分指令用到在详细查，记的话脑壳痛&lt;/p&gt;

&lt;p&gt;##### 跳转指令&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BXL&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##### 存储器操作指令&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;LDM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUSH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SWP&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##### 数据处理&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;MOV&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MVN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RSB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SBC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RSC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MUL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MLS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MLA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UMULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UMLAL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMUULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMLAL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMLAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMLSD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDIV&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UDIV&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ASR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AND&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ORR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BIC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LSL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LSR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RRX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TSL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TEQ&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##### 其他指令&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SWI&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;NOP&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;MRS&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;MSR&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###&lt;/p&gt;
</description>
        
      </item>
      
    </channel>
</rss>