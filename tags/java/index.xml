<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Vorblock&#39;Blog</title>
    <link>https://naivete.cc/tags/java/</link>
    <description>Recent content in Java on Vorblock&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Jul 2018 16:40:20 +0800</lastBuildDate>
    
	<atom:link href="https://naivete.cc/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java反射机制学习笔记</title>
      <link>https://naivete.cc/2018/07/25/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 25 Jul 2018 16:40:20 +0800</pubDate>
      
      <guid>https://naivete.cc/2018/07/25/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>Java 反射机制学习记录 在逆向中反射也是能经常看见，之前理解不是很深透，现在来重点学习一下，做个笔记。
什么是反射机制？ 反射(Reflection)是Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。 通俗一点：在动态运行时，获取到一个类的所有方法以及成员。简而言之，通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。
作用？  1.在运行时判断任意一个对象所属的类；
 2.在运行时构造任意一个类的对象；
 3.在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；
 4.在运行时调用任意一个对象的方法
  是运行时而不是编译时  获取某些类的一些变量，调用某些类的私有方法。
 增加代码的灵活性。很多主流框架都使用了反射技术.像ssh框架都采用两种技术 xml做配置文件+反射技术.
  基本使用 反射相关的类一般都在java.lang.relfect 包里。
 获取Class对象 3种方法
  (1)使用Class类的forName静态方法:
public static Class&amp;lt;?&amp;gt; forName(String className) //在JDBC开发中常用此方法加载数据库驱动: Class.forName(driver);  (2)直接获取某一个对象的class，比如:
Class&amp;lt;?&amp;gt; klass = int.class; Class&amp;lt;?&amp;gt; classInt = Integer.TYPE;  (3)调用某个对象的getClass()方法,比如:
StringBuilder str = new StringBuilder(&amp;quot;123&amp;quot;); Class&amp;lt;?&amp;gt; klass = str.getClass();   判断是否为某一个类的实例
  一般使用instanceof来判断，也可以借助反射中的Class对象的isInstance()方法来判断 是一个Native方法：</description>
    </item>
    
  </channel>
</rss>