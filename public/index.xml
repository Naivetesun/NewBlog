<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>------------</title>
    <link>https://kuekiko.top/</link>
    <description>Recent content on ------------</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 17 Apr 2020 19:01:19 +0800</lastBuildDate>
    
	<atom:link href="https://kuekiko.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://kuekiko.top/posts/2014/09/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kuekiko.top/posts/2014/09/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://kuekiko.top/posts/2014/03/migrate-to-hugo-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kuekiko.top/posts/2014/03/migrate-to-hugo-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Unicorn简单学习使用记录</title>
      <link>https://kuekiko.top/posts/2020/04/unicorn%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 17 Apr 2020 19:01:19 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/04/unicorn%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>0x00 介绍 Unicorn是一个轻量级, 多平台, 多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，常用于恶意代码分析，Fuzz等。
0x01 安装   官网有编译好不同平台的二进制包，直接安装就行。但是看了一下时间2017年的，qemu已经升级好几个版本了。api也比较老旧。
  去github看了一下是否有在更新，发现一直有在更新，不过好像也没更新啥，只是修复一些bug，下载git源码，自己编译。目前最新1.0.2rc
git clone https://github.com/unicorn-engine/unicorn.gitcd unicorn# UNICORN_ARCHS=&amp;#34;arm aarch64 x86&amp;#34; ./make.sh # 设置要编译的架构 可选 默认6种全编译 (Arm, Arm64, M68K, Mips, Sparc, &amp;amp; X86)./make.shsudo ./make.sh install# python 绑定cd bindings/pythonsudo python3 setup.py install还有更多交叉编译选项参考 文档
  0x02 简单使用 C :
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unicorn/unicorn.h&amp;gt;// 要模拟的指令#define X86_CODE32 &amp;#34;\x41\x4a&amp;#34; // INC ecx; DEC edx// 起始地址#define ADDRESS 0x1000000int main(int argc, char const *argv[]){// 设置engine uc_engine *uc;uc_err err;//设置寄存器 int r_ecx = 0x1234;int r_edx = 0x5678;printf(&amp;#34;Emulate i386 code\n&amp;#34;);// x86 32bit 初始化 err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;amp;uc);if (err !</description>
    </item>
    
    <item>
      <title>Syzkaller</title>
      <link>https://kuekiko.top/posts/2020/04/syzkaller/</link>
      <pubDate>Fri, 10 Apr 2020 18:59:00 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/04/syzkaller/</guid>
      <description>0x00 介绍 syzkaller是google的安全研究人员开发并维护的内核fuzz工具。它主要是用go写的，也有少部分C代码，支持akaros/fuchsia/linux/android/freebsd/netbsd/openbsd/windows等系统，发现的漏洞多达上千。
0x01 环境配置 环境要求：
  C/C++ 编译器
 GCC 6.1.0+    linux kernel
 编译 v4.6以后编译时确保CONFIG_KCOV=y 之前版本：这样添加支持 一些额外选项    VM 一般QEMU
 支持QEMU、kvmtool和GCE虚拟机、Android设备和Odroid C2开发板 需要进行通信：vm要提供网络支持 vm配置需要ssh服务器 要能执行ssh -i $SSHID -p $PORT root@localhost 需要将debugfs 挂在到 /sys/kernel/debug    Golang 安装
wget https://dl.google.com/go/go1.14.1.linux-amd64.tar.gztar -C ~/goroot -xzf go1.14.1.linux-amd64.tar.gzvim /etc/profilemkdir /usr/local/gopath# 添加export export GOROOT=/home/kuekiko/gorootexport GOPATH=/home/kuekiko/gopathexport PATH=$GOROOT/bin:$PATHexport PATH=$GOPATH/bin:$PATHsource etc/profile  syzkaller</description>
    </item>
    
    <item>
      <title>Android之jemalloc</title>
      <link>https://kuekiko.top/posts/2020/04/android%E4%B9%8Bjemalloc/</link>
      <pubDate>Sun, 05 Apr 2020 18:18:59 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/04/android%E4%B9%8Bjemalloc/</guid>
      <description>0x00 简单介绍 想调一个CVE、发现对jemalloc 了解太少。重新复习复习jemalloc，做个记录。
jemalloc最初是2005年 Jason Evans开发的新一代内存分配器， 之后没多久被添加到FreeBSD的libc中的默认内存分配器，用来替代原来的phkmalloc。2007年 Firefox Mozilla项目的独立版本也将jemalloc作为主要的分配器。2009年，Facebook 的后端项目也广泛使用jemalloc。2014年，Android 5 开始采用jemalloc作为主要的内存分配器，不过部分Android5/6依然能看到dlmalloc和jemalloc两者并存。
jemalloc的一些特性与设计原则：
 强大的多核/多线程分配能力. 最小化的元数据开销 基于每个线程进行缓存，避免了同步问题。 避免了连续分配内存的碎片化问题。 简洁高效  0x01 结构  jemalloc对内存划分按照如下由高到低的顺序:
   内存是由一定数量的arenas进行管理. 一个arena被分割成若干chunks, 后者主要负责记录bookkeeping（记录信息）. chunk内部又包含着若干runs, 作为分配小块内存的基本单元. run由pages组成, 最终被划分成一定数量的regions 对于small size的分配请求来说, 这些region就相当于user memory.   arenas 对于Android来说：
限制了只使用两个arenas,每个带有一个lock。这意味着，不同线程尝试分配内存时，会循环、平均分配至两个arena，确保两个arena有大致相等的进程数量。只有在相同的arena中分配内存时才需要获取lock。
#/android.bpandroid_product_variables = {// Only enable the tcache on non-svelte configurations, to save PSS. malloc_not_svelte: {cflags: [&amp;#34;-UANDROID_MAX_ARENAS&amp;#34;,&amp;#34;-DANDROID_MAX_ARENAS=2&amp;#34;,&amp;#34;-DJEMALLOC_TCACHE&amp;#34;,&amp;#34;-DANDROID_TCACHE_NSLOTS_SMALL_MAX=8&amp;#34;,&amp;#34;-DANDROID_TCACHE_NSLOTS_LARGE=16&amp;#34;,],},}用shadow查看arenas</description>
    </item>
    
    <item>
      <title>Qemu&#43;gdb调试Linux内核</title>
      <link>https://kuekiko.top/posts/2019/08/qemu-gdb%E8%B0%83%E8%AF%95linux%E5%86%85%E6%A0%B8/</link>
      <pubDate>Wed, 28 Aug 2019 23:24:18 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/08/qemu-gdb%E8%B0%83%E8%AF%95linux%E5%86%85%E6%A0%B8/</guid>
      <description>前言 调试Linux内核可以使用VM双机调试，不过使用qemu来调试会更加方便。
环境搭建 编译源码 首先到Linux FTP仓库或者官网下载对应版本的源码。
这里下载的是linux-4.10.10
解压tar -xvJf linux-4.10.10.tar.xz
安装依赖
sudo apt install build-essential ncurses-dev xz-utils libssl-dev bc fakeroot aptitude libncurses5-dev​ sudo apt install qemu编译内核 make menuconfig进行配置：KernelHacking —&amp;gt; Compile-time checks and compiler options选中
Compile the kernel with debug infoCompile the kernel with frame pointersProvide GDB scripts for kernel debuggingProcessor type and features→去掉Paravirtualized guest support保存退出。
命令make -jN 进行编译
之后make all
make modules编译完成之后，vmlinux在源码根目录、bzImage在./arch/x86/boot/下</description>
    </item>
    
    <item>
      <title>ARM-PWN从入门到放弃0x00-环境准备</title>
      <link>https://kuekiko.top/posts/2019/08/arm-pwn%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%830x00-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link>
      <pubDate>Sat, 03 Aug 2019 12:26:24 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/08/arm-pwn%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%830x00-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid>
      <description>0x00 前言 学PWN也有一段时间了，x86/x86_64 下算是入了个门，平时接触ARM比较多，正好以ARM架构下再更加深入的学习PWN。
会用的工具、环境：
 在Ubuntu 18.04/WSL2 Docker for wsl2 树莓派3B+ qemu unicorn IDA Radare2 GDB+gef+pwndbg+peda pwntools  0x01 环境安装 这里选用的有两种环境
  ARM设备 树莓派
之前618买了树莓派，派上用场了。
把PI的官方系统换成了Ubuntu 18.04。
安装了GCC 、gdb、gef（经测试只有gef能用），其他也没什么需要装的。
关闭地址随机化
sudo cat /proc/sys/kernel/randomize_va_space # 状态查看2 # 开启中sudo echo 0 &amp;gt; /proc/sys/kernel/randomize_va_space bash: /proc/sys/kernel/randomize_va_space: Permission deniedsuecho 0 &amp;gt; /proc/sys/kernel/randomize_va_spacecat /proc/sys/kernel/randomize_va_space0 #这就OK  QEMU 模拟 (WSL2)
安装
#防止又出什么乱七八糟的错误和需求，尽量都装上apt install gdb gdb-multiarch ##apt install qemu ##apt install gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu ##gcc arm 依赖库安装  0x02 启动和调试   树莓派</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3B&#43; 0安装使用</title>
      <link>https://kuekiko.top/posts/2019/06/raspberry-pi-3b-0%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 23 Jun 2019 01:14:22 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/06/raspberry-pi-3b-0%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid>
      <description>Raspberry Pi 3B+ 0安装使用 0x00 购买 终于下手买了。打算用来学习ARM、以及一些硬件的知识。
 3B+ 裸机 32G SD card 散热片 保护壳  0x01 安装系统 首先下载系统镜像。
官网有挺多系统可以选择，这里选择了安装Raspbian desktop最新版
之后打算装Lite版，手上没有多余的显示器。而且桌面版占用很高。
迅雷，3分钟搞定。
其次开始向SD卡中写镜像。
买的32G闪迪的高速卡，现在32G都白菜价了，想想几年前16G的死贵。
官方教程用的是Etcher ，也可以用Win32DiskImager。这里省事还是用Etcher。
步骤
 下载etcher.io安装包安装Etcher](https://etcher.io/) 运行Etcher,选择镜像和sd卡  Flash一键搞定。  0x02 配置 系统安装完，开始进行配置。
先连上显示器看看
然而平时显示器还是要连笔记本，而且这分辨率好糊。所以还是配ssh和VNC连接使用吧。
 修改源  # 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contribdeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib# 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch mainsudo apt update
 拓展SD卡  sudo raspi-config -&amp;gt; Advanced Opt -&amp;gt; A1 Expand Filesystem</description>
    </item>
    
    <item>
      <title>MobSecVM</title>
      <link>https://kuekiko.top/posts/2019/06/mobsecvm/</link>
      <pubDate>Sun, 16 Jun 2019 00:12:44 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/06/mobsecvm/</guid>
      <description>0x00 前言 最近不知为何VM-Ubuntu炸了，试了各种方法，折腾了很久之后，终于恢复了。又浪费时间和环境斗志斗勇。自此打算自己弄一个包含了Android安全所需各种工具的环境，做个备份。防止哪天又出各种各样的问题。
项目地址：MobSecVM
下载地址：baiduyun、google_yun
0x01 环境准备  Ubuntu 18.04 LTS   Username：mobsec
Password：mobsec
  Vmware 15  0x02 Tools （不断补充）   AndroidStudio 开发全家桶带模拟器
  Radare2 逆向框架
  Frida Hook工具
  Drozer Android应用程序安全评估框架
  APKtool APK逆向工具
  BurpSuite 抓改包，安全检测
  Wireshare 抓包工具
  MobSF 应用程序自动化分析框架
  androguard 一款基于python的逆向工程，恶意软件和软件分析Android应用程序的框架。
  VScode 编辑器
  bytecode-viewer
  barf&amp;ndash;project
  jadx Dex to Java decompiler</description>
    </item>
    
    <item>
      <title>漏洞基础之3UAF</title>
      <link>https://kuekiko.top/posts/2019/03/%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%B9%8B3uaf/</link>
      <pubDate>Wed, 20 Mar 2019 15:37:13 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/03/%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%B9%8B3uaf/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>