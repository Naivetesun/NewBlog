<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具环境 on ------------</title>
    <link>https://kuekiko.top/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/</link>
    <description>Recent content in 工具环境 on ------------</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 16 Jun 2019 00:12:44 +0800</lastBuildDate>
    
	<atom:link href="https://kuekiko.top/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MobSecVM</title>
      <link>https://kuekiko.top/posts/2019/06/mobsecvm/</link>
      <pubDate>Sun, 16 Jun 2019 00:12:44 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/06/mobsecvm/</guid>
      <description>0x00 前言 最近不知为何VM-Ubuntu炸了，试了各种方法，折腾了很久之后，终于恢复了。又浪费时间和环境斗志斗勇。自此打算自己弄一个包含了Android安全所需各种工具的环境，做个备份。防止哪天又出各种各样的问题。
项目地址：MobSecVM
下载地址：baiduyun、google_yun
0x01 环境准备  Ubuntu 18.04 LTS   Username：mobsec
Password：mobsec
  Vmware 15  0x02 Tools （不断补充）   AndroidStudio 开发全家桶带模拟器
  Radare2 逆向框架
  Frida Hook工具
  Drozer Android应用程序安全评估框架
  APKtool APK逆向工具
  BurpSuite 抓改包，安全检测
  Wireshare 抓包工具
  MobSF 应用程序自动化分析框架
  androguard 一款基于python的逆向工程，恶意软件和软件分析Android应用程序的框架。
  VScode 编辑器
  bytecode-viewer
  barf&amp;ndash;project
  jadx Dex to Java decompiler</description>
    </item>
    
    <item>
      <title>Frida从入门到放弃_2</title>
      <link>https://kuekiko.top/posts/2019/02/frida%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83_2/</link>
      <pubDate>Sat, 02 Feb 2019 20:39:26 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/02/frida%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83_2/</guid>
      <description>0x00 前言 复习一下Android安装frida命令
adb rootadb push frida-server /data/local/tmpadb shell &amp;#34;chmod 755 /data/local/tmp/frida-server&amp;#34;adb shell &amp;#34;/data/local/tmp/frida-server &amp;amp;&amp;#34;常用Frida 命令
frida-ps -U #列出USB设备运行ing的进程frida-ps -Ua #列出运行中的应用frida-ps -Uai #列出已安装的应用列表frida-ps -D xxx #连接指定的设备frida-ps -R#在Safari中跟踪recv*和send* APIfrida-trace -i &amp;#34;recv*&amp;#34; -i &amp;#34;send&amp;#34; Safari #在Safari中跟踪ObjC方法调用frida-trace -m &amp;#34;-[NSView drawRect:]&amp;#34; Safari#在iPhone上启动SnapChat，跟踪加密API调用frida-trace -U -f com.app.testing -I &amp;#34;libcommonCrypto*&amp;#34;#当程序启动时，frida跟踪所有open functionfrida-trace -U -i open com.app.testing下面通过自己创建一个Android APP来学习Frida在Android上的一般用法。
0x01 简单用例 Frida常用的两种启动方式：
 python 绑定启动  import fridaimport sys,os## package name pkg_name = &amp;#34;com.</description>
    </item>
    
    <item>
      <title>Frida从入门到放弃_1</title>
      <link>https://kuekiko.top/posts/2019/01/frida%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83_1/</link>
      <pubDate>Tue, 22 Jan 2019 20:39:26 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/01/frida%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83_1/</guid>
      <description>0x00 Frida Frida 官网：https://www.frida.re/
github: https://github.com/frida/frida
Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.
 Scriptable Portable Free Battle-tested  0x01 安装 二进制安装 (推荐) pip install frida-tools 就一个命令搞定
 Failed to load the Frida native extension: DLL load failed: 找不到指定的模块
报了这个错 查了大半天 原来我用的版本是基于python3.7编译的。我现在用的3.6.。。。。
 绑定：二选一就行
pip install frida # Python bindingsnpm install frida # Node.js bindings手动编译 依赖：
pip3 install colorama prompt-toolkit pygments
 Linux  make
 MacOS and iOS  export MAC_CERTID=frida-certexport IOS_CERTID=frida-certmake Windows  frida.</description>
    </item>
    
    <item>
      <title>radare2&#43;cutter使用指南</title>
      <link>https://kuekiko.top/posts/2019/01/radare2-cutter%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 02 Jan 2019 20:39:26 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/01/radare2-cutter%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>0x00 介绍 radare2 一个很实用的二进制分析和调试工具
cutter 是r2的GUI版。
0x01 安装 支持的平台有如下：
 Windows (since XP), GNU/Linux, OS X, [Net|Free|Open]BSD, Android, iOS, OSX, QNX, Solaris, Haiku, FirefoxOS.
 Linux平台下直接
git clone https://github.com/radare/radare2cd radare2sys/install.sh //(or sys/user.sh)Windows下可以下载二进制安装包安装。官网下载
Windows用户推荐使用Windows下的linux（wsl）来使用， win下更新慢。还是linux下用得舒服（方便，快捷）。
0x03 工具介绍 r2常用的包含有一下组件：
 rax2 用于数值转换 rasm2 反汇编和汇编 rabin2 查看文件格式 radiff2 对文件进行 diff ragg2/ragg2­cc 开发shellcode工具 rahash2 各种密码算法， hash算法 radare2 整合了所有工具  使用帮助直接-h
 rax2   rasm2   rabin2  eg: (-I)</description>
    </item>
    
    <item>
      <title>Pytorch学习_1安装</title>
      <link>https://kuekiko.top/posts/2018/12/pytorch%E5%AD%A6%E4%B9%A0_1%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 08 Dec 2018 23:40:51 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2018/12/pytorch%E5%AD%A6%E4%B9%A0_1%E5%AE%89%E8%A3%85/</guid>
      <description>前言 本来想着用tensorflow的 然而GPU版总是报各种各样的BUG
所以打算入坑一下学pytorch
配置：win10+i76700HQ+GTX1060+16G
软件版本：CUDA10+python3.6+pytorch 1 源码编译
尝试1：官方安装方法不支持 CUDA 10 太坑，社区有编译通过的，所以只有自己编译试试
报各种异常，但是没停，那就等等
CPU被占满，巨卡。
一觉起来之后：安装失败
尝试2：等着完全支持CUDA10之后在用GPU跑吧。
妥协：用阿里云的学生服务器装了CPU的版本：顺便把TensorFlow 也给装了。。
然而 在一个星期之后 pytorch1.0出来了 支持了CUDA10 nice
pip3 install http://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-win_amd64.whlpip3 install torchvision期间没有遇到任何问题 真舒畅。。。</description>
    </item>
    
    <item>
      <title>PWN 小tools的使用</title>
      <link>https://kuekiko.top/posts/2018/10/pwn-%E5%B0%8Ftools%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 22 Oct 2018 20:39:26 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2018/10/pwn-%E5%B0%8Ftools%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>GCC 编译常用命令    不带选项  gcc test.c 将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。     -o 指定生成的输出文件； gcc test.c -o test 将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。   -E 仅执行编译预处理； gcc -E test.c -o test.i 将test.c预处理输出test.i文件。   -S 将C代码转换为汇编代码； gcc -S test.i 将预处理输出文件test.i汇编成test.s文件。   -c 仅执行编译操作，不进行连接操作。 gcc -c test.s 将汇编输出文件test.s编译输出test.o文件。   -wall 显示警告信息；    无选项链接  gcc test.o -o test 将编译输出文件test.o链接成最终可执行文件test。   -O 使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长 gcc -O1 test.c -o test    关掉DEP/NX（堆栈不可执行） gcc -z execstack -o level level.</description>
    </item>
    
    <item>
      <title>QEMU的安装使用</title>
      <link>https://kuekiko.top/posts/2018/08/qemu%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 09 Aug 2018 19:34:34 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2018/08/qemu%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid>
      <description>QEMU的安装使用 安装 WIndows：https://qemu.weilnetz.de/w64/ 下载exe安装就行
MACOS:brew install qemu or sudo port install qemu
LINUX：
 Arch: pacman -S qemu Debian/Ubuntu: apt-get install qemu Fedora: dnf install @virtualization Gentoo: emerge --ask app-emulation/qemu RHEL/CentOS: yum install qemu-kvm SUSE: zypper install qemu  源码安装：https://download.qemu.org/
wget
wget https://download.qemu.org/qemu-3.0.0-rc1.tar.xztar xvJf qemu-3.0.0-rc1.tar.xzcd qemu-3.0.0-rc1./configuremakegit
git clone git://git.qemu.org/qemu.gitcd qemugit submodule initgit submodule update --recursive./configuremake最新的开发发生在主分支上。稳定的树位于名为“稳定x”的分支中。YY分支,X。YY是发布版本。
树莓派内核制作（在windows上) 下载树莓派系统：http://downloads.raspberrypi.org/raspbian/images/
下载qume 的树莓派内核： https://github.</description>
    </item>
    
    <item>
      <title>环境记录(手动置顶)</title>
      <link>https://kuekiko.top/posts/1/01/%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95%E6%89%8B%E5%8A%A8%E7%BD%AE%E9%A1%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kuekiko.top/posts/1/01/%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95%E6%89%8B%E5%8A%A8%E7%BD%AE%E9%A1%B6/</guid>
      <description>用来不时记录平时所用环境配置，以及遇到的各种问题以及解决办法。主要是为了防丢失，以及总是和空气斗志斗勇。
 Win10  日常使用
 WSL 默认不是root 设置默认root用户。ubuntu config --default-user root
  on my zsh 装上
官方github
需要先安装ZSH。
安装on my zsh:
via curl：sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
via wget: sh -c &amp;quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&amp;quot;
然后配置喜欢的 插件+主题。vi ~/.zshrc 修改plugins属性
必备插件git、autojump、zsh-autosuggestions。主题
  GDB装上+pwndbg+peda+gef
wsl的ubuntu不支持x86，所以主要只能调试x64的程序，而且可能会出现莫名其妙的错误。
不过可以使用qemu来运行x86的程序，调试还是不行会出错。参考
sudo apt updatesudo apt install qemu-user-staticsudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic &amp;#39;\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00&amp;#39; --mask &amp;#39;\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff&amp;#39;# 运行下面的一条命令就行跑x86 不过每次打开wsl都得运行一次，很麻烦，可以写脚本自动开启。sudo service binfmt-support start  pwndbg+peda+gef</description>
    </item>
    
  </channel>
</rss>